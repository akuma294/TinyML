
Proj12_Applicatn_Stdent8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d490  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b60  0800d620  0800d620  0001d620  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e180  0800e180  000208a8  2**0
                  CONTENTS
  4 .ARM          00000000  0800e180  0800e180  000208a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e180  0800e180  000208a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e180  0800e180  0001e180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e184  0800e184  0001e184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000008a8  20000000  0800e188  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000208a8  2**0
                  CONTENTS
 10 .bss          00001f24  200008c0  200008c0  000208c0  2**5
                  ALLOC
 11 ._user_heap_stack 00000604  200027e4  200027e4  000208c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000208a8  2**0
                  CONTENTS, READONLY
 13 .comment      00000093  00000000  00000000  000208d8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000dcd6  00000000  00000000  0002096b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002867  00000000  00000000  0002e641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ac8  00000000  00000000  00030ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000007fc  00000000  00000000  00031970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000200f4  00000000  00000000  0003216c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000105a6  00000000  00000000  00052260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b5b9c  00000000  00000000  00062806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004194  00000000  00000000  001183a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  0011c538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200008c0 	.word	0x200008c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d608 	.word	0x0800d608

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200008c4 	.word	0x200008c4
 80001cc:	0800d608 	.word	0x0800d608

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_f2lz>:
 8000c88:	ee07 0a90 	vmov	s15, r0
 8000c8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c94:	d401      	bmi.n	8000c9a <__aeabi_f2lz+0x12>
 8000c96:	f000 b823 	b.w	8000ce0 <__aeabi_f2ulz>
 8000c9a:	eef1 7a67 	vneg.f32	s15, s15
 8000c9e:	b508      	push	{r3, lr}
 8000ca0:	ee17 0a90 	vmov	r0, s15
 8000ca4:	f000 f81c 	bl	8000ce0 <__aeabi_f2ulz>
 8000ca8:	4240      	negs	r0, r0
 8000caa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cae:	bd08      	pop	{r3, pc}

08000cb0 <__aeabi_d2lz>:
 8000cb0:	b538      	push	{r3, r4, r5, lr}
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	4604      	mov	r4, r0
 8000cb8:	460d      	mov	r5, r1
 8000cba:	f7ff ff0f 	bl	8000adc <__aeabi_dcmplt>
 8000cbe:	b928      	cbnz	r0, 8000ccc <__aeabi_d2lz+0x1c>
 8000cc0:	4620      	mov	r0, r4
 8000cc2:	4629      	mov	r1, r5
 8000cc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc8:	f000 b82a 	b.w	8000d20 <__aeabi_d2ulz>
 8000ccc:	4620      	mov	r0, r4
 8000cce:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cd2:	f000 f825 	bl	8000d20 <__aeabi_d2ulz>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	bd38      	pop	{r3, r4, r5, pc}
 8000cde:	bf00      	nop

08000ce0 <__aeabi_f2ulz>:
 8000ce0:	b5d0      	push	{r4, r6, r7, lr}
 8000ce2:	f7ff fc31 	bl	8000548 <__aeabi_f2d>
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <__aeabi_f2ulz+0x38>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	4606      	mov	r6, r0
 8000cec:	460f      	mov	r7, r1
 8000cee:	f7ff fc83 	bl	80005f8 <__aeabi_dmul>
 8000cf2:	f7ff ff59 	bl	8000ba8 <__aeabi_d2uiz>
 8000cf6:	4604      	mov	r4, r0
 8000cf8:	f7ff fc04 	bl	8000504 <__aeabi_ui2d>
 8000cfc:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <__aeabi_f2ulz+0x3c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f7ff fc7a 	bl	80005f8 <__aeabi_dmul>
 8000d04:	4602      	mov	r2, r0
 8000d06:	460b      	mov	r3, r1
 8000d08:	4630      	mov	r0, r6
 8000d0a:	4639      	mov	r1, r7
 8000d0c:	f7ff fabc 	bl	8000288 <__aeabi_dsub>
 8000d10:	f7ff ff4a 	bl	8000ba8 <__aeabi_d2uiz>
 8000d14:	4621      	mov	r1, r4
 8000d16:	bdd0      	pop	{r4, r6, r7, pc}
 8000d18:	3df00000 	.word	0x3df00000
 8000d1c:	41f00000 	.word	0x41f00000

08000d20 <__aeabi_d2ulz>:
 8000d20:	b5d0      	push	{r4, r6, r7, lr}
 8000d22:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <__aeabi_d2ulz+0x34>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	4606      	mov	r6, r0
 8000d28:	460f      	mov	r7, r1
 8000d2a:	f7ff fc65 	bl	80005f8 <__aeabi_dmul>
 8000d2e:	f7ff ff3b 	bl	8000ba8 <__aeabi_d2uiz>
 8000d32:	4604      	mov	r4, r0
 8000d34:	f7ff fbe6 	bl	8000504 <__aeabi_ui2d>
 8000d38:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <__aeabi_d2ulz+0x38>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f7ff fc5c 	bl	80005f8 <__aeabi_dmul>
 8000d40:	4602      	mov	r2, r0
 8000d42:	460b      	mov	r3, r1
 8000d44:	4630      	mov	r0, r6
 8000d46:	4639      	mov	r1, r7
 8000d48:	f7ff fa9e 	bl	8000288 <__aeabi_dsub>
 8000d4c:	f7ff ff2c 	bl	8000ba8 <__aeabi_d2uiz>
 8000d50:	4621      	mov	r1, r4
 8000d52:	bdd0      	pop	{r4, r6, r7, pc}
 8000d54:	3df00000 	.word	0x3df00000
 8000d58:	41f00000 	.word	0x41f00000

08000d5c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d60:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <HAL_Init+0x28>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a07      	ldr	r2, [pc, #28]	; (8000d84 <HAL_Init+0x28>)
 8000d66:	f043 0310 	orr.w	r3, r3, #16
 8000d6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d6c:	2003      	movs	r0, #3
 8000d6e:	f000 f931 	bl	8000fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d72:	2000      	movs	r0, #0
 8000d74:	f000 f808 	bl	8000d88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d78:	f003 f844 	bl	8003e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40022000 	.word	0x40022000

08000d88 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d90:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <HAL_InitTick+0x54>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <HAL_InitTick+0x58>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	4619      	mov	r1, r3
 8000d9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000da6:	4618      	mov	r0, r3
 8000da8:	f000 f93b 	bl	8001022 <HAL_SYSTICK_Config>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e00e      	b.n	8000dd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2b0f      	cmp	r3, #15
 8000dba:	d80a      	bhi.n	8000dd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	6879      	ldr	r1, [r7, #4]
 8000dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc4:	f000 f911 	bl	8000fea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc8:	4a06      	ldr	r2, [pc, #24]	; (8000de4 <HAL_InitTick+0x5c>)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e000      	b.n	8000dd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	200006dc 	.word	0x200006dc
 8000de0:	20000004 	.word	0x20000004
 8000de4:	20000000 	.word	0x20000000

08000de8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <HAL_IncTick+0x20>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	461a      	mov	r2, r3
 8000df2:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <HAL_IncTick+0x24>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4413      	add	r3, r2
 8000df8:	4a04      	ldr	r2, [pc, #16]	; (8000e0c <HAL_IncTick+0x24>)
 8000dfa:	6013      	str	r3, [r2, #0]
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	20000004 	.word	0x20000004
 8000e0c:	200008dc 	.word	0x200008dc

08000e10 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e14:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <HAL_GetTick+0x14>)
 8000e16:	681b      	ldr	r3, [r3, #0]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	200008dc 	.word	0x200008dc

08000e28 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e30:	f7ff ffee 	bl	8000e10 <HAL_GetTick>
 8000e34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e40:	d005      	beq.n	8000e4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e42:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <HAL_Delay+0x44>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	461a      	mov	r2, r3
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e4e:	bf00      	nop
 8000e50:	f7ff ffde 	bl	8000e10 <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d8f7      	bhi.n	8000e50 <HAL_Delay+0x28>
  {
  }
}
 8000e60:	bf00      	nop
 8000e62:	bf00      	nop
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000004 	.word	0x20000004

08000e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e86:	68ba      	ldr	r2, [r7, #8]
 8000e88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea2:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	60d3      	str	r3, [r2, #12]
}
 8000ea8:	bf00      	nop
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	f003 0307 	and.w	r3, r3, #7
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	6039      	str	r1, [r7, #0]
 8000ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	db0a      	blt.n	8000efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	490c      	ldr	r1, [pc, #48]	; (8000f20 <__NVIC_SetPriority+0x4c>)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	0112      	lsls	r2, r2, #4
 8000ef4:	b2d2      	uxtb	r2, r2
 8000ef6:	440b      	add	r3, r1
 8000ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000efc:	e00a      	b.n	8000f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4908      	ldr	r1, [pc, #32]	; (8000f24 <__NVIC_SetPriority+0x50>)
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	f003 030f 	and.w	r3, r3, #15
 8000f0a:	3b04      	subs	r3, #4
 8000f0c:	0112      	lsls	r2, r2, #4
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	440b      	add	r3, r1
 8000f12:	761a      	strb	r2, [r3, #24]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000e100 	.word	0xe000e100
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b089      	sub	sp, #36	; 0x24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f1c3 0307 	rsb	r3, r3, #7
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	bf28      	it	cs
 8000f46:	2304      	movcs	r3, #4
 8000f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	2b06      	cmp	r3, #6
 8000f50:	d902      	bls.n	8000f58 <NVIC_EncodePriority+0x30>
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3b03      	subs	r3, #3
 8000f56:	e000      	b.n	8000f5a <NVIC_EncodePriority+0x32>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43da      	mvns	r2, r3
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	401a      	ands	r2, r3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f70:	f04f 31ff 	mov.w	r1, #4294967295
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7a:	43d9      	mvns	r1, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	4313      	orrs	r3, r2
         );
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3724      	adds	r7, #36	; 0x24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
	...

08000f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fa0:	d301      	bcc.n	8000fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e00f      	b.n	8000fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	; (8000fd0 <SysTick_Config+0x40>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fae:	210f      	movs	r1, #15
 8000fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb4:	f7ff ff8e 	bl	8000ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <SysTick_Config+0x40>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fbe:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <SysTick_Config+0x40>)
 8000fc0:	2207      	movs	r2, #7
 8000fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	e000e010 	.word	0xe000e010

08000fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ff47 	bl	8000e70 <__NVIC_SetPriorityGrouping>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b086      	sub	sp, #24
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	607a      	str	r2, [r7, #4]
 8000ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ffc:	f7ff ff5c 	bl	8000eb8 <__NVIC_GetPriorityGrouping>
 8001000:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	68b9      	ldr	r1, [r7, #8]
 8001006:	6978      	ldr	r0, [r7, #20]
 8001008:	f7ff ff8e 	bl	8000f28 <NVIC_EncodePriority>
 800100c:	4602      	mov	r2, r0
 800100e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff5d 	bl	8000ed4 <__NVIC_SetPriority>
}
 800101a:	bf00      	nop
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff ffb0 	bl	8000f90 <SysTick_Config>
 8001030:	4603      	mov	r3, r0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d101      	bne.n	800104e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e054      	b.n	80010f8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	7f5b      	ldrb	r3, [r3, #29]
 8001052:	b2db      	uxtb	r3, r3
 8001054:	2b00      	cmp	r3, #0
 8001056:	d105      	bne.n	8001064 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f002 fae8 	bl	8003634 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2202      	movs	r2, #2
 8001068:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	791b      	ldrb	r3, [r3, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d10c      	bne.n	800108c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a22      	ldr	r2, [pc, #136]	; (8001100 <HAL_CRC_Init+0xc4>)
 8001078:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	689a      	ldr	r2, [r3, #8]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f022 0218 	bic.w	r2, r2, #24
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	e00c      	b.n	80010a6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6899      	ldr	r1, [r3, #8]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	461a      	mov	r2, r3
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f000 f834 	bl	8001104 <HAL_CRCEx_Polynomial_Set>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e028      	b.n	80010f8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	795b      	ldrb	r3, [r3, #5]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d105      	bne.n	80010ba <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f04f 32ff 	mov.w	r2, #4294967295
 80010b6:	611a      	str	r2, [r3, #16]
 80010b8:	e004      	b.n	80010c4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	6912      	ldr	r2, [r2, #16]
 80010c2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	695a      	ldr	r2, [r3, #20]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	430a      	orrs	r2, r1
 80010d8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	699a      	ldr	r2, [r3, #24]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	430a      	orrs	r2, r1
 80010ee:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2201      	movs	r2, #1
 80010f4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	04c11db7 	.word	0x04c11db7

08001104 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001104:	b480      	push	{r7}
 8001106:	b087      	sub	sp, #28
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001110:	2300      	movs	r3, #0
 8001112:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001114:	231f      	movs	r3, #31
 8001116:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	2b00      	cmp	r3, #0
 8001120:	d102      	bne.n	8001128 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	75fb      	strb	r3, [r7, #23]
 8001126:	e063      	b.n	80011f0 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001128:	bf00      	nop
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	1e5a      	subs	r2, r3, #1
 800112e:	613a      	str	r2, [r7, #16]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d009      	beq.n	8001148 <HAL_CRCEx_Polynomial_Set+0x44>
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	f003 031f 	and.w	r3, r3, #31
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	fa22 f303 	lsr.w	r3, r2, r3
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	2b00      	cmp	r3, #0
 8001146:	d0f0      	beq.n	800112a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b18      	cmp	r3, #24
 800114c:	d846      	bhi.n	80011dc <HAL_CRCEx_Polynomial_Set+0xd8>
 800114e:	a201      	add	r2, pc, #4	; (adr r2, 8001154 <HAL_CRCEx_Polynomial_Set+0x50>)
 8001150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001154:	080011e3 	.word	0x080011e3
 8001158:	080011dd 	.word	0x080011dd
 800115c:	080011dd 	.word	0x080011dd
 8001160:	080011dd 	.word	0x080011dd
 8001164:	080011dd 	.word	0x080011dd
 8001168:	080011dd 	.word	0x080011dd
 800116c:	080011dd 	.word	0x080011dd
 8001170:	080011dd 	.word	0x080011dd
 8001174:	080011d1 	.word	0x080011d1
 8001178:	080011dd 	.word	0x080011dd
 800117c:	080011dd 	.word	0x080011dd
 8001180:	080011dd 	.word	0x080011dd
 8001184:	080011dd 	.word	0x080011dd
 8001188:	080011dd 	.word	0x080011dd
 800118c:	080011dd 	.word	0x080011dd
 8001190:	080011dd 	.word	0x080011dd
 8001194:	080011c5 	.word	0x080011c5
 8001198:	080011dd 	.word	0x080011dd
 800119c:	080011dd 	.word	0x080011dd
 80011a0:	080011dd 	.word	0x080011dd
 80011a4:	080011dd 	.word	0x080011dd
 80011a8:	080011dd 	.word	0x080011dd
 80011ac:	080011dd 	.word	0x080011dd
 80011b0:	080011dd 	.word	0x080011dd
 80011b4:	080011b9 	.word	0x080011b9
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	2b06      	cmp	r3, #6
 80011bc:	d913      	bls.n	80011e6 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80011c2:	e010      	b.n	80011e6 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	2b07      	cmp	r3, #7
 80011c8:	d90f      	bls.n	80011ea <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80011ce:	e00c      	b.n	80011ea <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	2b0f      	cmp	r3, #15
 80011d4:	d90b      	bls.n	80011ee <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80011da:	e008      	b.n	80011ee <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	75fb      	strb	r3, [r7, #23]
        break;
 80011e0:	e006      	b.n	80011f0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80011e2:	bf00      	nop
 80011e4:	e004      	b.n	80011f0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80011e6:	bf00      	nop
 80011e8:	e002      	b.n	80011f0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80011ea:	bf00      	nop
 80011ec:	e000      	b.n	80011f0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80011ee:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80011f0:	7dfb      	ldrb	r3, [r7, #23]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d10d      	bne.n	8001212 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	f023 0118 	bic.w	r1, r3, #24
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	430a      	orrs	r2, r1
 8001210:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001212:	7dfb      	ldrb	r3, [r7, #23]
}
 8001214:	4618      	mov	r0, r3
 8001216:	371c      	adds	r7, #28
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001220:	b480      	push	{r7}
 8001222:	b087      	sub	sp, #28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800122e:	e14e      	b.n	80014ce <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	2101      	movs	r1, #1
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	fa01 f303 	lsl.w	r3, r1, r3
 800123c:	4013      	ands	r3, r2
 800123e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2b00      	cmp	r3, #0
 8001244:	f000 8140 	beq.w	80014c8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 0303 	and.w	r3, r3, #3
 8001250:	2b01      	cmp	r3, #1
 8001252:	d005      	beq.n	8001260 <HAL_GPIO_Init+0x40>
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 0303 	and.w	r3, r3, #3
 800125c:	2b02      	cmp	r3, #2
 800125e:	d130      	bne.n	80012c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	2203      	movs	r2, #3
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	68da      	ldr	r2, [r3, #12]
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	4313      	orrs	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001296:	2201      	movs	r2, #1
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43db      	mvns	r3, r3
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4013      	ands	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	091b      	lsrs	r3, r3, #4
 80012ac:	f003 0201 	and.w	r2, r3, #1
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f003 0303 	and.w	r3, r3, #3
 80012ca:	2b03      	cmp	r3, #3
 80012cc:	d017      	beq.n	80012fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	2203      	movs	r2, #3
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43db      	mvns	r3, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4013      	ands	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	689a      	ldr	r2, [r3, #8]
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f003 0303 	and.w	r3, r3, #3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d123      	bne.n	8001352 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	08da      	lsrs	r2, r3, #3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	3208      	adds	r2, #8
 8001312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001316:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	220f      	movs	r2, #15
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43db      	mvns	r3, r3
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	4013      	ands	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	691a      	ldr	r2, [r3, #16]
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	f003 0307 	and.w	r3, r3, #7
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	4313      	orrs	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	08da      	lsrs	r2, r3, #3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3208      	adds	r2, #8
 800134c:	6939      	ldr	r1, [r7, #16]
 800134e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	2203      	movs	r2, #3
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43db      	mvns	r3, r3
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	4013      	ands	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f003 0203 	and.w	r2, r3, #3
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	4313      	orrs	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800138e:	2b00      	cmp	r3, #0
 8001390:	f000 809a 	beq.w	80014c8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001394:	4b55      	ldr	r3, [pc, #340]	; (80014ec <HAL_GPIO_Init+0x2cc>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	4a54      	ldr	r2, [pc, #336]	; (80014ec <HAL_GPIO_Init+0x2cc>)
 800139a:	f043 0301 	orr.w	r3, r3, #1
 800139e:	6193      	str	r3, [r2, #24]
 80013a0:	4b52      	ldr	r3, [pc, #328]	; (80014ec <HAL_GPIO_Init+0x2cc>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013ac:	4a50      	ldr	r2, [pc, #320]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	089b      	lsrs	r3, r3, #2
 80013b2:	3302      	adds	r3, #2
 80013b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	f003 0303 	and.w	r3, r3, #3
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	220f      	movs	r2, #15
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	4013      	ands	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013d6:	d013      	beq.n	8001400 <HAL_GPIO_Init+0x1e0>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a46      	ldr	r2, [pc, #280]	; (80014f4 <HAL_GPIO_Init+0x2d4>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d00d      	beq.n	80013fc <HAL_GPIO_Init+0x1dc>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a45      	ldr	r2, [pc, #276]	; (80014f8 <HAL_GPIO_Init+0x2d8>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d007      	beq.n	80013f8 <HAL_GPIO_Init+0x1d8>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4a44      	ldr	r2, [pc, #272]	; (80014fc <HAL_GPIO_Init+0x2dc>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d101      	bne.n	80013f4 <HAL_GPIO_Init+0x1d4>
 80013f0:	2303      	movs	r3, #3
 80013f2:	e006      	b.n	8001402 <HAL_GPIO_Init+0x1e2>
 80013f4:	2305      	movs	r3, #5
 80013f6:	e004      	b.n	8001402 <HAL_GPIO_Init+0x1e2>
 80013f8:	2302      	movs	r3, #2
 80013fa:	e002      	b.n	8001402 <HAL_GPIO_Init+0x1e2>
 80013fc:	2301      	movs	r3, #1
 80013fe:	e000      	b.n	8001402 <HAL_GPIO_Init+0x1e2>
 8001400:	2300      	movs	r3, #0
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	f002 0203 	and.w	r2, r2, #3
 8001408:	0092      	lsls	r2, r2, #2
 800140a:	4093      	lsls	r3, r2
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001412:	4937      	ldr	r1, [pc, #220]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	089b      	lsrs	r3, r3, #2
 8001418:	3302      	adds	r3, #2
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001420:	4b37      	ldr	r3, [pc, #220]	; (8001500 <HAL_GPIO_Init+0x2e0>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	43db      	mvns	r3, r3
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4013      	ands	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d003      	beq.n	8001444 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	4313      	orrs	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001444:	4a2e      	ldr	r2, [pc, #184]	; (8001500 <HAL_GPIO_Init+0x2e0>)
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800144a:	4b2d      	ldr	r3, [pc, #180]	; (8001500 <HAL_GPIO_Init+0x2e0>)
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	43db      	mvns	r3, r3
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	4013      	ands	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	4313      	orrs	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800146e:	4a24      	ldr	r2, [pc, #144]	; (8001500 <HAL_GPIO_Init+0x2e0>)
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001474:	4b22      	ldr	r3, [pc, #136]	; (8001500 <HAL_GPIO_Init+0x2e0>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	43db      	mvns	r3, r3
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d003      	beq.n	8001498 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	4313      	orrs	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001498:	4a19      	ldr	r2, [pc, #100]	; (8001500 <HAL_GPIO_Init+0x2e0>)
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800149e:	4b18      	ldr	r3, [pc, #96]	; (8001500 <HAL_GPIO_Init+0x2e0>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	43db      	mvns	r3, r3
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4013      	ands	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4313      	orrs	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014c2:	4a0f      	ldr	r2, [pc, #60]	; (8001500 <HAL_GPIO_Init+0x2e0>)
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	3301      	adds	r3, #1
 80014cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	fa22 f303 	lsr.w	r3, r2, r3
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f47f aea9 	bne.w	8001230 <HAL_GPIO_Init+0x10>
  }
}
 80014de:	bf00      	nop
 80014e0:	bf00      	nop
 80014e2:	371c      	adds	r7, #28
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40010000 	.word	0x40010000
 80014f4:	48000400 	.word	0x48000400
 80014f8:	48000800 	.word	0x48000800
 80014fc:	48000c00 	.word	0x48000c00
 8001500:	40010400 	.word	0x40010400

08001504 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800150a:	af00      	add	r7, sp, #0
 800150c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001510:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001514:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001516:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800151a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d102      	bne.n	800152a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	f001 b823 	b.w	8002570 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800152a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800152e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	2b00      	cmp	r3, #0
 800153c:	f000 817d 	beq.w	800183a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001540:	4bbc      	ldr	r3, [pc, #752]	; (8001834 <HAL_RCC_OscConfig+0x330>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f003 030c 	and.w	r3, r3, #12
 8001548:	2b04      	cmp	r3, #4
 800154a:	d00c      	beq.n	8001566 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800154c:	4bb9      	ldr	r3, [pc, #740]	; (8001834 <HAL_RCC_OscConfig+0x330>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 030c 	and.w	r3, r3, #12
 8001554:	2b08      	cmp	r3, #8
 8001556:	d15c      	bne.n	8001612 <HAL_RCC_OscConfig+0x10e>
 8001558:	4bb6      	ldr	r3, [pc, #728]	; (8001834 <HAL_RCC_OscConfig+0x330>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001564:	d155      	bne.n	8001612 <HAL_RCC_OscConfig+0x10e>
 8001566:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800156a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001572:	fa93 f3a3 	rbit	r3, r3
 8001576:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800157a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800157e:	fab3 f383 	clz	r3, r3
 8001582:	b2db      	uxtb	r3, r3
 8001584:	095b      	lsrs	r3, r3, #5
 8001586:	b2db      	uxtb	r3, r3
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b01      	cmp	r3, #1
 8001590:	d102      	bne.n	8001598 <HAL_RCC_OscConfig+0x94>
 8001592:	4ba8      	ldr	r3, [pc, #672]	; (8001834 <HAL_RCC_OscConfig+0x330>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	e015      	b.n	80015c4 <HAL_RCC_OscConfig+0xc0>
 8001598:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800159c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80015a4:	fa93 f3a3 	rbit	r3, r3
 80015a8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80015ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015b0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80015b4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80015b8:	fa93 f3a3 	rbit	r3, r3
 80015bc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80015c0:	4b9c      	ldr	r3, [pc, #624]	; (8001834 <HAL_RCC_OscConfig+0x330>)
 80015c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015c8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80015cc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80015d0:	fa92 f2a2 	rbit	r2, r2
 80015d4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80015d8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80015dc:	fab2 f282 	clz	r2, r2
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	f042 0220 	orr.w	r2, r2, #32
 80015e6:	b2d2      	uxtb	r2, r2
 80015e8:	f002 021f 	and.w	r2, r2, #31
 80015ec:	2101      	movs	r1, #1
 80015ee:	fa01 f202 	lsl.w	r2, r1, r2
 80015f2:	4013      	ands	r3, r2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f000 811f 	beq.w	8001838 <HAL_RCC_OscConfig+0x334>
 80015fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	f040 8116 	bne.w	8001838 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	f000 bfaf 	b.w	8002570 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001616:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001622:	d106      	bne.n	8001632 <HAL_RCC_OscConfig+0x12e>
 8001624:	4b83      	ldr	r3, [pc, #524]	; (8001834 <HAL_RCC_OscConfig+0x330>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a82      	ldr	r2, [pc, #520]	; (8001834 <HAL_RCC_OscConfig+0x330>)
 800162a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800162e:	6013      	str	r3, [r2, #0]
 8001630:	e036      	b.n	80016a0 <HAL_RCC_OscConfig+0x19c>
 8001632:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001636:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d10c      	bne.n	800165c <HAL_RCC_OscConfig+0x158>
 8001642:	4b7c      	ldr	r3, [pc, #496]	; (8001834 <HAL_RCC_OscConfig+0x330>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a7b      	ldr	r2, [pc, #492]	; (8001834 <HAL_RCC_OscConfig+0x330>)
 8001648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	4b79      	ldr	r3, [pc, #484]	; (8001834 <HAL_RCC_OscConfig+0x330>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a78      	ldr	r2, [pc, #480]	; (8001834 <HAL_RCC_OscConfig+0x330>)
 8001654:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001658:	6013      	str	r3, [r2, #0]
 800165a:	e021      	b.n	80016a0 <HAL_RCC_OscConfig+0x19c>
 800165c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001660:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800166c:	d10c      	bne.n	8001688 <HAL_RCC_OscConfig+0x184>
 800166e:	4b71      	ldr	r3, [pc, #452]	; (8001834 <HAL_RCC_OscConfig+0x330>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a70      	ldr	r2, [pc, #448]	; (8001834 <HAL_RCC_OscConfig+0x330>)
 8001674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	4b6e      	ldr	r3, [pc, #440]	; (8001834 <HAL_RCC_OscConfig+0x330>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a6d      	ldr	r2, [pc, #436]	; (8001834 <HAL_RCC_OscConfig+0x330>)
 8001680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	e00b      	b.n	80016a0 <HAL_RCC_OscConfig+0x19c>
 8001688:	4b6a      	ldr	r3, [pc, #424]	; (8001834 <HAL_RCC_OscConfig+0x330>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a69      	ldr	r2, [pc, #420]	; (8001834 <HAL_RCC_OscConfig+0x330>)
 800168e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001692:	6013      	str	r3, [r2, #0]
 8001694:	4b67      	ldr	r3, [pc, #412]	; (8001834 <HAL_RCC_OscConfig+0x330>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a66      	ldr	r2, [pc, #408]	; (8001834 <HAL_RCC_OscConfig+0x330>)
 800169a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800169e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016a0:	4b64      	ldr	r3, [pc, #400]	; (8001834 <HAL_RCC_OscConfig+0x330>)
 80016a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a4:	f023 020f 	bic.w	r2, r3, #15
 80016a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	495f      	ldr	r1, [pc, #380]	; (8001834 <HAL_RCC_OscConfig+0x330>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d059      	beq.n	800177e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ca:	f7ff fba1 	bl	8000e10 <HAL_GetTick>
 80016ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d2:	e00a      	b.n	80016ea <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016d4:	f7ff fb9c 	bl	8000e10 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b64      	cmp	r3, #100	; 0x64
 80016e2:	d902      	bls.n	80016ea <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	f000 bf43 	b.w	8002570 <HAL_RCC_OscConfig+0x106c>
 80016ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016ee:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80016f6:	fa93 f3a3 	rbit	r3, r3
 80016fa:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80016fe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001702:	fab3 f383 	clz	r3, r3
 8001706:	b2db      	uxtb	r3, r3
 8001708:	095b      	lsrs	r3, r3, #5
 800170a:	b2db      	uxtb	r3, r3
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b01      	cmp	r3, #1
 8001714:	d102      	bne.n	800171c <HAL_RCC_OscConfig+0x218>
 8001716:	4b47      	ldr	r3, [pc, #284]	; (8001834 <HAL_RCC_OscConfig+0x330>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	e015      	b.n	8001748 <HAL_RCC_OscConfig+0x244>
 800171c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001720:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001724:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001728:	fa93 f3a3 	rbit	r3, r3
 800172c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001730:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001734:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001738:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800173c:	fa93 f3a3 	rbit	r3, r3
 8001740:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001744:	4b3b      	ldr	r3, [pc, #236]	; (8001834 <HAL_RCC_OscConfig+0x330>)
 8001746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001748:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800174c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001750:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001754:	fa92 f2a2 	rbit	r2, r2
 8001758:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800175c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001760:	fab2 f282 	clz	r2, r2
 8001764:	b2d2      	uxtb	r2, r2
 8001766:	f042 0220 	orr.w	r2, r2, #32
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	f002 021f 	and.w	r2, r2, #31
 8001770:	2101      	movs	r1, #1
 8001772:	fa01 f202 	lsl.w	r2, r1, r2
 8001776:	4013      	ands	r3, r2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0ab      	beq.n	80016d4 <HAL_RCC_OscConfig+0x1d0>
 800177c:	e05d      	b.n	800183a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177e:	f7ff fb47 	bl	8000e10 <HAL_GetTick>
 8001782:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001786:	e00a      	b.n	800179e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001788:	f7ff fb42 	bl	8000e10 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b64      	cmp	r3, #100	; 0x64
 8001796:	d902      	bls.n	800179e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	f000 bee9 	b.w	8002570 <HAL_RCC_OscConfig+0x106c>
 800179e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017a2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80017aa:	fa93 f3a3 	rbit	r3, r3
 80017ae:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80017b2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017b6:	fab3 f383 	clz	r3, r3
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	095b      	lsrs	r3, r3, #5
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d102      	bne.n	80017d0 <HAL_RCC_OscConfig+0x2cc>
 80017ca:	4b1a      	ldr	r3, [pc, #104]	; (8001834 <HAL_RCC_OscConfig+0x330>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	e015      	b.n	80017fc <HAL_RCC_OscConfig+0x2f8>
 80017d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017d4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80017dc:	fa93 f3a3 	rbit	r3, r3
 80017e0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80017e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017e8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80017ec:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80017f0:	fa93 f3a3 	rbit	r3, r3
 80017f4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80017f8:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <HAL_RCC_OscConfig+0x330>)
 80017fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001800:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001804:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001808:	fa92 f2a2 	rbit	r2, r2
 800180c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001810:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001814:	fab2 f282 	clz	r2, r2
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	f042 0220 	orr.w	r2, r2, #32
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	f002 021f 	and.w	r2, r2, #31
 8001824:	2101      	movs	r1, #1
 8001826:	fa01 f202 	lsl.w	r2, r1, r2
 800182a:	4013      	ands	r3, r2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1ab      	bne.n	8001788 <HAL_RCC_OscConfig+0x284>
 8001830:	e003      	b.n	800183a <HAL_RCC_OscConfig+0x336>
 8001832:	bf00      	nop
 8001834:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001838:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800183a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800183e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	f000 817d 	beq.w	8001b4a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001850:	4ba6      	ldr	r3, [pc, #664]	; (8001aec <HAL_RCC_OscConfig+0x5e8>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 030c 	and.w	r3, r3, #12
 8001858:	2b00      	cmp	r3, #0
 800185a:	d00b      	beq.n	8001874 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800185c:	4ba3      	ldr	r3, [pc, #652]	; (8001aec <HAL_RCC_OscConfig+0x5e8>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f003 030c 	and.w	r3, r3, #12
 8001864:	2b08      	cmp	r3, #8
 8001866:	d172      	bne.n	800194e <HAL_RCC_OscConfig+0x44a>
 8001868:	4ba0      	ldr	r3, [pc, #640]	; (8001aec <HAL_RCC_OscConfig+0x5e8>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d16c      	bne.n	800194e <HAL_RCC_OscConfig+0x44a>
 8001874:	2302      	movs	r3, #2
 8001876:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800187e:	fa93 f3a3 	rbit	r3, r3
 8001882:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001886:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800188a:	fab3 f383 	clz	r3, r3
 800188e:	b2db      	uxtb	r3, r3
 8001890:	095b      	lsrs	r3, r3, #5
 8001892:	b2db      	uxtb	r3, r3
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b01      	cmp	r3, #1
 800189c:	d102      	bne.n	80018a4 <HAL_RCC_OscConfig+0x3a0>
 800189e:	4b93      	ldr	r3, [pc, #588]	; (8001aec <HAL_RCC_OscConfig+0x5e8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	e013      	b.n	80018cc <HAL_RCC_OscConfig+0x3c8>
 80018a4:	2302      	movs	r3, #2
 80018a6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018aa:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80018ae:	fa93 f3a3 	rbit	r3, r3
 80018b2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80018b6:	2302      	movs	r3, #2
 80018b8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80018bc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80018c0:	fa93 f3a3 	rbit	r3, r3
 80018c4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80018c8:	4b88      	ldr	r3, [pc, #544]	; (8001aec <HAL_RCC_OscConfig+0x5e8>)
 80018ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018cc:	2202      	movs	r2, #2
 80018ce:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80018d2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80018d6:	fa92 f2a2 	rbit	r2, r2
 80018da:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80018de:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80018e2:	fab2 f282 	clz	r2, r2
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	f042 0220 	orr.w	r2, r2, #32
 80018ec:	b2d2      	uxtb	r2, r2
 80018ee:	f002 021f 	and.w	r2, r2, #31
 80018f2:	2101      	movs	r1, #1
 80018f4:	fa01 f202 	lsl.w	r2, r1, r2
 80018f8:	4013      	ands	r3, r2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d00a      	beq.n	8001914 <HAL_RCC_OscConfig+0x410>
 80018fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001902:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d002      	beq.n	8001914 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	f000 be2e 	b.w	8002570 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001914:	4b75      	ldr	r3, [pc, #468]	; (8001aec <HAL_RCC_OscConfig+0x5e8>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800191c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001920:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	695b      	ldr	r3, [r3, #20]
 8001928:	21f8      	movs	r1, #248	; 0xf8
 800192a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001932:	fa91 f1a1 	rbit	r1, r1
 8001936:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800193a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800193e:	fab1 f181 	clz	r1, r1
 8001942:	b2c9      	uxtb	r1, r1
 8001944:	408b      	lsls	r3, r1
 8001946:	4969      	ldr	r1, [pc, #420]	; (8001aec <HAL_RCC_OscConfig+0x5e8>)
 8001948:	4313      	orrs	r3, r2
 800194a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800194c:	e0fd      	b.n	8001b4a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800194e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001952:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	2b00      	cmp	r3, #0
 800195c:	f000 8088 	beq.w	8001a70 <HAL_RCC_OscConfig+0x56c>
 8001960:	2301      	movs	r3, #1
 8001962:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001966:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800196a:	fa93 f3a3 	rbit	r3, r3
 800196e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001972:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001976:	fab3 f383 	clz	r3, r3
 800197a:	b2db      	uxtb	r3, r3
 800197c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001980:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	461a      	mov	r2, r3
 8001988:	2301      	movs	r3, #1
 800198a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198c:	f7ff fa40 	bl	8000e10 <HAL_GetTick>
 8001990:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001994:	e00a      	b.n	80019ac <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001996:	f7ff fa3b 	bl	8000e10 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d902      	bls.n	80019ac <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	f000 bde2 	b.w	8002570 <HAL_RCC_OscConfig+0x106c>
 80019ac:	2302      	movs	r3, #2
 80019ae:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80019b6:	fa93 f3a3 	rbit	r3, r3
 80019ba:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80019be:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c2:	fab3 f383 	clz	r3, r3
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	095b      	lsrs	r3, r3, #5
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d102      	bne.n	80019dc <HAL_RCC_OscConfig+0x4d8>
 80019d6:	4b45      	ldr	r3, [pc, #276]	; (8001aec <HAL_RCC_OscConfig+0x5e8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	e013      	b.n	8001a04 <HAL_RCC_OscConfig+0x500>
 80019dc:	2302      	movs	r3, #2
 80019de:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80019e6:	fa93 f3a3 	rbit	r3, r3
 80019ea:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80019ee:	2302      	movs	r3, #2
 80019f0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80019f4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80019f8:	fa93 f3a3 	rbit	r3, r3
 80019fc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001a00:	4b3a      	ldr	r3, [pc, #232]	; (8001aec <HAL_RCC_OscConfig+0x5e8>)
 8001a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a04:	2202      	movs	r2, #2
 8001a06:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001a0a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001a0e:	fa92 f2a2 	rbit	r2, r2
 8001a12:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001a16:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001a1a:	fab2 f282 	clz	r2, r2
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	f042 0220 	orr.w	r2, r2, #32
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	f002 021f 	and.w	r2, r2, #31
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a30:	4013      	ands	r3, r2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d0af      	beq.n	8001996 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a36:	4b2d      	ldr	r3, [pc, #180]	; (8001aec <HAL_RCC_OscConfig+0x5e8>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	21f8      	movs	r1, #248	; 0xf8
 8001a4c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a50:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001a54:	fa91 f1a1 	rbit	r1, r1
 8001a58:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001a5c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001a60:	fab1 f181 	clz	r1, r1
 8001a64:	b2c9      	uxtb	r1, r1
 8001a66:	408b      	lsls	r3, r1
 8001a68:	4920      	ldr	r1, [pc, #128]	; (8001aec <HAL_RCC_OscConfig+0x5e8>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	600b      	str	r3, [r1, #0]
 8001a6e:	e06c      	b.n	8001b4a <HAL_RCC_OscConfig+0x646>
 8001a70:	2301      	movs	r3, #1
 8001a72:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a76:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001a7a:	fa93 f3a3 	rbit	r3, r3
 8001a7e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001a82:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a86:	fab3 f383 	clz	r3, r3
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a90:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	461a      	mov	r2, r3
 8001a98:	2300      	movs	r3, #0
 8001a9a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9c:	f7ff f9b8 	bl	8000e10 <HAL_GetTick>
 8001aa0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aa4:	e00a      	b.n	8001abc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aa6:	f7ff f9b3 	bl	8000e10 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d902      	bls.n	8001abc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	f000 bd5a 	b.w	8002570 <HAL_RCC_OscConfig+0x106c>
 8001abc:	2302      	movs	r3, #2
 8001abe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001ac6:	fa93 f3a3 	rbit	r3, r3
 8001aca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001ace:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ad2:	fab3 f383 	clz	r3, r3
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	095b      	lsrs	r3, r3, #5
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d104      	bne.n	8001af0 <HAL_RCC_OscConfig+0x5ec>
 8001ae6:	4b01      	ldr	r3, [pc, #4]	; (8001aec <HAL_RCC_OscConfig+0x5e8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	e015      	b.n	8001b18 <HAL_RCC_OscConfig+0x614>
 8001aec:	40021000 	.word	0x40021000
 8001af0:	2302      	movs	r3, #2
 8001af2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001afa:	fa93 f3a3 	rbit	r3, r3
 8001afe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001b02:	2302      	movs	r3, #2
 8001b04:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001b08:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001b0c:	fa93 f3a3 	rbit	r3, r3
 8001b10:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001b14:	4bc8      	ldr	r3, [pc, #800]	; (8001e38 <HAL_RCC_OscConfig+0x934>)
 8001b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b18:	2202      	movs	r2, #2
 8001b1a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001b1e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001b22:	fa92 f2a2 	rbit	r2, r2
 8001b26:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001b2a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001b2e:	fab2 f282 	clz	r2, r2
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	f042 0220 	orr.w	r2, r2, #32
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	f002 021f 	and.w	r2, r2, #31
 8001b3e:	2101      	movs	r1, #1
 8001b40:	fa01 f202 	lsl.w	r2, r1, r2
 8001b44:	4013      	ands	r3, r2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1ad      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0308 	and.w	r3, r3, #8
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f000 8110 	beq.w	8001d80 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d079      	beq.n	8001c64 <HAL_RCC_OscConfig+0x760>
 8001b70:	2301      	movs	r3, #1
 8001b72:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b76:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001b7a:	fa93 f3a3 	rbit	r3, r3
 8001b7e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001b82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b86:	fab3 f383 	clz	r3, r3
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4bab      	ldr	r3, [pc, #684]	; (8001e3c <HAL_RCC_OscConfig+0x938>)
 8001b90:	4413      	add	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	461a      	mov	r2, r3
 8001b96:	2301      	movs	r3, #1
 8001b98:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9a:	f7ff f939 	bl	8000e10 <HAL_GetTick>
 8001b9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ba2:	e00a      	b.n	8001bba <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ba4:	f7ff f934 	bl	8000e10 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d902      	bls.n	8001bba <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	f000 bcdb 	b.w	8002570 <HAL_RCC_OscConfig+0x106c>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001bc4:	fa93 f3a3 	rbit	r3, r3
 8001bc8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bdc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	fa93 f2a3 	rbit	r2, r3
 8001be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	fa93 f2a3 	rbit	r2, r3
 8001c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001c12:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c14:	4b88      	ldr	r3, [pc, #544]	; (8001e38 <HAL_RCC_OscConfig+0x934>)
 8001c16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001c20:	2102      	movs	r1, #2
 8001c22:	6019      	str	r1, [r3, #0]
 8001c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c28:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	fa93 f1a3 	rbit	r1, r3
 8001c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c36:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001c3a:	6019      	str	r1, [r3, #0]
  return result;
 8001c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c40:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	fab3 f383 	clz	r3, r3
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	f003 031f 	and.w	r3, r3, #31
 8001c56:	2101      	movs	r1, #1
 8001c58:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d0a0      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x6a0>
 8001c62:	e08d      	b.n	8001d80 <HAL_RCC_OscConfig+0x87c>
 8001c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c68:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c74:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	fa93 f2a3 	rbit	r2, r3
 8001c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c82:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001c86:	601a      	str	r2, [r3, #0]
  return result;
 8001c88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c8c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001c90:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c92:	fab3 f383 	clz	r3, r3
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4b68      	ldr	r3, [pc, #416]	; (8001e3c <HAL_RCC_OscConfig+0x938>)
 8001c9c:	4413      	add	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca6:	f7ff f8b3 	bl	8000e10 <HAL_GetTick>
 8001caa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cae:	e00a      	b.n	8001cc6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cb0:	f7ff f8ae 	bl	8000e10 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d902      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	f000 bc55 	b.w	8002570 <HAL_RCC_OscConfig+0x106c>
 8001cc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cca:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001cce:	2202      	movs	r2, #2
 8001cd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	fa93 f2a3 	rbit	r2, r3
 8001ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cee:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cfa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	fa93 f2a3 	rbit	r2, r3
 8001d04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001d16:	2202      	movs	r2, #2
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	fa93 f2a3 	rbit	r2, r3
 8001d28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001d30:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d32:	4b41      	ldr	r3, [pc, #260]	; (8001e38 <HAL_RCC_OscConfig+0x934>)
 8001d34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d3a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001d3e:	2102      	movs	r1, #2
 8001d40:	6019      	str	r1, [r3, #0]
 8001d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d46:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	fa93 f1a3 	rbit	r1, r3
 8001d50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d54:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001d58:	6019      	str	r1, [r3, #0]
  return result;
 8001d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d5e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	fab3 f383 	clz	r3, r3
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	f003 031f 	and.w	r3, r3, #31
 8001d74:	2101      	movs	r1, #1
 8001d76:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d197      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f000 81a1 	beq.w	80020d8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d96:	2300      	movs	r3, #0
 8001d98:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d9c:	4b26      	ldr	r3, [pc, #152]	; (8001e38 <HAL_RCC_OscConfig+0x934>)
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d116      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001da8:	4b23      	ldr	r3, [pc, #140]	; (8001e38 <HAL_RCC_OscConfig+0x934>)
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	4a22      	ldr	r2, [pc, #136]	; (8001e38 <HAL_RCC_OscConfig+0x934>)
 8001dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db2:	61d3      	str	r3, [r2, #28]
 8001db4:	4b20      	ldr	r3, [pc, #128]	; (8001e38 <HAL_RCC_OscConfig+0x934>)
 8001db6:	69db      	ldr	r3, [r3, #28]
 8001db8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dca:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001dce:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd6:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <HAL_RCC_OscConfig+0x93c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d11a      	bne.n	8001e18 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001de2:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <HAL_RCC_OscConfig+0x93c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a16      	ldr	r2, [pc, #88]	; (8001e40 <HAL_RCC_OscConfig+0x93c>)
 8001de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dee:	f7ff f80f 	bl	8000e10 <HAL_GetTick>
 8001df2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df6:	e009      	b.n	8001e0c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001df8:	f7ff f80a 	bl	8000e10 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b64      	cmp	r3, #100	; 0x64
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e3b1      	b.n	8002570 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <HAL_RCC_OscConfig+0x93c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0ef      	beq.n	8001df8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d10d      	bne.n	8001e44 <HAL_RCC_OscConfig+0x940>
 8001e28:	4b03      	ldr	r3, [pc, #12]	; (8001e38 <HAL_RCC_OscConfig+0x934>)
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	4a02      	ldr	r2, [pc, #8]	; (8001e38 <HAL_RCC_OscConfig+0x934>)
 8001e2e:	f043 0301 	orr.w	r3, r3, #1
 8001e32:	6213      	str	r3, [r2, #32]
 8001e34:	e03c      	b.n	8001eb0 <HAL_RCC_OscConfig+0x9ac>
 8001e36:	bf00      	nop
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	10908120 	.word	0x10908120
 8001e40:	40007000 	.word	0x40007000
 8001e44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d10c      	bne.n	8001e6e <HAL_RCC_OscConfig+0x96a>
 8001e54:	4bc1      	ldr	r3, [pc, #772]	; (800215c <HAL_RCC_OscConfig+0xc58>)
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	4ac0      	ldr	r2, [pc, #768]	; (800215c <HAL_RCC_OscConfig+0xc58>)
 8001e5a:	f023 0301 	bic.w	r3, r3, #1
 8001e5e:	6213      	str	r3, [r2, #32]
 8001e60:	4bbe      	ldr	r3, [pc, #760]	; (800215c <HAL_RCC_OscConfig+0xc58>)
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	4abd      	ldr	r2, [pc, #756]	; (800215c <HAL_RCC_OscConfig+0xc58>)
 8001e66:	f023 0304 	bic.w	r3, r3, #4
 8001e6a:	6213      	str	r3, [r2, #32]
 8001e6c:	e020      	b.n	8001eb0 <HAL_RCC_OscConfig+0x9ac>
 8001e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	2b05      	cmp	r3, #5
 8001e7c:	d10c      	bne.n	8001e98 <HAL_RCC_OscConfig+0x994>
 8001e7e:	4bb7      	ldr	r3, [pc, #732]	; (800215c <HAL_RCC_OscConfig+0xc58>)
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	4ab6      	ldr	r2, [pc, #728]	; (800215c <HAL_RCC_OscConfig+0xc58>)
 8001e84:	f043 0304 	orr.w	r3, r3, #4
 8001e88:	6213      	str	r3, [r2, #32]
 8001e8a:	4bb4      	ldr	r3, [pc, #720]	; (800215c <HAL_RCC_OscConfig+0xc58>)
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	4ab3      	ldr	r2, [pc, #716]	; (800215c <HAL_RCC_OscConfig+0xc58>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	6213      	str	r3, [r2, #32]
 8001e96:	e00b      	b.n	8001eb0 <HAL_RCC_OscConfig+0x9ac>
 8001e98:	4bb0      	ldr	r3, [pc, #704]	; (800215c <HAL_RCC_OscConfig+0xc58>)
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	4aaf      	ldr	r2, [pc, #700]	; (800215c <HAL_RCC_OscConfig+0xc58>)
 8001e9e:	f023 0301 	bic.w	r3, r3, #1
 8001ea2:	6213      	str	r3, [r2, #32]
 8001ea4:	4bad      	ldr	r3, [pc, #692]	; (800215c <HAL_RCC_OscConfig+0xc58>)
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	4aac      	ldr	r2, [pc, #688]	; (800215c <HAL_RCC_OscConfig+0xc58>)
 8001eaa:	f023 0304 	bic.w	r3, r3, #4
 8001eae:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f000 8081 	beq.w	8001fc4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec2:	f7fe ffa5 	bl	8000e10 <HAL_GetTick>
 8001ec6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eca:	e00b      	b.n	8001ee4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ecc:	f7fe ffa0 	bl	8000e10 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e345      	b.n	8002570 <HAL_RCC_OscConfig+0x106c>
 8001ee4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001eec:	2202      	movs	r2, #2
 8001eee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	fa93 f2a3 	rbit	r2, r3
 8001efe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f02:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f0c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001f10:	2202      	movs	r2, #2
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f18:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	fa93 f2a3 	rbit	r2, r3
 8001f22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f26:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001f2a:	601a      	str	r2, [r3, #0]
  return result;
 8001f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f30:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001f34:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f36:	fab3 f383 	clz	r3, r3
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	095b      	lsrs	r3, r3, #5
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	f043 0302 	orr.w	r3, r3, #2
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d102      	bne.n	8001f50 <HAL_RCC_OscConfig+0xa4c>
 8001f4a:	4b84      	ldr	r3, [pc, #528]	; (800215c <HAL_RCC_OscConfig+0xc58>)
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	e013      	b.n	8001f78 <HAL_RCC_OscConfig+0xa74>
 8001f50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f54:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001f58:	2202      	movs	r2, #2
 8001f5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f60:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	fa93 f2a3 	rbit	r2, r3
 8001f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f6e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	4b79      	ldr	r3, [pc, #484]	; (800215c <HAL_RCC_OscConfig+0xc58>)
 8001f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f7c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001f80:	2102      	movs	r1, #2
 8001f82:	6011      	str	r1, [r2, #0]
 8001f84:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f88:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001f8c:	6812      	ldr	r2, [r2, #0]
 8001f8e:	fa92 f1a2 	rbit	r1, r2
 8001f92:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f96:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001f9a:	6011      	str	r1, [r2, #0]
  return result;
 8001f9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fa0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001fa4:	6812      	ldr	r2, [r2, #0]
 8001fa6:	fab2 f282 	clz	r2, r2
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fb0:	b2d2      	uxtb	r2, r2
 8001fb2:	f002 021f 	and.w	r2, r2, #31
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d084      	beq.n	8001ecc <HAL_RCC_OscConfig+0x9c8>
 8001fc2:	e07f      	b.n	80020c4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc4:	f7fe ff24 	bl	8000e10 <HAL_GetTick>
 8001fc8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fcc:	e00b      	b.n	8001fe6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fce:	f7fe ff1f 	bl	8000e10 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e2c4      	b.n	8002570 <HAL_RCC_OscConfig+0x106c>
 8001fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fea:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001fee:	2202      	movs	r2, #2
 8001ff0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	fa93 f2a3 	rbit	r2, r3
 8002000:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002004:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800200e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002012:	2202      	movs	r2, #2
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800201a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	fa93 f2a3 	rbit	r2, r3
 8002024:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002028:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800202c:	601a      	str	r2, [r3, #0]
  return result;
 800202e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002032:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002036:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002038:	fab3 f383 	clz	r3, r3
 800203c:	b2db      	uxtb	r3, r3
 800203e:	095b      	lsrs	r3, r3, #5
 8002040:	b2db      	uxtb	r3, r3
 8002042:	f043 0302 	orr.w	r3, r3, #2
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d102      	bne.n	8002052 <HAL_RCC_OscConfig+0xb4e>
 800204c:	4b43      	ldr	r3, [pc, #268]	; (800215c <HAL_RCC_OscConfig+0xc58>)
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	e013      	b.n	800207a <HAL_RCC_OscConfig+0xb76>
 8002052:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002056:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800205a:	2202      	movs	r2, #2
 800205c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002062:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	fa93 f2a3 	rbit	r2, r3
 800206c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002070:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	4b39      	ldr	r3, [pc, #228]	; (800215c <HAL_RCC_OscConfig+0xc58>)
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800207e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002082:	2102      	movs	r1, #2
 8002084:	6011      	str	r1, [r2, #0]
 8002086:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800208a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800208e:	6812      	ldr	r2, [r2, #0]
 8002090:	fa92 f1a2 	rbit	r1, r2
 8002094:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002098:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800209c:	6011      	str	r1, [r2, #0]
  return result;
 800209e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020a2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80020a6:	6812      	ldr	r2, [r2, #0]
 80020a8:	fab2 f282 	clz	r2, r2
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	f002 021f 	and.w	r2, r2, #31
 80020b8:	2101      	movs	r1, #1
 80020ba:	fa01 f202 	lsl.w	r2, r1, r2
 80020be:	4013      	ands	r3, r2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d184      	bne.n	8001fce <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020c4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d105      	bne.n	80020d8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020cc:	4b23      	ldr	r3, [pc, #140]	; (800215c <HAL_RCC_OscConfig+0xc58>)
 80020ce:	69db      	ldr	r3, [r3, #28]
 80020d0:	4a22      	ldr	r2, [pc, #136]	; (800215c <HAL_RCC_OscConfig+0xc58>)
 80020d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020d6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	69db      	ldr	r3, [r3, #28]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 8242 	beq.w	800256e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020ea:	4b1c      	ldr	r3, [pc, #112]	; (800215c <HAL_RCC_OscConfig+0xc58>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f003 030c 	and.w	r3, r3, #12
 80020f2:	2b08      	cmp	r3, #8
 80020f4:	f000 8213 	beq.w	800251e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	2b02      	cmp	r3, #2
 8002106:	f040 8162 	bne.w	80023ce <HAL_RCC_OscConfig+0xeca>
 800210a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800210e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002112:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002116:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002118:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800211c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	fa93 f2a3 	rbit	r2, r3
 8002126:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800212a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800212e:	601a      	str	r2, [r3, #0]
  return result;
 8002130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002134:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002138:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800213a:	fab3 f383 	clz	r3, r3
 800213e:	b2db      	uxtb	r3, r3
 8002140:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002144:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	461a      	mov	r2, r3
 800214c:	2300      	movs	r3, #0
 800214e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002150:	f7fe fe5e 	bl	8000e10 <HAL_GetTick>
 8002154:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002158:	e00c      	b.n	8002174 <HAL_RCC_OscConfig+0xc70>
 800215a:	bf00      	nop
 800215c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002160:	f7fe fe56 	bl	8000e10 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e1fd      	b.n	8002570 <HAL_RCC_OscConfig+0x106c>
 8002174:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002178:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800217c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002180:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002182:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002186:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	fa93 f2a3 	rbit	r2, r3
 8002190:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002194:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002198:	601a      	str	r2, [r3, #0]
  return result;
 800219a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800219e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80021a2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021a4:	fab3 f383 	clz	r3, r3
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	095b      	lsrs	r3, r3, #5
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	f043 0301 	orr.w	r3, r3, #1
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d102      	bne.n	80021be <HAL_RCC_OscConfig+0xcba>
 80021b8:	4bb0      	ldr	r3, [pc, #704]	; (800247c <HAL_RCC_OscConfig+0xf78>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	e027      	b.n	800220e <HAL_RCC_OscConfig+0xd0a>
 80021be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80021c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	fa93 f2a3 	rbit	r2, r3
 80021da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021de:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80021ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	fa93 f2a3 	rbit	r2, r3
 8002200:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002204:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	4b9c      	ldr	r3, [pc, #624]	; (800247c <HAL_RCC_OscConfig+0xf78>)
 800220c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002212:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002216:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800221a:	6011      	str	r1, [r2, #0]
 800221c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002220:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002224:	6812      	ldr	r2, [r2, #0]
 8002226:	fa92 f1a2 	rbit	r1, r2
 800222a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800222e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002232:	6011      	str	r1, [r2, #0]
  return result;
 8002234:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002238:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800223c:	6812      	ldr	r2, [r2, #0]
 800223e:	fab2 f282 	clz	r2, r2
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	f042 0220 	orr.w	r2, r2, #32
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	f002 021f 	and.w	r2, r2, #31
 800224e:	2101      	movs	r1, #1
 8002250:	fa01 f202 	lsl.w	r2, r1, r2
 8002254:	4013      	ands	r3, r2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d182      	bne.n	8002160 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800225a:	4b88      	ldr	r3, [pc, #544]	; (800247c <HAL_RCC_OscConfig+0xf78>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002262:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002266:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800226e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002272:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	430b      	orrs	r3, r1
 800227c:	497f      	ldr	r1, [pc, #508]	; (800247c <HAL_RCC_OscConfig+0xf78>)
 800227e:	4313      	orrs	r3, r2
 8002280:	604b      	str	r3, [r1, #4]
 8002282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002286:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800228a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800228e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002294:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	fa93 f2a3 	rbit	r2, r3
 800229e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80022a6:	601a      	str	r2, [r3, #0]
  return result;
 80022a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ac:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80022b0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022b2:	fab3 f383 	clz	r3, r3
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	461a      	mov	r2, r3
 80022c4:	2301      	movs	r3, #1
 80022c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c8:	f7fe fda2 	bl	8000e10 <HAL_GetTick>
 80022cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022d0:	e009      	b.n	80022e6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022d2:	f7fe fd9d 	bl	8000e10 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e144      	b.n	8002570 <HAL_RCC_OscConfig+0x106c>
 80022e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ea:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80022ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	fa93 f2a3 	rbit	r2, r3
 8002302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002306:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800230a:	601a      	str	r2, [r3, #0]
  return result;
 800230c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002310:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002314:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002316:	fab3 f383 	clz	r3, r3
 800231a:	b2db      	uxtb	r3, r3
 800231c:	095b      	lsrs	r3, r3, #5
 800231e:	b2db      	uxtb	r3, r3
 8002320:	f043 0301 	orr.w	r3, r3, #1
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b01      	cmp	r3, #1
 8002328:	d102      	bne.n	8002330 <HAL_RCC_OscConfig+0xe2c>
 800232a:	4b54      	ldr	r3, [pc, #336]	; (800247c <HAL_RCC_OscConfig+0xf78>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	e027      	b.n	8002380 <HAL_RCC_OscConfig+0xe7c>
 8002330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002334:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002338:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800233c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002342:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	fa93 f2a3 	rbit	r2, r3
 800234c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002350:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800235a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800235e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002368:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	fa93 f2a3 	rbit	r2, r3
 8002372:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002376:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	4b3f      	ldr	r3, [pc, #252]	; (800247c <HAL_RCC_OscConfig+0xf78>)
 800237e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002380:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002384:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002388:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800238c:	6011      	str	r1, [r2, #0]
 800238e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002392:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002396:	6812      	ldr	r2, [r2, #0]
 8002398:	fa92 f1a2 	rbit	r1, r2
 800239c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023a0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80023a4:	6011      	str	r1, [r2, #0]
  return result;
 80023a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023aa:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80023ae:	6812      	ldr	r2, [r2, #0]
 80023b0:	fab2 f282 	clz	r2, r2
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	f042 0220 	orr.w	r2, r2, #32
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	f002 021f 	and.w	r2, r2, #31
 80023c0:	2101      	movs	r1, #1
 80023c2:	fa01 f202 	lsl.w	r2, r1, r2
 80023c6:	4013      	ands	r3, r2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d082      	beq.n	80022d2 <HAL_RCC_OscConfig+0xdce>
 80023cc:	e0cf      	b.n	800256e <HAL_RCC_OscConfig+0x106a>
 80023ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80023d6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	fa93 f2a3 	rbit	r2, r3
 80023ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ee:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80023f2:	601a      	str	r2, [r3, #0]
  return result;
 80023f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80023fc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023fe:	fab3 f383 	clz	r3, r3
 8002402:	b2db      	uxtb	r3, r3
 8002404:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002408:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	461a      	mov	r2, r3
 8002410:	2300      	movs	r3, #0
 8002412:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002414:	f7fe fcfc 	bl	8000e10 <HAL_GetTick>
 8002418:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800241c:	e009      	b.n	8002432 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800241e:	f7fe fcf7 	bl	8000e10 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e09e      	b.n	8002570 <HAL_RCC_OscConfig+0x106c>
 8002432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002436:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800243a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800243e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002440:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002444:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	fa93 f2a3 	rbit	r2, r3
 800244e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002452:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002456:	601a      	str	r2, [r3, #0]
  return result;
 8002458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800245c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002460:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002462:	fab3 f383 	clz	r3, r3
 8002466:	b2db      	uxtb	r3, r3
 8002468:	095b      	lsrs	r3, r3, #5
 800246a:	b2db      	uxtb	r3, r3
 800246c:	f043 0301 	orr.w	r3, r3, #1
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b01      	cmp	r3, #1
 8002474:	d104      	bne.n	8002480 <HAL_RCC_OscConfig+0xf7c>
 8002476:	4b01      	ldr	r3, [pc, #4]	; (800247c <HAL_RCC_OscConfig+0xf78>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	e029      	b.n	80024d0 <HAL_RCC_OscConfig+0xfcc>
 800247c:	40021000 	.word	0x40021000
 8002480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002484:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002488:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800248c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002492:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	fa93 f2a3 	rbit	r2, r3
 800249c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024aa:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80024ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	fa93 f2a3 	rbit	r2, r3
 80024c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	4b2b      	ldr	r3, [pc, #172]	; (800257c <HAL_RCC_OscConfig+0x1078>)
 80024ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024d4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80024d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80024dc:	6011      	str	r1, [r2, #0]
 80024de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024e2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80024e6:	6812      	ldr	r2, [r2, #0]
 80024e8:	fa92 f1a2 	rbit	r1, r2
 80024ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024f0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80024f4:	6011      	str	r1, [r2, #0]
  return result;
 80024f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024fa:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80024fe:	6812      	ldr	r2, [r2, #0]
 8002500:	fab2 f282 	clz	r2, r2
 8002504:	b2d2      	uxtb	r2, r2
 8002506:	f042 0220 	orr.w	r2, r2, #32
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	f002 021f 	and.w	r2, r2, #31
 8002510:	2101      	movs	r1, #1
 8002512:	fa01 f202 	lsl.w	r2, r1, r2
 8002516:	4013      	ands	r3, r2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d180      	bne.n	800241e <HAL_RCC_OscConfig+0xf1a>
 800251c:	e027      	b.n	800256e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800251e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002522:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d101      	bne.n	8002532 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e01e      	b.n	8002570 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002532:	4b12      	ldr	r3, [pc, #72]	; (800257c <HAL_RCC_OscConfig+0x1078>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800253a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800253e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002546:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	429a      	cmp	r2, r3
 8002550:	d10b      	bne.n	800256a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002552:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002556:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800255a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002566:	429a      	cmp	r2, r3
 8002568:	d001      	beq.n	800256e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e000      	b.n	8002570 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40021000 	.word	0x40021000

08002580 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b09e      	sub	sp, #120	; 0x78
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800258a:	2300      	movs	r3, #0
 800258c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e162      	b.n	800285e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002598:	4b90      	ldr	r3, [pc, #576]	; (80027dc <HAL_RCC_ClockConfig+0x25c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d910      	bls.n	80025c8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a6:	4b8d      	ldr	r3, [pc, #564]	; (80027dc <HAL_RCC_ClockConfig+0x25c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f023 0207 	bic.w	r2, r3, #7
 80025ae:	498b      	ldr	r1, [pc, #556]	; (80027dc <HAL_RCC_ClockConfig+0x25c>)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b6:	4b89      	ldr	r3, [pc, #548]	; (80027dc <HAL_RCC_ClockConfig+0x25c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d001      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e14a      	b.n	800285e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d008      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d4:	4b82      	ldr	r3, [pc, #520]	; (80027e0 <HAL_RCC_ClockConfig+0x260>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	497f      	ldr	r1, [pc, #508]	; (80027e0 <HAL_RCC_ClockConfig+0x260>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 80dc 	beq.w	80027ac <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d13c      	bne.n	8002676 <HAL_RCC_ClockConfig+0xf6>
 80025fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002600:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002602:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002604:	fa93 f3a3 	rbit	r3, r3
 8002608:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800260a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260c:	fab3 f383 	clz	r3, r3
 8002610:	b2db      	uxtb	r3, r3
 8002612:	095b      	lsrs	r3, r3, #5
 8002614:	b2db      	uxtb	r3, r3
 8002616:	f043 0301 	orr.w	r3, r3, #1
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b01      	cmp	r3, #1
 800261e:	d102      	bne.n	8002626 <HAL_RCC_ClockConfig+0xa6>
 8002620:	4b6f      	ldr	r3, [pc, #444]	; (80027e0 <HAL_RCC_ClockConfig+0x260>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	e00f      	b.n	8002646 <HAL_RCC_ClockConfig+0xc6>
 8002626:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800262a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800262e:	fa93 f3a3 	rbit	r3, r3
 8002632:	667b      	str	r3, [r7, #100]	; 0x64
 8002634:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002638:	663b      	str	r3, [r7, #96]	; 0x60
 800263a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800263c:	fa93 f3a3 	rbit	r3, r3
 8002640:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002642:	4b67      	ldr	r3, [pc, #412]	; (80027e0 <HAL_RCC_ClockConfig+0x260>)
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800264a:	65ba      	str	r2, [r7, #88]	; 0x58
 800264c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800264e:	fa92 f2a2 	rbit	r2, r2
 8002652:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002654:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002656:	fab2 f282 	clz	r2, r2
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	f042 0220 	orr.w	r2, r2, #32
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	f002 021f 	and.w	r2, r2, #31
 8002666:	2101      	movs	r1, #1
 8002668:	fa01 f202 	lsl.w	r2, r1, r2
 800266c:	4013      	ands	r3, r2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d17b      	bne.n	800276a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e0f3      	b.n	800285e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2b02      	cmp	r3, #2
 800267c:	d13c      	bne.n	80026f8 <HAL_RCC_ClockConfig+0x178>
 800267e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002682:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002684:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002686:	fa93 f3a3 	rbit	r3, r3
 800268a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800268c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800268e:	fab3 f383 	clz	r3, r3
 8002692:	b2db      	uxtb	r3, r3
 8002694:	095b      	lsrs	r3, r3, #5
 8002696:	b2db      	uxtb	r3, r3
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d102      	bne.n	80026a8 <HAL_RCC_ClockConfig+0x128>
 80026a2:	4b4f      	ldr	r3, [pc, #316]	; (80027e0 <HAL_RCC_ClockConfig+0x260>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	e00f      	b.n	80026c8 <HAL_RCC_ClockConfig+0x148>
 80026a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026ac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026b0:	fa93 f3a3 	rbit	r3, r3
 80026b4:	647b      	str	r3, [r7, #68]	; 0x44
 80026b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026ba:	643b      	str	r3, [r7, #64]	; 0x40
 80026bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026be:	fa93 f3a3 	rbit	r3, r3
 80026c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026c4:	4b46      	ldr	r3, [pc, #280]	; (80027e0 <HAL_RCC_ClockConfig+0x260>)
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026cc:	63ba      	str	r2, [r7, #56]	; 0x38
 80026ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026d0:	fa92 f2a2 	rbit	r2, r2
 80026d4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80026d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026d8:	fab2 f282 	clz	r2, r2
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	f042 0220 	orr.w	r2, r2, #32
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	f002 021f 	and.w	r2, r2, #31
 80026e8:	2101      	movs	r1, #1
 80026ea:	fa01 f202 	lsl.w	r2, r1, r2
 80026ee:	4013      	ands	r3, r2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d13a      	bne.n	800276a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e0b2      	b.n	800285e <HAL_RCC_ClockConfig+0x2de>
 80026f8:	2302      	movs	r3, #2
 80026fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026fe:	fa93 f3a3 	rbit	r3, r3
 8002702:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002706:	fab3 f383 	clz	r3, r3
 800270a:	b2db      	uxtb	r3, r3
 800270c:	095b      	lsrs	r3, r3, #5
 800270e:	b2db      	uxtb	r3, r3
 8002710:	f043 0301 	orr.w	r3, r3, #1
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b01      	cmp	r3, #1
 8002718:	d102      	bne.n	8002720 <HAL_RCC_ClockConfig+0x1a0>
 800271a:	4b31      	ldr	r3, [pc, #196]	; (80027e0 <HAL_RCC_ClockConfig+0x260>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	e00d      	b.n	800273c <HAL_RCC_ClockConfig+0x1bc>
 8002720:	2302      	movs	r3, #2
 8002722:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002726:	fa93 f3a3 	rbit	r3, r3
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
 800272c:	2302      	movs	r3, #2
 800272e:	623b      	str	r3, [r7, #32]
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	fa93 f3a3 	rbit	r3, r3
 8002736:	61fb      	str	r3, [r7, #28]
 8002738:	4b29      	ldr	r3, [pc, #164]	; (80027e0 <HAL_RCC_ClockConfig+0x260>)
 800273a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273c:	2202      	movs	r2, #2
 800273e:	61ba      	str	r2, [r7, #24]
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	fa92 f2a2 	rbit	r2, r2
 8002746:	617a      	str	r2, [r7, #20]
  return result;
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	fab2 f282 	clz	r2, r2
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	f042 0220 	orr.w	r2, r2, #32
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	f002 021f 	and.w	r2, r2, #31
 800275a:	2101      	movs	r1, #1
 800275c:	fa01 f202 	lsl.w	r2, r1, r2
 8002760:	4013      	ands	r3, r2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e079      	b.n	800285e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800276a:	4b1d      	ldr	r3, [pc, #116]	; (80027e0 <HAL_RCC_ClockConfig+0x260>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f023 0203 	bic.w	r2, r3, #3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	491a      	ldr	r1, [pc, #104]	; (80027e0 <HAL_RCC_ClockConfig+0x260>)
 8002778:	4313      	orrs	r3, r2
 800277a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800277c:	f7fe fb48 	bl	8000e10 <HAL_GetTick>
 8002780:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002782:	e00a      	b.n	800279a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002784:	f7fe fb44 	bl	8000e10 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002792:	4293      	cmp	r3, r2
 8002794:	d901      	bls.n	800279a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e061      	b.n	800285e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279a:	4b11      	ldr	r3, [pc, #68]	; (80027e0 <HAL_RCC_ClockConfig+0x260>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f003 020c 	and.w	r2, r3, #12
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d1eb      	bne.n	8002784 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027ac:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <HAL_RCC_ClockConfig+0x25c>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d214      	bcs.n	80027e4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ba:	4b08      	ldr	r3, [pc, #32]	; (80027dc <HAL_RCC_ClockConfig+0x25c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f023 0207 	bic.w	r2, r3, #7
 80027c2:	4906      	ldr	r1, [pc, #24]	; (80027dc <HAL_RCC_ClockConfig+0x25c>)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ca:	4b04      	ldr	r3, [pc, #16]	; (80027dc <HAL_RCC_ClockConfig+0x25c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0307 	and.w	r3, r3, #7
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d005      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e040      	b.n	800285e <HAL_RCC_ClockConfig+0x2de>
 80027dc:	40022000 	.word	0x40022000
 80027e0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d008      	beq.n	8002802 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027f0:	4b1d      	ldr	r3, [pc, #116]	; (8002868 <HAL_RCC_ClockConfig+0x2e8>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	491a      	ldr	r1, [pc, #104]	; (8002868 <HAL_RCC_ClockConfig+0x2e8>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0308 	and.w	r3, r3, #8
 800280a:	2b00      	cmp	r3, #0
 800280c:	d009      	beq.n	8002822 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800280e:	4b16      	ldr	r3, [pc, #88]	; (8002868 <HAL_RCC_ClockConfig+0x2e8>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	4912      	ldr	r1, [pc, #72]	; (8002868 <HAL_RCC_ClockConfig+0x2e8>)
 800281e:	4313      	orrs	r3, r2
 8002820:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002822:	f000 f829 	bl	8002878 <HAL_RCC_GetSysClockFreq>
 8002826:	4601      	mov	r1, r0
 8002828:	4b0f      	ldr	r3, [pc, #60]	; (8002868 <HAL_RCC_ClockConfig+0x2e8>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002830:	22f0      	movs	r2, #240	; 0xf0
 8002832:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	fa92 f2a2 	rbit	r2, r2
 800283a:	60fa      	str	r2, [r7, #12]
  return result;
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	fab2 f282 	clz	r2, r2
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	40d3      	lsrs	r3, r2
 8002846:	4a09      	ldr	r2, [pc, #36]	; (800286c <HAL_RCC_ClockConfig+0x2ec>)
 8002848:	5cd3      	ldrb	r3, [r2, r3]
 800284a:	fa21 f303 	lsr.w	r3, r1, r3
 800284e:	4a08      	ldr	r2, [pc, #32]	; (8002870 <HAL_RCC_ClockConfig+0x2f0>)
 8002850:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002852:	4b08      	ldr	r3, [pc, #32]	; (8002874 <HAL_RCC_ClockConfig+0x2f4>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7fe fa96 	bl	8000d88 <HAL_InitTick>
  
  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3778      	adds	r7, #120	; 0x78
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40021000 	.word	0x40021000
 800286c:	0800dd20 	.word	0x0800dd20
 8002870:	200006dc 	.word	0x200006dc
 8002874:	20000000 	.word	0x20000000

08002878 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002878:	b480      	push	{r7}
 800287a:	b08b      	sub	sp, #44	; 0x2c
 800287c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800287e:	2300      	movs	r3, #0
 8002880:	61fb      	str	r3, [r7, #28]
 8002882:	2300      	movs	r3, #0
 8002884:	61bb      	str	r3, [r7, #24]
 8002886:	2300      	movs	r3, #0
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800288e:	2300      	movs	r3, #0
 8002890:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002892:	4b29      	ldr	r3, [pc, #164]	; (8002938 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	f003 030c 	and.w	r3, r3, #12
 800289e:	2b04      	cmp	r3, #4
 80028a0:	d002      	beq.n	80028a8 <HAL_RCC_GetSysClockFreq+0x30>
 80028a2:	2b08      	cmp	r3, #8
 80028a4:	d003      	beq.n	80028ae <HAL_RCC_GetSysClockFreq+0x36>
 80028a6:	e03c      	b.n	8002922 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028a8:	4b24      	ldr	r3, [pc, #144]	; (800293c <HAL_RCC_GetSysClockFreq+0xc4>)
 80028aa:	623b      	str	r3, [r7, #32]
      break;
 80028ac:	e03c      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80028b4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80028b8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	fa92 f2a2 	rbit	r2, r2
 80028c0:	607a      	str	r2, [r7, #4]
  return result;
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	fab2 f282 	clz	r2, r2
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	40d3      	lsrs	r3, r2
 80028cc:	4a1c      	ldr	r2, [pc, #112]	; (8002940 <HAL_RCC_GetSysClockFreq+0xc8>)
 80028ce:	5cd3      	ldrb	r3, [r2, r3]
 80028d0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80028d2:	4b19      	ldr	r3, [pc, #100]	; (8002938 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	220f      	movs	r2, #15
 80028dc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	fa92 f2a2 	rbit	r2, r2
 80028e4:	60fa      	str	r2, [r7, #12]
  return result;
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	fab2 f282 	clz	r2, r2
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	40d3      	lsrs	r3, r2
 80028f0:	4a14      	ldr	r2, [pc, #80]	; (8002944 <HAL_RCC_GetSysClockFreq+0xcc>)
 80028f2:	5cd3      	ldrb	r3, [r2, r3]
 80028f4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d008      	beq.n	8002912 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002900:	4a0e      	ldr	r2, [pc, #56]	; (800293c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	fbb2 f2f3 	udiv	r2, r2, r3
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	fb02 f303 	mul.w	r3, r2, r3
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
 8002910:	e004      	b.n	800291c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	4a0c      	ldr	r2, [pc, #48]	; (8002948 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002916:	fb02 f303 	mul.w	r3, r2, r3
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	623b      	str	r3, [r7, #32]
      break;
 8002920:	e002      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002922:	4b06      	ldr	r3, [pc, #24]	; (800293c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002924:	623b      	str	r3, [r7, #32]
      break;
 8002926:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002928:	6a3b      	ldr	r3, [r7, #32]
}
 800292a:	4618      	mov	r0, r3
 800292c:	372c      	adds	r7, #44	; 0x2c
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	40021000 	.word	0x40021000
 800293c:	007a1200 	.word	0x007a1200
 8002940:	0800d680 	.word	0x0800d680
 8002944:	0800d690 	.word	0x0800d690
 8002948:	003d0900 	.word	0x003d0900

0800294c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002950:	4b03      	ldr	r3, [pc, #12]	; (8002960 <HAL_RCC_GetHCLKFreq+0x14>)
 8002952:	681b      	ldr	r3, [r3, #0]
}
 8002954:	4618      	mov	r0, r3
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	200006dc 	.word	0x200006dc

08002964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800296a:	f7ff ffef 	bl	800294c <HAL_RCC_GetHCLKFreq>
 800296e:	4601      	mov	r1, r0
 8002970:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002978:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800297c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	fa92 f2a2 	rbit	r2, r2
 8002984:	603a      	str	r2, [r7, #0]
  return result;
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	fab2 f282 	clz	r2, r2
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	40d3      	lsrs	r3, r2
 8002990:	4a04      	ldr	r2, [pc, #16]	; (80029a4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002992:	5cd3      	ldrb	r3, [r2, r3]
 8002994:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002998:	4618      	mov	r0, r3
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40021000 	.word	0x40021000
 80029a4:	0800dd30 	.word	0x0800dd30

080029a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80029ae:	f7ff ffcd 	bl	800294c <HAL_RCC_GetHCLKFreq>
 80029b2:	4601      	mov	r1, r0
 80029b4:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80029bc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80029c0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	fa92 f2a2 	rbit	r2, r2
 80029c8:	603a      	str	r2, [r7, #0]
  return result;
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	fab2 f282 	clz	r2, r2
 80029d0:	b2d2      	uxtb	r2, r2
 80029d2:	40d3      	lsrs	r3, r2
 80029d4:	4a04      	ldr	r2, [pc, #16]	; (80029e8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80029d6:	5cd3      	ldrb	r3, [r2, r3]
 80029d8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80029dc:	4618      	mov	r0, r3
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40021000 	.word	0x40021000
 80029e8:	0800dd30 	.word	0x0800dd30

080029ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e040      	b.n	8002a80 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d106      	bne.n	8002a14 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f001 fc80 	bl	8004314 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2224      	movs	r2, #36	; 0x24
 8002a18:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 0201 	bic.w	r2, r2, #1
 8002a28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f980 	bl	8002d30 <UART_SetConfig>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d101      	bne.n	8002a3a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e022      	b.n	8002a80 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d002      	beq.n	8002a48 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 faaa 	bl	8002f9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689a      	ldr	r2, [r3, #8]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0201 	orr.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 fb31 	bl	80030e0 <UART_CheckIdleState>
 8002a7e:	4603      	mov	r3, r0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b08a      	sub	sp, #40	; 0x28
 8002a8c:	af02      	add	r7, sp, #8
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	603b      	str	r3, [r7, #0]
 8002a94:	4613      	mov	r3, r2
 8002a96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a9c:	2b20      	cmp	r3, #32
 8002a9e:	d178      	bne.n	8002b92 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d002      	beq.n	8002aac <HAL_UART_Transmit+0x24>
 8002aa6:	88fb      	ldrh	r3, [r7, #6]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d101      	bne.n	8002ab0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e071      	b.n	8002b94 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2221      	movs	r2, #33	; 0x21
 8002abc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002abe:	f7fe f9a7 	bl	8000e10 <HAL_GetTick>
 8002ac2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	88fa      	ldrh	r2, [r7, #6]
 8002ac8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	88fa      	ldrh	r2, [r7, #6]
 8002ad0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002adc:	d108      	bne.n	8002af0 <HAL_UART_Transmit+0x68>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d104      	bne.n	8002af0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	61bb      	str	r3, [r7, #24]
 8002aee:	e003      	b.n	8002af8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002af4:	2300      	movs	r3, #0
 8002af6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002af8:	e030      	b.n	8002b5c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2200      	movs	r2, #0
 8002b02:	2180      	movs	r1, #128	; 0x80
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f000 fb93 	bl	8003230 <UART_WaitOnFlagUntilTimeout>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d004      	beq.n	8002b1a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2220      	movs	r2, #32
 8002b14:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e03c      	b.n	8002b94 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10b      	bne.n	8002b38 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	881a      	ldrh	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b2c:	b292      	uxth	r2, r2
 8002b2e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	3302      	adds	r3, #2
 8002b34:	61bb      	str	r3, [r7, #24]
 8002b36:	e008      	b.n	8002b4a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	781a      	ldrb	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	b292      	uxth	r2, r2
 8002b42:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	3301      	adds	r3, #1
 8002b48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	3b01      	subs	r3, #1
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1c8      	bne.n	8002afa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	2140      	movs	r1, #64	; 0x40
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 fb5c 	bl	8003230 <UART_WaitOnFlagUntilTimeout>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d004      	beq.n	8002b88 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2220      	movs	r2, #32
 8002b82:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e005      	b.n	8002b94 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	e000      	b.n	8002b94 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002b92:	2302      	movs	r3, #2
  }
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3720      	adds	r7, #32
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b08a      	sub	sp, #40	; 0x28
 8002ba0:	af02      	add	r7, sp, #8
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	603b      	str	r3, [r7, #0]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bb2:	2b20      	cmp	r3, #32
 8002bb4:	f040 80b6 	bne.w	8002d24 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d002      	beq.n	8002bc4 <HAL_UART_Receive+0x28>
 8002bbe:	88fb      	ldrh	r3, [r7, #6]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d101      	bne.n	8002bc8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e0ae      	b.n	8002d26 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2222      	movs	r2, #34	; 0x22
 8002bd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bde:	f7fe f917 	bl	8000e10 <HAL_GetTick>
 8002be2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	88fa      	ldrh	r2, [r7, #6]
 8002be8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	88fa      	ldrh	r2, [r7, #6]
 8002bf0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bfc:	d10e      	bne.n	8002c1c <HAL_UART_Receive+0x80>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d105      	bne.n	8002c12 <HAL_UART_Receive+0x76>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002c0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c10:	e02d      	b.n	8002c6e <HAL_UART_Receive+0xd2>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	22ff      	movs	r2, #255	; 0xff
 8002c16:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c1a:	e028      	b.n	8002c6e <HAL_UART_Receive+0xd2>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10d      	bne.n	8002c40 <HAL_UART_Receive+0xa4>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d104      	bne.n	8002c36 <HAL_UART_Receive+0x9a>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	22ff      	movs	r2, #255	; 0xff
 8002c30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c34:	e01b      	b.n	8002c6e <HAL_UART_Receive+0xd2>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	227f      	movs	r2, #127	; 0x7f
 8002c3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c3e:	e016      	b.n	8002c6e <HAL_UART_Receive+0xd2>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c48:	d10d      	bne.n	8002c66 <HAL_UART_Receive+0xca>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d104      	bne.n	8002c5c <HAL_UART_Receive+0xc0>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	227f      	movs	r2, #127	; 0x7f
 8002c56:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c5a:	e008      	b.n	8002c6e <HAL_UART_Receive+0xd2>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	223f      	movs	r2, #63	; 0x3f
 8002c60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c64:	e003      	b.n	8002c6e <HAL_UART_Receive+0xd2>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002c74:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c7e:	d108      	bne.n	8002c92 <HAL_UART_Receive+0xf6>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d104      	bne.n	8002c92 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	61bb      	str	r3, [r7, #24]
 8002c90:	e003      	b.n	8002c9a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002c9a:	e037      	b.n	8002d0c <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	2120      	movs	r1, #32
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 fac2 	bl	8003230 <UART_WaitOnFlagUntilTimeout>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d005      	beq.n	8002cbe <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e033      	b.n	8002d26 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10c      	bne.n	8002cde <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	8a7b      	ldrh	r3, [r7, #18]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	3302      	adds	r3, #2
 8002cda:	61bb      	str	r3, [r7, #24]
 8002cdc:	e00d      	b.n	8002cfa <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	b2da      	uxtb	r2, r3
 8002ce8:	8a7b      	ldrh	r3, [r7, #18]
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	4013      	ands	r3, r2
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	3b01      	subs	r3, #1
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1c1      	bne.n	8002c9c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8002d20:	2300      	movs	r3, #0
 8002d22:	e000      	b.n	8002d26 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8002d24:	2302      	movs	r3, #2
  }
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3720      	adds	r7, #32
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b088      	sub	sp, #32
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	431a      	orrs	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	4b8a      	ldr	r3, [pc, #552]	; (8002f84 <UART_SetConfig+0x254>)
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	6812      	ldr	r2, [r2, #0]
 8002d62:	6979      	ldr	r1, [r7, #20]
 8002d64:	430b      	orrs	r3, r1
 8002d66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68da      	ldr	r2, [r3, #12]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a78      	ldr	r2, [pc, #480]	; (8002f88 <UART_SetConfig+0x258>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d120      	bne.n	8002dee <UART_SetConfig+0xbe>
 8002dac:	4b77      	ldr	r3, [pc, #476]	; (8002f8c <UART_SetConfig+0x25c>)
 8002dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db0:	f003 0303 	and.w	r3, r3, #3
 8002db4:	2b03      	cmp	r3, #3
 8002db6:	d817      	bhi.n	8002de8 <UART_SetConfig+0xb8>
 8002db8:	a201      	add	r2, pc, #4	; (adr r2, 8002dc0 <UART_SetConfig+0x90>)
 8002dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dbe:	bf00      	nop
 8002dc0:	08002dd1 	.word	0x08002dd1
 8002dc4:	08002ddd 	.word	0x08002ddd
 8002dc8:	08002de3 	.word	0x08002de3
 8002dcc:	08002dd7 	.word	0x08002dd7
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	77fb      	strb	r3, [r7, #31]
 8002dd4:	e01d      	b.n	8002e12 <UART_SetConfig+0xe2>
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	77fb      	strb	r3, [r7, #31]
 8002dda:	e01a      	b.n	8002e12 <UART_SetConfig+0xe2>
 8002ddc:	2304      	movs	r3, #4
 8002dde:	77fb      	strb	r3, [r7, #31]
 8002de0:	e017      	b.n	8002e12 <UART_SetConfig+0xe2>
 8002de2:	2308      	movs	r3, #8
 8002de4:	77fb      	strb	r3, [r7, #31]
 8002de6:	e014      	b.n	8002e12 <UART_SetConfig+0xe2>
 8002de8:	2310      	movs	r3, #16
 8002dea:	77fb      	strb	r3, [r7, #31]
 8002dec:	e011      	b.n	8002e12 <UART_SetConfig+0xe2>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a67      	ldr	r2, [pc, #412]	; (8002f90 <UART_SetConfig+0x260>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d102      	bne.n	8002dfe <UART_SetConfig+0xce>
 8002df8:	2300      	movs	r3, #0
 8002dfa:	77fb      	strb	r3, [r7, #31]
 8002dfc:	e009      	b.n	8002e12 <UART_SetConfig+0xe2>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a64      	ldr	r2, [pc, #400]	; (8002f94 <UART_SetConfig+0x264>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d102      	bne.n	8002e0e <UART_SetConfig+0xde>
 8002e08:	2300      	movs	r3, #0
 8002e0a:	77fb      	strb	r3, [r7, #31]
 8002e0c:	e001      	b.n	8002e12 <UART_SetConfig+0xe2>
 8002e0e:	2310      	movs	r3, #16
 8002e10:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e1a:	d15a      	bne.n	8002ed2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8002e1c:	7ffb      	ldrb	r3, [r7, #31]
 8002e1e:	2b08      	cmp	r3, #8
 8002e20:	d827      	bhi.n	8002e72 <UART_SetConfig+0x142>
 8002e22:	a201      	add	r2, pc, #4	; (adr r2, 8002e28 <UART_SetConfig+0xf8>)
 8002e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e28:	08002e4d 	.word	0x08002e4d
 8002e2c:	08002e55 	.word	0x08002e55
 8002e30:	08002e5d 	.word	0x08002e5d
 8002e34:	08002e73 	.word	0x08002e73
 8002e38:	08002e63 	.word	0x08002e63
 8002e3c:	08002e73 	.word	0x08002e73
 8002e40:	08002e73 	.word	0x08002e73
 8002e44:	08002e73 	.word	0x08002e73
 8002e48:	08002e6b 	.word	0x08002e6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e4c:	f7ff fd8a 	bl	8002964 <HAL_RCC_GetPCLK1Freq>
 8002e50:	61b8      	str	r0, [r7, #24]
        break;
 8002e52:	e013      	b.n	8002e7c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e54:	f7ff fda8 	bl	80029a8 <HAL_RCC_GetPCLK2Freq>
 8002e58:	61b8      	str	r0, [r7, #24]
        break;
 8002e5a:	e00f      	b.n	8002e7c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e5c:	4b4e      	ldr	r3, [pc, #312]	; (8002f98 <UART_SetConfig+0x268>)
 8002e5e:	61bb      	str	r3, [r7, #24]
        break;
 8002e60:	e00c      	b.n	8002e7c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e62:	f7ff fd09 	bl	8002878 <HAL_RCC_GetSysClockFreq>
 8002e66:	61b8      	str	r0, [r7, #24]
        break;
 8002e68:	e008      	b.n	8002e7c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e6e:	61bb      	str	r3, [r7, #24]
        break;
 8002e70:	e004      	b.n	8002e7c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002e72:	2300      	movs	r3, #0
 8002e74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	77bb      	strb	r3, [r7, #30]
        break;
 8002e7a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d074      	beq.n	8002f6c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	005a      	lsls	r2, r3, #1
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	085b      	lsrs	r3, r3, #1
 8002e8c:	441a      	add	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e96:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	2b0f      	cmp	r3, #15
 8002e9c:	d916      	bls.n	8002ecc <UART_SetConfig+0x19c>
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea4:	d212      	bcs.n	8002ecc <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	f023 030f 	bic.w	r3, r3, #15
 8002eae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	085b      	lsrs	r3, r3, #1
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	89fb      	ldrh	r3, [r7, #14]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	89fa      	ldrh	r2, [r7, #14]
 8002ec8:	60da      	str	r2, [r3, #12]
 8002eca:	e04f      	b.n	8002f6c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	77bb      	strb	r3, [r7, #30]
 8002ed0:	e04c      	b.n	8002f6c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ed2:	7ffb      	ldrb	r3, [r7, #31]
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d828      	bhi.n	8002f2a <UART_SetConfig+0x1fa>
 8002ed8:	a201      	add	r2, pc, #4	; (adr r2, 8002ee0 <UART_SetConfig+0x1b0>)
 8002eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ede:	bf00      	nop
 8002ee0:	08002f05 	.word	0x08002f05
 8002ee4:	08002f0d 	.word	0x08002f0d
 8002ee8:	08002f15 	.word	0x08002f15
 8002eec:	08002f2b 	.word	0x08002f2b
 8002ef0:	08002f1b 	.word	0x08002f1b
 8002ef4:	08002f2b 	.word	0x08002f2b
 8002ef8:	08002f2b 	.word	0x08002f2b
 8002efc:	08002f2b 	.word	0x08002f2b
 8002f00:	08002f23 	.word	0x08002f23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f04:	f7ff fd2e 	bl	8002964 <HAL_RCC_GetPCLK1Freq>
 8002f08:	61b8      	str	r0, [r7, #24]
        break;
 8002f0a:	e013      	b.n	8002f34 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f0c:	f7ff fd4c 	bl	80029a8 <HAL_RCC_GetPCLK2Freq>
 8002f10:	61b8      	str	r0, [r7, #24]
        break;
 8002f12:	e00f      	b.n	8002f34 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f14:	4b20      	ldr	r3, [pc, #128]	; (8002f98 <UART_SetConfig+0x268>)
 8002f16:	61bb      	str	r3, [r7, #24]
        break;
 8002f18:	e00c      	b.n	8002f34 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f1a:	f7ff fcad 	bl	8002878 <HAL_RCC_GetSysClockFreq>
 8002f1e:	61b8      	str	r0, [r7, #24]
        break;
 8002f20:	e008      	b.n	8002f34 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f26:	61bb      	str	r3, [r7, #24]
        break;
 8002f28:	e004      	b.n	8002f34 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	77bb      	strb	r3, [r7, #30]
        break;
 8002f32:	bf00      	nop
    }

    if (pclk != 0U)
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d018      	beq.n	8002f6c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	085a      	lsrs	r2, r3, #1
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	441a      	add	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	2b0f      	cmp	r3, #15
 8002f52:	d909      	bls.n	8002f68 <UART_SetConfig+0x238>
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f5a:	d205      	bcs.n	8002f68 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	60da      	str	r2, [r3, #12]
 8002f66:	e001      	b.n	8002f6c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002f78:	7fbb      	ldrb	r3, [r7, #30]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3720      	adds	r7, #32
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	efff69f3 	.word	0xefff69f3
 8002f88:	40013800 	.word	0x40013800
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	40004400 	.word	0x40004400
 8002f94:	40004800 	.word	0x40004800
 8002f98:	007a1200 	.word	0x007a1200

08002f9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00a      	beq.n	8002fc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00a      	beq.n	8002fe8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00a      	beq.n	800300a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	f003 0308 	and.w	r3, r3, #8
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00a      	beq.n	800302c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	f003 0310 	and.w	r3, r3, #16
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00a      	beq.n	800304e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003052:	f003 0320 	and.w	r3, r3, #32
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00a      	beq.n	8003070 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003078:	2b00      	cmp	r3, #0
 800307a:	d01a      	beq.n	80030b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800309a:	d10a      	bne.n	80030b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00a      	beq.n	80030d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	605a      	str	r2, [r3, #4]
  }
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b098      	sub	sp, #96	; 0x60
 80030e4:	af02      	add	r7, sp, #8
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80030f0:	f7fd fe8e 	bl	8000e10 <HAL_GetTick>
 80030f4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0308 	and.w	r3, r3, #8
 8003100:	2b08      	cmp	r3, #8
 8003102:	d12e      	bne.n	8003162 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003104:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800310c:	2200      	movs	r2, #0
 800310e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f88c 	bl	8003230 <UART_WaitOnFlagUntilTimeout>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d021      	beq.n	8003162 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003126:	e853 3f00 	ldrex	r3, [r3]
 800312a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800312c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800312e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003132:	653b      	str	r3, [r7, #80]	; 0x50
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	461a      	mov	r2, r3
 800313a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800313c:	647b      	str	r3, [r7, #68]	; 0x44
 800313e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003140:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003142:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003144:	e841 2300 	strex	r3, r2, [r1]
 8003148:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800314a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1e6      	bne.n	800311e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2220      	movs	r2, #32
 8003154:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e062      	b.n	8003228 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b04      	cmp	r3, #4
 800316e:	d149      	bne.n	8003204 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003170:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003178:	2200      	movs	r2, #0
 800317a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f856 	bl	8003230 <UART_WaitOnFlagUntilTimeout>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d03c      	beq.n	8003204 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	e853 3f00 	ldrex	r3, [r3]
 8003196:	623b      	str	r3, [r7, #32]
   return(result);
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800319e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	461a      	mov	r2, r3
 80031a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031a8:	633b      	str	r3, [r7, #48]	; 0x30
 80031aa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031b0:	e841 2300 	strex	r3, r2, [r1]
 80031b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80031b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1e6      	bne.n	800318a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	3308      	adds	r3, #8
 80031c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	e853 3f00 	ldrex	r3, [r3]
 80031ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f023 0301 	bic.w	r3, r3, #1
 80031d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	3308      	adds	r3, #8
 80031da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031dc:	61fa      	str	r2, [r7, #28]
 80031de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e0:	69b9      	ldr	r1, [r7, #24]
 80031e2:	69fa      	ldr	r2, [r7, #28]
 80031e4:	e841 2300 	strex	r3, r2, [r1]
 80031e8:	617b      	str	r3, [r7, #20]
   return(result);
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1e5      	bne.n	80031bc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2220      	movs	r2, #32
 80031f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e011      	b.n	8003228 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2220      	movs	r2, #32
 8003208:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2220      	movs	r2, #32
 800320e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3758      	adds	r7, #88	; 0x58
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	603b      	str	r3, [r7, #0]
 800323c:	4613      	mov	r3, r2
 800323e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003240:	e049      	b.n	80032d6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003248:	d045      	beq.n	80032d6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800324a:	f7fd fde1 	bl	8000e10 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	429a      	cmp	r2, r3
 8003258:	d302      	bcc.n	8003260 <UART_WaitOnFlagUntilTimeout+0x30>
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e048      	b.n	80032f6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0304 	and.w	r3, r3, #4
 800326e:	2b00      	cmp	r3, #0
 8003270:	d031      	beq.n	80032d6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	69db      	ldr	r3, [r3, #28]
 8003278:	f003 0308 	and.w	r3, r3, #8
 800327c:	2b08      	cmp	r3, #8
 800327e:	d110      	bne.n	80032a2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2208      	movs	r2, #8
 8003286:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	f000 f838 	bl	80032fe <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2208      	movs	r2, #8
 8003292:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e029      	b.n	80032f6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032b0:	d111      	bne.n	80032d6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f000 f81e 	bl	80032fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2220      	movs	r2, #32
 80032c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e00f      	b.n	80032f6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	69da      	ldr	r2, [r3, #28]
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	4013      	ands	r3, r2
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	bf0c      	ite	eq
 80032e6:	2301      	moveq	r3, #1
 80032e8:	2300      	movne	r3, #0
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	461a      	mov	r2, r3
 80032ee:	79fb      	ldrb	r3, [r7, #7]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d0a6      	beq.n	8003242 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032fe:	b480      	push	{r7}
 8003300:	b095      	sub	sp, #84	; 0x54
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800330c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800330e:	e853 3f00 	ldrex	r3, [r3]
 8003312:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003316:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800331a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	461a      	mov	r2, r3
 8003322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003324:	643b      	str	r3, [r7, #64]	; 0x40
 8003326:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003328:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800332a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800332c:	e841 2300 	strex	r3, r2, [r1]
 8003330:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1e6      	bne.n	8003306 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	3308      	adds	r3, #8
 800333e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003340:	6a3b      	ldr	r3, [r7, #32]
 8003342:	e853 3f00 	ldrex	r3, [r3]
 8003346:	61fb      	str	r3, [r7, #28]
   return(result);
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	f023 0301 	bic.w	r3, r3, #1
 800334e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	3308      	adds	r3, #8
 8003356:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003358:	62fa      	str	r2, [r7, #44]	; 0x2c
 800335a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800335e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003360:	e841 2300 	strex	r3, r2, [r1]
 8003364:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1e5      	bne.n	8003338 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003370:	2b01      	cmp	r3, #1
 8003372:	d118      	bne.n	80033a6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	e853 3f00 	ldrex	r3, [r3]
 8003380:	60bb      	str	r3, [r7, #8]
   return(result);
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	f023 0310 	bic.w	r3, r3, #16
 8003388:	647b      	str	r3, [r7, #68]	; 0x44
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	461a      	mov	r2, r3
 8003390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003392:	61bb      	str	r3, [r7, #24]
 8003394:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003396:	6979      	ldr	r1, [r7, #20]
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	e841 2300 	strex	r3, r2, [r1]
 800339e:	613b      	str	r3, [r7, #16]
   return(result);
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1e6      	bne.n	8003374 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2220      	movs	r2, #32
 80033aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80033ba:	bf00      	nop
 80033bc:	3754      	adds	r7, #84	; 0x54
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b083      	sub	sp, #12
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
 80033ce:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
 80033ea:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr

080033fe <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255 or 65535 for advanced timer.
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 80033fe:	b480      	push	{r7}
 8003400:	b083      	sub	sp, #12
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
 8003406:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800341a:	b480      	push	{r7}
 800341c:	b083      	sub	sp, #12
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	f043 0201 	orr.w	r2, r3, #1
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	615a      	str	r2, [r3, #20]
}
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
	...

0800343c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a2f      	ldr	r2, [pc, #188]	; (800350c <LL_TIM_Init+0xd0>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d007      	beq.n	8003464 <LL_TIM_Init+0x28>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800345a:	d003      	beq.n	8003464 <LL_TIM_Init+0x28>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a2c      	ldr	r2, [pc, #176]	; (8003510 <LL_TIM_Init+0xd4>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d106      	bne.n	8003472 <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	4313      	orrs	r3, r2
 8003470:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a25      	ldr	r2, [pc, #148]	; (800350c <LL_TIM_Init+0xd0>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d013      	beq.n	80034a2 <LL_TIM_Init+0x66>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003480:	d00f      	beq.n	80034a2 <LL_TIM_Init+0x66>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a22      	ldr	r2, [pc, #136]	; (8003510 <LL_TIM_Init+0xd4>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d00b      	beq.n	80034a2 <LL_TIM_Init+0x66>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a21      	ldr	r2, [pc, #132]	; (8003514 <LL_TIM_Init+0xd8>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d007      	beq.n	80034a2 <LL_TIM_Init+0x66>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a20      	ldr	r2, [pc, #128]	; (8003518 <LL_TIM_Init+0xdc>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d003      	beq.n	80034a2 <LL_TIM_Init+0x66>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a1f      	ldr	r2, [pc, #124]	; (800351c <LL_TIM_Init+0xe0>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d106      	bne.n	80034b0 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	4619      	mov	r1, r3
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f7ff ff90 	bl	80033e2 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	881b      	ldrh	r3, [r3, #0]
 80034c6:	4619      	mov	r1, r3
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f7ff ff7c 	bl	80033c6 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a0e      	ldr	r2, [pc, #56]	; (800350c <LL_TIM_Init+0xd0>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d00b      	beq.n	80034ee <LL_TIM_Init+0xb2>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a0e      	ldr	r2, [pc, #56]	; (8003514 <LL_TIM_Init+0xd8>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d007      	beq.n	80034ee <LL_TIM_Init+0xb2>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a0d      	ldr	r2, [pc, #52]	; (8003518 <LL_TIM_Init+0xdc>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d003      	beq.n	80034ee <LL_TIM_Init+0xb2>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a0c      	ldr	r2, [pc, #48]	; (800351c <LL_TIM_Init+0xe0>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d105      	bne.n	80034fa <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	4619      	mov	r1, r3
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f7ff ff82 	bl	80033fe <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7ff ff8d 	bl	800341a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40012c00 	.word	0x40012c00
 8003510:	40000400 	.word	0x40000400
 8003514:	40014000 	.word	0x40014000
 8003518:	40014400 	.word	0x40014400
 800351c:	40014800 	.word	0x40014800

08003520 <aiInit>:
}
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

int aiInit(void) {
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
  ai_error err;
  /* Create and initialize the c-model */
  const ai_handle acts[] = { activations };
 8003526:	4b13      	ldr	r3, [pc, #76]	; (8003574 <aiInit+0x54>)
 8003528:	603b      	str	r3, [r7, #0]
  err = ai_network_create_and_init(&network, acts, NULL);
 800352a:	463b      	mov	r3, r7
 800352c:	2200      	movs	r2, #0
 800352e:	4619      	mov	r1, r3
 8003530:	4811      	ldr	r0, [pc, #68]	; (8003578 <aiInit+0x58>)
 8003532:	f000 fb4b 	bl	8003bcc <ai_network_create_and_init>
 8003536:	4603      	mov	r3, r0
 8003538:	607b      	str	r3, [r7, #4]
  if (err.type != AI_ERROR_NONE)
 800353a:	793b      	ldrb	r3, [r7, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d002      	beq.n	8003546 <aiInit+0x26>
  {
    return -1;
 8003540:	f04f 33ff 	mov.w	r3, #4294967295
 8003544:	e012      	b.n	800356c <aiInit+0x4c>
  };
  /* Reteive pointers to the model's input/output tensors */
  ai_input = ai_network_inputs_get(network, NULL);
 8003546:	4b0c      	ldr	r3, [pc, #48]	; (8003578 <aiInit+0x58>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2100      	movs	r1, #0
 800354c:	4618      	mov	r0, r3
 800354e:	f000 fbb1 	bl	8003cb4 <ai_network_inputs_get>
 8003552:	4603      	mov	r3, r0
 8003554:	4a09      	ldr	r2, [pc, #36]	; (800357c <aiInit+0x5c>)
 8003556:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 8003558:	4b07      	ldr	r3, [pc, #28]	; (8003578 <aiInit+0x58>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2100      	movs	r1, #0
 800355e:	4618      	mov	r0, r3
 8003560:	f000 fbc2 	bl	8003ce8 <ai_network_outputs_get>
 8003564:	4603      	mov	r3, r0
 8003566:	4a06      	ldr	r2, [pc, #24]	; (8003580 <aiInit+0x60>)
 8003568:	6013      	str	r3, [r2, #0]

  return 0;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	20000900 	.word	0x20000900
 8003578:	200008e0 	.word	0x200008e0
 800357c:	200011d0 	.word	0x200011d0
 8003580:	200011d4 	.word	0x200011d4

08003584 <aiRun>:
/*
 * Run inference
 */
int aiRun(const void *in_data, void *out_data) {
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  ai_i32 n_batch;
  ai_error err;

  /* 1 - Update IO handlers with the data payload */
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 800358e:	4b12      	ldr	r3, [pc, #72]	; (80035d8 <aiRun+0x54>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	605a      	str	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 8003596:	4b11      	ldr	r3, [pc, #68]	; (80035dc <aiRun+0x58>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	605a      	str	r2, [r3, #4]

  /* 2 - Perform the inference */
  n_batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 800359e:	4b10      	ldr	r3, [pc, #64]	; (80035e0 <aiRun+0x5c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a0d      	ldr	r2, [pc, #52]	; (80035d8 <aiRun+0x54>)
 80035a4:	6811      	ldr	r1, [r2, #0]
 80035a6:	4a0d      	ldr	r2, [pc, #52]	; (80035dc <aiRun+0x58>)
 80035a8:	6812      	ldr	r2, [r2, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 fbf2 	bl	8003d94 <ai_network_run>
 80035b0:	60f8      	str	r0, [r7, #12]
  if (n_batch != 1) {
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d00a      	beq.n	80035ce <aiRun+0x4a>
      err = ai_network_get_error(network);
 80035b8:	4b09      	ldr	r3, [pc, #36]	; (80035e0 <aiRun+0x5c>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4618      	mov	r0, r3
 80035be:	f000 fae3 	bl	8003b88 <ai_network_get_error>
 80035c2:	4603      	mov	r3, r0
 80035c4:	60bb      	str	r3, [r7, #8]
      return err.code;
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80035cc:	e000      	b.n	80035d0 <aiRun+0x4c>
  };

  return 0;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	200011d0 	.word	0x200011d0
 80035dc:	200011d4 	.word	0x200011d4
 80035e0:	200008e0 	.word	0x200008e0

080035e4 <MX_X_CUBE_AI_Init>:

void MX_X_CUBE_AI_Init(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
	/* Activation/working buffer is allocated as a static memory chunk
     * (bss section) */
    AI_ALIGNED(4)
    static ai_u8 activations[AI_NETWORK_DATA_ACTIVATIONS_SIZE];

    aiInit();
 80035e8:	f7ff ff9a 	bl	8003520 <aiInit>
    /* USER CODE END 5 */
}
 80035ec:	bf00      	nop
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80035f4:	4b0d      	ldr	r3, [pc, #52]	; (800362c <MX_CRC_Init+0x3c>)
 80035f6:	4a0e      	ldr	r2, [pc, #56]	; (8003630 <MX_CRC_Init+0x40>)
 80035f8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80035fa:	4b0c      	ldr	r3, [pc, #48]	; (800362c <MX_CRC_Init+0x3c>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8003600:	4b0a      	ldr	r3, [pc, #40]	; (800362c <MX_CRC_Init+0x3c>)
 8003602:	2200      	movs	r2, #0
 8003604:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8003606:	4b09      	ldr	r3, [pc, #36]	; (800362c <MX_CRC_Init+0x3c>)
 8003608:	2200      	movs	r2, #0
 800360a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800360c:	4b07      	ldr	r3, [pc, #28]	; (800362c <MX_CRC_Init+0x3c>)
 800360e:	2200      	movs	r2, #0
 8003610:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003612:	4b06      	ldr	r3, [pc, #24]	; (800362c <MX_CRC_Init+0x3c>)
 8003614:	2201      	movs	r2, #1
 8003616:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003618:	4804      	ldr	r0, [pc, #16]	; (800362c <MX_CRC_Init+0x3c>)
 800361a:	f7fd fd0f 	bl	800103c <HAL_CRC_Init>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8003624:	f000 f9b1 	bl	800398a <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8003628:	bf00      	nop
 800362a:	bd80      	pop	{r7, pc}
 800362c:	200011d8 	.word	0x200011d8
 8003630:	40023000 	.word	0x40023000

08003634 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a0a      	ldr	r2, [pc, #40]	; (800366c <HAL_CRC_MspInit+0x38>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d10b      	bne.n	800365e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003646:	4b0a      	ldr	r3, [pc, #40]	; (8003670 <HAL_CRC_MspInit+0x3c>)
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	4a09      	ldr	r2, [pc, #36]	; (8003670 <HAL_CRC_MspInit+0x3c>)
 800364c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003650:	6153      	str	r3, [r2, #20]
 8003652:	4b07      	ldr	r3, [pc, #28]	; (8003670 <HAL_CRC_MspInit+0x3c>)
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365a:	60fb      	str	r3, [r7, #12]
 800365c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800365e:	bf00      	nop
 8003660:	3714      	adds	r7, #20
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	40023000 	.word	0x40023000
 8003670:	40021000 	.word	0x40021000

08003674 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800367a:	4b0f      	ldr	r3, [pc, #60]	; (80036b8 <MX_GPIO_Init+0x44>)
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	4a0e      	ldr	r2, [pc, #56]	; (80036b8 <MX_GPIO_Init+0x44>)
 8003680:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003684:	6153      	str	r3, [r2, #20]
 8003686:	4b0c      	ldr	r3, [pc, #48]	; (80036b8 <MX_GPIO_Init+0x44>)
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800368e:	607b      	str	r3, [r7, #4]
 8003690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003692:	4b09      	ldr	r3, [pc, #36]	; (80036b8 <MX_GPIO_Init+0x44>)
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	4a08      	ldr	r2, [pc, #32]	; (80036b8 <MX_GPIO_Init+0x44>)
 8003698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800369c:	6153      	str	r3, [r2, #20]
 800369e:	4b06      	ldr	r3, [pc, #24]	; (80036b8 <MX_GPIO_Init+0x44>)
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a6:	603b      	str	r3, [r7, #0]
 80036a8:	683b      	ldr	r3, [r7, #0]

}
 80036aa:	bf00      	nop
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	40021000 	.word	0x40021000

080036bc <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 80036c0:	4b07      	ldr	r3, [pc, #28]	; (80036e0 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036cc:	bf0c      	ite	eq
 80036ce:	2301      	moveq	r3, #1
 80036d0:	2300      	movne	r3, #0
 80036d2:	b2db      	uxtb	r3, r3
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	e000e010 	.word	0xe000e010

080036e4 <getCurrentMicros>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

uint32_t getCurrentMicros(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
	LL_SYSTICK_IsActiveCounterFlag();
 80036ea:	f7ff ffe7 	bl	80036bc <LL_SYSTICK_IsActiveCounterFlag>
	uint32_t m = HAL_GetTick();
 80036ee:	f7fd fb8f 	bl	8000e10 <HAL_GetTick>
 80036f2:	60f8      	str	r0, [r7, #12]
	const uint32_t tms = SysTick->LOAD + 1;
 80036f4:	4b13      	ldr	r3, [pc, #76]	; (8003744 <getCurrentMicros+0x60>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	3301      	adds	r3, #1
 80036fa:	60bb      	str	r3, [r7, #8]
	__IO uint32_t u = tms - SysTick->VAL;
 80036fc:	4b11      	ldr	r3, [pc, #68]	; (8003744 <getCurrentMicros+0x60>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	607b      	str	r3, [r7, #4]
	if (LL_SYSTICK_IsActiveCounterFlag())
 8003706:	f7ff ffd9 	bl	80036bc <LL_SYSTICK_IsActiveCounterFlag>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d007      	beq.n	8003720 <getCurrentMicros+0x3c>
	{
		m = HAL_GetTick();
 8003710:	f7fd fb7e 	bl	8000e10 <HAL_GetTick>
 8003714:	60f8      	str	r0, [r7, #12]
		u = tms - SysTick->VAL;
 8003716:	4b0b      	ldr	r3, [pc, #44]	; (8003744 <getCurrentMicros+0x60>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	607b      	str	r3, [r7, #4]
	}
	return (m*1000+(u*1000)/tms);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003726:	fb03 f202 	mul.w	r2, r3, r2
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003730:	fb03 f101 	mul.w	r1, r3, r1
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	fbb1 f3f3 	udiv	r3, r1, r3
 800373a:	4413      	add	r3, r2
}
 800373c:	4618      	mov	r0, r3
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	e000e010 	.word	0xe000e010

08003748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003748:	b5b0      	push	{r4, r5, r7, lr}
 800374a:	b08c      	sub	sp, #48	; 0x30
 800374c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  float input_tmp;
  int status=0;
 800374e:	2300      	movs	r3, #0
 8003750:	613b      	str	r3, [r7, #16]
  double vector[2] = {0};
 8003752:	463b      	mov	r3, r7
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	605a      	str	r2, [r3, #4]
 800375a:	609a      	str	r2, [r3, #8]
 800375c:	60da      	str	r2, [r3, #12]
  double start_time = 0;
 800375e:	f04f 0200 	mov.w	r2, #0
 8003762:	f04f 0300 	mov.w	r3, #0
 8003766:	e9c7 2308 	strd	r2, r3, [r7, #32]
  double end_time = 0;
 800376a:	f04f 0200 	mov.w	r2, #0
 800376e:	f04f 0300 	mov.w	r3, #0
 8003772:	e9c7 2306 	strd	r2, r3, [r7, #24]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003776:	f7fd faf1 	bl	8000d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800377a:	f000 f8c5 	bl	8003908 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800377e:	f7ff ff79 	bl	8003674 <MX_GPIO_Init>
  MX_CRC_Init();
 8003782:	f7ff ff35 	bl	80035f0 <MX_CRC_Init>
  MX_USART2_UART_Init();
 8003786:	f000 fd95 	bl	80042b4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800378a:	f000 fd51 	bl	8004230 <MX_TIM2_Init>
  MX_X_CUBE_AI_Init();
 800378e:	f7ff ff29 	bl	80035e4 <MX_X_CUBE_AI_Init>
  {
    /* USER CODE END WHILE */

	// Send the code "begin" to tell the upper computer that it can start sending a set of test data.
//	HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 100);
	printf("begin");
 8003792:	4855      	ldr	r0, [pc, #340]	; (80038e8 <main+0x1a0>)
 8003794:	f005 fe64 	bl	8009460 <iprintf>
    for(int16_t i=0;i<1;i++)
 8003798:	2300      	movs	r3, #0
 800379a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800379c:	e038      	b.n	8003810 <main+0xc8>
    {
      for(int16_t j=0;j<1250;j++)
 800379e:	2300      	movs	r3, #0
 80037a0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80037a2:	e029      	b.n	80037f8 <main+0xb0>
//    	for(int16_t j=0;j<1;j++)
      {
        for(int16_t k=0;k<1;k++)
 80037a4:	2300      	movs	r3, #0
 80037a6:	857b      	strh	r3, [r7, #42]	; 0x2a
 80037a8:	e01c      	b.n	80037e4 <main+0x9c>
        {
          // Receive test data from serial port and save to input[]
          scanf("%f",&input_tmp);
 80037aa:	f107 0314 	add.w	r3, r7, #20
 80037ae:	4619      	mov	r1, r3
 80037b0:	484e      	ldr	r0, [pc, #312]	; (80038ec <main+0x1a4>)
 80037b2:	f005 fe67 	bl	8009484 <iscanf>
          input[i][j][k]=input_tmp;
 80037b6:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80037ba:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80037be:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	4c4a      	ldr	r4, [pc, #296]	; (80038f0 <main+0x1a8>)
 80037c6:	f240 45e2 	movw	r5, #1250	; 0x4e2
 80037ca:	fb05 f000 	mul.w	r0, r5, r0
 80037ce:	4401      	add	r1, r0
 80037d0:	440b      	add	r3, r1
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4423      	add	r3, r4
 80037d6:	601a      	str	r2, [r3, #0]
        for(int16_t k=0;k<1;k++)
 80037d8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80037dc:	b29b      	uxth	r3, r3
 80037de:	3301      	adds	r3, #1
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	857b      	strh	r3, [r7, #42]	; 0x2a
 80037e4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	ddde      	ble.n	80037aa <main+0x62>
      for(int16_t j=0;j<1250;j++)
 80037ec:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	3301      	adds	r3, #1
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80037f8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80037fc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8003800:	4293      	cmp	r3, r2
 8003802:	ddcf      	ble.n	80037a4 <main+0x5c>
    for(int16_t i=0;i<1;i++)
 8003804:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8003808:	b29b      	uxth	r3, r3
 800380a:	3301      	adds	r3, #1
 800380c:	b29b      	uxth	r3, r3
 800380e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003810:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8003814:	2b00      	cmp	r3, #0
 8003816:	ddc2      	ble.n	800379e <main+0x56>
        }

      }
    }
    HAL_Delay(1);
 8003818:	2001      	movs	r0, #1
 800381a:	f7fd fb05 	bl	8000e28 <HAL_Delay>
    //Run the model and get results
	start_time = getCurrentMicros();
 800381e:	f7ff ff61 	bl	80036e4 <getCurrentMicros>
 8003822:	4603      	mov	r3, r0
 8003824:	4618      	mov	r0, r3
 8003826:	f7fc fe6d 	bl	8000504 <__aeabi_ui2d>
 800382a:	4602      	mov	r2, r0
 800382c:	460b      	mov	r3, r1
 800382e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    aiRun(input,result);
 8003832:	4930      	ldr	r1, [pc, #192]	; (80038f4 <main+0x1ac>)
 8003834:	482e      	ldr	r0, [pc, #184]	; (80038f0 <main+0x1a8>)
 8003836:	f7ff fea5 	bl	8003584 <aiRun>
	end_time = getCurrentMicros();
 800383a:	f7ff ff53 	bl	80036e4 <getCurrentMicros>
 800383e:	4603      	mov	r3, r0
 8003840:	4618      	mov	r0, r3
 8003842:	f7fc fe5f 	bl	8000504 <__aeabi_ui2d>
 8003846:	4602      	mov	r2, r0
 8003848:	460b      	mov	r3, r1
 800384a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    // Send the code "ok" to tell the upper computer that inference is done and ready to send results.
    printf("ok");
 800384e:	482a      	ldr	r0, [pc, #168]	; (80038f8 <main+0x1b0>)
 8003850:	f005 fe06 	bl	8009460 <iprintf>
    HAL_Delay(1);
 8003854:	2001      	movs	r0, #1
 8003856:	f7fd fae7 	bl	8000e28 <HAL_Delay>
    // Wait for the upper computer to send status 200, indicating that the code "ok" has been received
    scanf("%d",&status);
 800385a:	f107 0310 	add.w	r3, r7, #16
 800385e:	4619      	mov	r1, r3
 8003860:	4826      	ldr	r0, [pc, #152]	; (80038fc <main+0x1b4>)
 8003862:	f005 fe0f 	bl	8009484 <iscanf>
    if(status==200)
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	2bc8      	cmp	r3, #200	; 0xc8
 800386a:	d192      	bne.n	8003792 <main+0x4a>
    {
      // Sending results to the upper computer
      if(result[0]>result[1])
 800386c:	4b21      	ldr	r3, [pc, #132]	; (80038f4 <main+0x1ac>)
 800386e:	ed93 7a00 	vldr	s14, [r3]
 8003872:	4b20      	ldr	r3, [pc, #128]	; (80038f4 <main+0x1ac>)
 8003874:	edd3 7a01 	vldr	s15, [r3, #4]
 8003878:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800387c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003880:	dd14      	ble.n	80038ac <main+0x164>
        printf("0,%.6f", (double)(end_time-start_time)/(double)1000000);
 8003882:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003886:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800388a:	f7fc fcfd 	bl	8000288 <__aeabi_dsub>
 800388e:	4602      	mov	r2, r0
 8003890:	460b      	mov	r3, r1
 8003892:	4610      	mov	r0, r2
 8003894:	4619      	mov	r1, r3
 8003896:	a312      	add	r3, pc, #72	; (adr r3, 80038e0 <main+0x198>)
 8003898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389c:	f7fc ffd6 	bl	800084c <__aeabi_ddiv>
 80038a0:	4602      	mov	r2, r0
 80038a2:	460b      	mov	r3, r1
 80038a4:	4816      	ldr	r0, [pc, #88]	; (8003900 <main+0x1b8>)
 80038a6:	f005 fddb 	bl	8009460 <iprintf>
 80038aa:	e013      	b.n	80038d4 <main+0x18c>
      else
        printf("1,%.6f", (double)(end_time-start_time)/(double)1000000);
 80038ac:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038b0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80038b4:	f7fc fce8 	bl	8000288 <__aeabi_dsub>
 80038b8:	4602      	mov	r2, r0
 80038ba:	460b      	mov	r3, r1
 80038bc:	4610      	mov	r0, r2
 80038be:	4619      	mov	r1, r3
 80038c0:	a307      	add	r3, pc, #28	; (adr r3, 80038e0 <main+0x198>)
 80038c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c6:	f7fc ffc1 	bl	800084c <__aeabi_ddiv>
 80038ca:	4602      	mov	r2, r0
 80038cc:	460b      	mov	r3, r1
 80038ce:	480d      	ldr	r0, [pc, #52]	; (8003904 <main+0x1bc>)
 80038d0:	f005 fdc6 	bl	8009460 <iprintf>
      HAL_Delay(30);
 80038d4:	201e      	movs	r0, #30
 80038d6:	f7fd faa7 	bl	8000e28 <HAL_Delay>
	printf("begin");
 80038da:	e75a      	b.n	8003792 <main+0x4a>
 80038dc:	f3af 8000 	nop.w
 80038e0:	00000000 	.word	0x00000000
 80038e4:	412e8480 	.word	0x412e8480
 80038e8:	0800d620 	.word	0x0800d620
 80038ec:	0800d628 	.word	0x0800d628
 80038f0:	200011fc 	.word	0x200011fc
 80038f4:	20002584 	.word	0x20002584
 80038f8:	0800d62c 	.word	0x0800d62c
 80038fc:	0800d630 	.word	0x0800d630
 8003900:	0800d634 	.word	0x0800d634
 8003904:	0800d63c 	.word	0x0800d63c

08003908 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b090      	sub	sp, #64	; 0x40
 800390c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800390e:	f107 0318 	add.w	r3, r7, #24
 8003912:	2228      	movs	r2, #40	; 0x28
 8003914:	2100      	movs	r1, #0
 8003916:	4618      	mov	r0, r3
 8003918:	f005 fe29 	bl	800956e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800391c:	1d3b      	adds	r3, r7, #4
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	605a      	str	r2, [r3, #4]
 8003924:	609a      	str	r2, [r3, #8]
 8003926:	60da      	str	r2, [r3, #12]
 8003928:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800392a:	2302      	movs	r3, #2
 800392c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800392e:	2301      	movs	r3, #1
 8003930:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003932:	2310      	movs	r3, #16
 8003934:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003936:	2302      	movs	r3, #2
 8003938:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800393a:	2300      	movs	r3, #0
 800393c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800393e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8003942:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003944:	f107 0318 	add.w	r3, r7, #24
 8003948:	4618      	mov	r0, r3
 800394a:	f7fd fddb 	bl	8001504 <HAL_RCC_OscConfig>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8003954:	f000 f819 	bl	800398a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003958:	230f      	movs	r3, #15
 800395a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800395c:	2302      	movs	r3, #2
 800395e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003960:	2300      	movs	r3, #0
 8003962:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003964:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003968:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800396a:	2300      	movs	r3, #0
 800396c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800396e:	1d3b      	adds	r3, r7, #4
 8003970:	2102      	movs	r1, #2
 8003972:	4618      	mov	r0, r3
 8003974:	f7fe fe04 	bl	8002580 <HAL_RCC_ClockConfig>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800397e:	f000 f804 	bl	800398a <Error_Handler>
  }
}
 8003982:	bf00      	nop
 8003984:	3740      	adds	r7, #64	; 0x40
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800398a:	b480      	push	{r7}
 800398c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800398e:	b672      	cpsid	i
}
 8003990:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003992:	e7fe      	b.n	8003992 <Error_Handler+0x8>

08003994 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	2101      	movs	r1, #1
 80039a2:	482c      	ldr	r0, [pc, #176]	; (8003a54 <network_configure_activations+0xc0>)
 80039a4:	f000 fdf4 	bl	8004590 <ai_platform_get_activations_map>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d047      	beq.n	8003a3e <network_configure_activations+0xaa>
    /* Updating activations (byte) offsets */
    
    serving_default_input_20_output_array.data = AI_PTR(g_network_activations_map[0] + 1004);
 80039ae:	4b29      	ldr	r3, [pc, #164]	; (8003a54 <network_configure_activations+0xc0>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 80039b6:	4a28      	ldr	r2, [pc, #160]	; (8003a58 <network_configure_activations+0xc4>)
 80039b8:	6093      	str	r3, [r2, #8]
    serving_default_input_20_output_array.data_start = AI_PTR(g_network_activations_map[0] + 1004);
 80039ba:	4b26      	ldr	r3, [pc, #152]	; (8003a54 <network_configure_activations+0xc0>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 80039c2:	4a25      	ldr	r2, [pc, #148]	; (8003a58 <network_configure_activations+0xc4>)
 80039c4:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 112);
 80039c6:	4b23      	ldr	r3, [pc, #140]	; (8003a54 <network_configure_activations+0xc0>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	3370      	adds	r3, #112	; 0x70
 80039cc:	4a23      	ldr	r2, [pc, #140]	; (8003a5c <network_configure_activations+0xc8>)
 80039ce:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 112);
 80039d0:	4b20      	ldr	r3, [pc, #128]	; (8003a54 <network_configure_activations+0xc0>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	3370      	adds	r3, #112	; 0x70
 80039d6:	4a21      	ldr	r2, [pc, #132]	; (8003a5c <network_configure_activations+0xc8>)
 80039d8:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80039da:	4b1e      	ldr	r3, [pc, #120]	; (8003a54 <network_configure_activations+0xc0>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a20      	ldr	r2, [pc, #128]	; (8003a60 <network_configure_activations+0xcc>)
 80039e0:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80039e2:	4b1c      	ldr	r3, [pc, #112]	; (8003a54 <network_configure_activations+0xc0>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a1e      	ldr	r2, [pc, #120]	; (8003a60 <network_configure_activations+0xcc>)
 80039e8:	60d3      	str	r3, [r2, #12]
    
    gemm_3_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 112);
 80039ea:	4b1a      	ldr	r3, [pc, #104]	; (8003a54 <network_configure_activations+0xc0>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	3370      	adds	r3, #112	; 0x70
 80039f0:	4a1c      	ldr	r2, [pc, #112]	; (8003a64 <network_configure_activations+0xd0>)
 80039f2:	6093      	str	r3, [r2, #8]
    gemm_3_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 112);
 80039f4:	4b17      	ldr	r3, [pc, #92]	; (8003a54 <network_configure_activations+0xc0>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	3370      	adds	r3, #112	; 0x70
 80039fa:	4a1a      	ldr	r2, [pc, #104]	; (8003a64 <network_configure_activations+0xd0>)
 80039fc:	60d3      	str	r3, [r2, #12]
    
    gemm_3_output_array.data = AI_PTR(g_network_activations_map[0] + 336);
 80039fe:	4b15      	ldr	r3, [pc, #84]	; (8003a54 <network_configure_activations+0xc0>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003a06:	4a18      	ldr	r2, [pc, #96]	; (8003a68 <network_configure_activations+0xd4>)
 8003a08:	6093      	str	r3, [r2, #8]
    gemm_3_output_array.data_start = AI_PTR(g_network_activations_map[0] + 336);
 8003a0a:	4b12      	ldr	r3, [pc, #72]	; (8003a54 <network_configure_activations+0xc0>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003a12:	4a15      	ldr	r2, [pc, #84]	; (8003a68 <network_configure_activations+0xd4>)
 8003a14:	60d3      	str	r3, [r2, #12]
    
    gemm_4_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8003a16:	4b0f      	ldr	r3, [pc, #60]	; (8003a54 <network_configure_activations+0xc0>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a14      	ldr	r2, [pc, #80]	; (8003a6c <network_configure_activations+0xd8>)
 8003a1c:	6093      	str	r3, [r2, #8]
    gemm_4_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8003a1e:	4b0d      	ldr	r3, [pc, #52]	; (8003a54 <network_configure_activations+0xc0>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a12      	ldr	r2, [pc, #72]	; (8003a6c <network_configure_activations+0xd8>)
 8003a24:	60d3      	str	r3, [r2, #12]
    
    gemm_4_output_array.data = AI_PTR(g_network_activations_map[0] + 20);
 8003a26:	4b0b      	ldr	r3, [pc, #44]	; (8003a54 <network_configure_activations+0xc0>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	3314      	adds	r3, #20
 8003a2c:	4a10      	ldr	r2, [pc, #64]	; (8003a70 <network_configure_activations+0xdc>)
 8003a2e:	6093      	str	r3, [r2, #8]
    gemm_4_output_array.data_start = AI_PTR(g_network_activations_map[0] + 20);
 8003a30:	4b08      	ldr	r3, [pc, #32]	; (8003a54 <network_configure_activations+0xc0>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	3314      	adds	r3, #20
 8003a36:	4a0e      	ldr	r2, [pc, #56]	; (8003a70 <network_configure_activations+0xdc>)
 8003a38:	60d3      	str	r3, [r2, #12]
    
    return true;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e005      	b.n	8003a4a <network_configure_activations+0xb6>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8003a3e:	2213      	movs	r2, #19
 8003a40:	2130      	movs	r1, #48	; 0x30
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 fe88 	bl	8004758 <ai_platform_network_set_error>
  return false;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	2000258c 	.word	0x2000258c
 8003a58:	20000048 	.word	0x20000048
 8003a5c:	20000038 	.word	0x20000038
 8003a60:	20000058 	.word	0x20000058
 8003a64:	20000068 	.word	0x20000068
 8003a68:	20000078 	.word	0x20000078
 8003a6c:	200000a8 	.word	0x200000a8
 8003a70:	20000088 	.word	0x20000088

08003a74 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	2101      	movs	r1, #1
 8003a82:	483a      	ldr	r0, [pc, #232]	; (8003b6c <network_configure_weights+0xf8>)
 8003a84:	f000 fd30 	bl	80044e8 <ai_platform_get_weights_map>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d063      	beq.n	8003b56 <network_configure_weights+0xe2>
    /* Updating weights (byte) offsets */
    
    gemm_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8003a8e:	4b38      	ldr	r3, [pc, #224]	; (8003b70 <network_configure_weights+0xfc>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a96:	4a36      	ldr	r2, [pc, #216]	; (8003b70 <network_configure_weights+0xfc>)
 8003a98:	6013      	str	r3, [r2, #0]
    gemm_3_bias_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8003a9a:	4b34      	ldr	r3, [pc, #208]	; (8003b6c <network_configure_weights+0xf8>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a34      	ldr	r2, [pc, #208]	; (8003b70 <network_configure_weights+0xfc>)
 8003aa0:	6093      	str	r3, [r2, #8]
    gemm_3_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8003aa2:	4b32      	ldr	r3, [pc, #200]	; (8003b6c <network_configure_weights+0xf8>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a32      	ldr	r2, [pc, #200]	; (8003b70 <network_configure_weights+0xfc>)
 8003aa8:	60d3      	str	r3, [r2, #12]
    
    gemm_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8003aaa:	4b32      	ldr	r3, [pc, #200]	; (8003b74 <network_configure_weights+0x100>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ab2:	4a30      	ldr	r2, [pc, #192]	; (8003b74 <network_configure_weights+0x100>)
 8003ab4:	6013      	str	r3, [r2, #0]
    gemm_4_weights_array.data = AI_PTR(g_network_weights_map[0] + 40);
 8003ab6:	4b2d      	ldr	r3, [pc, #180]	; (8003b6c <network_configure_weights+0xf8>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	3328      	adds	r3, #40	; 0x28
 8003abc:	4a2d      	ldr	r2, [pc, #180]	; (8003b74 <network_configure_weights+0x100>)
 8003abe:	6093      	str	r3, [r2, #8]
    gemm_4_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 40);
 8003ac0:	4b2a      	ldr	r3, [pc, #168]	; (8003b6c <network_configure_weights+0xf8>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	3328      	adds	r3, #40	; 0x28
 8003ac6:	4a2b      	ldr	r2, [pc, #172]	; (8003b74 <network_configure_weights+0x100>)
 8003ac8:	60d3      	str	r3, [r2, #12]
    
    gemm_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8003aca:	4b2b      	ldr	r3, [pc, #172]	; (8003b78 <network_configure_weights+0x104>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ad2:	4a29      	ldr	r2, [pc, #164]	; (8003b78 <network_configure_weights+0x104>)
 8003ad4:	6013      	str	r3, [r2, #0]
    gemm_4_bias_array.data = AI_PTR(g_network_weights_map[0] + 52);
 8003ad6:	4b25      	ldr	r3, [pc, #148]	; (8003b6c <network_configure_weights+0xf8>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	3334      	adds	r3, #52	; 0x34
 8003adc:	4a26      	ldr	r2, [pc, #152]	; (8003b78 <network_configure_weights+0x104>)
 8003ade:	6093      	str	r3, [r2, #8]
    gemm_4_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 52);
 8003ae0:	4b22      	ldr	r3, [pc, #136]	; (8003b6c <network_configure_weights+0xf8>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	3334      	adds	r3, #52	; 0x34
 8003ae6:	4a24      	ldr	r2, [pc, #144]	; (8003b78 <network_configure_weights+0x104>)
 8003ae8:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8003aea:	4b24      	ldr	r3, [pc, #144]	; (8003b7c <network_configure_weights+0x108>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003af2:	4a22      	ldr	r2, [pc, #136]	; (8003b7c <network_configure_weights+0x108>)
 8003af4:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 56);
 8003af6:	4b1d      	ldr	r3, [pc, #116]	; (8003b6c <network_configure_weights+0xf8>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	3338      	adds	r3, #56	; 0x38
 8003afc:	4a1f      	ldr	r2, [pc, #124]	; (8003b7c <network_configure_weights+0x108>)
 8003afe:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 56);
 8003b00:	4b1a      	ldr	r3, [pc, #104]	; (8003b6c <network_configure_weights+0xf8>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	3338      	adds	r3, #56	; 0x38
 8003b06:	4a1d      	ldr	r2, [pc, #116]	; (8003b7c <network_configure_weights+0x108>)
 8003b08:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8003b0a:	4b1d      	ldr	r3, [pc, #116]	; (8003b80 <network_configure_weights+0x10c>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b12:	4a1b      	ldr	r2, [pc, #108]	; (8003b80 <network_configure_weights+0x10c>)
 8003b14:	6013      	str	r3, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 312);
 8003b16:	4b15      	ldr	r3, [pc, #84]	; (8003b6c <network_configure_weights+0xf8>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8003b1e:	4a18      	ldr	r2, [pc, #96]	; (8003b80 <network_configure_weights+0x10c>)
 8003b20:	6093      	str	r3, [r2, #8]
    conv2d_1_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 312);
 8003b22:	4b12      	ldr	r3, [pc, #72]	; (8003b6c <network_configure_weights+0xf8>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8003b2a:	4a15      	ldr	r2, [pc, #84]	; (8003b80 <network_configure_weights+0x10c>)
 8003b2c:	60d3      	str	r3, [r2, #12]
    
    gemm_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8003b2e:	4b15      	ldr	r3, [pc, #84]	; (8003b84 <network_configure_weights+0x110>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b36:	4a13      	ldr	r2, [pc, #76]	; (8003b84 <network_configure_weights+0x110>)
 8003b38:	6013      	str	r3, [r2, #0]
    gemm_3_weights_array.data = AI_PTR(g_network_weights_map[0] + 324);
 8003b3a:	4b0c      	ldr	r3, [pc, #48]	; (8003b6c <network_configure_weights+0xf8>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003b42:	4a10      	ldr	r2, [pc, #64]	; (8003b84 <network_configure_weights+0x110>)
 8003b44:	6093      	str	r3, [r2, #8]
    gemm_3_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 324);
 8003b46:	4b09      	ldr	r3, [pc, #36]	; (8003b6c <network_configure_weights+0xf8>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003b4e:	4a0d      	ldr	r2, [pc, #52]	; (8003b84 <network_configure_weights+0x110>)
 8003b50:	60d3      	str	r3, [r2, #12]
    
    return true;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e005      	b.n	8003b62 <network_configure_weights+0xee>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8003b56:	2212      	movs	r2, #18
 8003b58:	2130      	movs	r1, #48	; 0x30
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 fdfc 	bl	8004758 <ai_platform_network_set_error>
  return false;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20002590 	.word	0x20002590
 8003b70:	20000008 	.word	0x20000008
 8003b74:	20000018 	.word	0x20000018
 8003b78:	20000028 	.word	0x20000028
 8003b7c:	20000098 	.word	0x20000098
 8003b80:	200000b8 	.word	0x200000b8
 8003b84:	200000c8 	.word	0x200000c8

08003b88 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 fd73 	bl	800467c <ai_platform_network_get_error>
 8003b96:	4603      	mov	r3, r0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3708      	adds	r7, #8
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af02      	add	r7, sp, #8
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8003baa:	2300      	movs	r3, #0
 8003bac:	9301      	str	r3, [sp, #4]
 8003bae:	2305      	movs	r3, #5
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	4a04      	ldr	r2, [pc, #16]	; (8003bc8 <ai_network_create+0x28>)
 8003bb6:	6839      	ldr	r1, [r7, #0]
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 ff79 	bl	8004ab0 <ai_platform_network_create>
 8003bbe:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3708      	adds	r7, #8
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	20000638 	.word	0x20000638

08003bcc <ai_network_create_and_init>:

AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b096      	sub	sp, #88	; 0x58
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8003bd8:	2100      	movs	r1, #0
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f7ff ffe0 	bl	8003ba0 <ai_network_create>
 8003be0:	4603      	mov	r3, r0
 8003be2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 8003be4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <ai_network_create_and_init+0x24>
        return err;
 8003bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bee:	e05d      	b.n	8003cac <ai_network_create_and_init+0xe0>
    if (ai_network_data_params_get(&params) != true) {
 8003bf0:	f107 0314 	add.w	r3, r7, #20
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f000 f8dd 	bl	8003db4 <ai_network_data_params_get>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	f083 0301 	eor.w	r3, r3, #1
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d008      	beq.n	8003c18 <ai_network_create_and_init+0x4c>
        err = ai_network_get_error(*network);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7ff ffbc 	bl	8003b88 <ai_network_get_error>
 8003c10:	4603      	mov	r3, r0
 8003c12:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8003c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c16:	e049      	b.n	8003cac <ai_network_create_and_init+0xe0>
    }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d016      	beq.n	8003c4c <ai_network_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 8003c1e:	2300      	movs	r3, #0
 8003c20:	657b      	str	r3, [r7, #84]	; 0x54
 8003c22:	e00e      	b.n	8003c42 <ai_network_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8003c24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	f107 0314 	add.w	r3, r7, #20
 8003c34:	330c      	adds	r3, #12
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 fc42 	bl	80044c0 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8003c3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c3e:	3301      	adds	r3, #1
 8003c40:	657b      	str	r3, [r7, #84]	; 0x54
 8003c42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003c44:	461a      	mov	r2, r3
 8003c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	dbeb      	blt.n	8003c24 <ai_network_create_and_init+0x58>
    }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
    if (weights) {
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d016      	beq.n	8003c80 <ai_network_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 8003c52:	2300      	movs	r3, #0
 8003c54:	653b      	str	r3, [r7, #80]	; 0x50
 8003c56:	e00e      	b.n	8003c76 <ai_network_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8003c58:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003c5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	4413      	add	r3, r2
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	f107 0314 	add.w	r3, r7, #20
 8003c68:	3304      	adds	r3, #4
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 fc28 	bl	80044c0 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8003c70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c72:	3301      	adds	r3, #1
 8003c74:	653b      	str	r3, [r7, #80]	; 0x50
 8003c76:	8b7b      	ldrh	r3, [r7, #26]
 8003c78:	461a      	mov	r2, r3
 8003c7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	dbeb      	blt.n	8003c58 <ai_network_create_and_init+0x8c>
    }
#endif
    if (ai_network_init(*network, &params) != true) {
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f107 0214 	add.w	r2, r7, #20
 8003c88:	4611      	mov	r1, r2
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 f846 	bl	8003d1c <ai_network_init>
 8003c90:	4603      	mov	r3, r0
 8003c92:	f083 0301 	eor.w	r3, r3, #1
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d006      	beq.n	8003caa <ai_network_create_and_init+0xde>
        err = ai_network_get_error(*network);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7ff ff71 	bl	8003b88 <ai_network_get_error>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 8003caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3758      	adds	r7, #88	; 0x58
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <ai_network_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d104      	bne.n	8003cce <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8003cc4:	4b06      	ldr	r3, [pc, #24]	; (8003ce0 <ai_network_inputs_get+0x2c>)
 8003cc6:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a06      	ldr	r2, [pc, #24]	; (8003ce4 <ai_network_inputs_get+0x30>)
 8003ccc:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8003cce:	6839      	ldr	r1, [r7, #0]
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 fd47 	bl	8004764 <ai_platform_inputs_get>
 8003cd6:	4603      	mov	r3, r0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	20000638 	.word	0x20000638
 8003ce4:	a1c00100 	.word	0xa1c00100

08003ce8 <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d104      	bne.n	8003d02 <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8003cf8:	4b06      	ldr	r3, [pc, #24]	; (8003d14 <ai_network_outputs_get+0x2c>)
 8003cfa:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a06      	ldr	r2, [pc, #24]	; (8003d18 <ai_network_outputs_get+0x30>)
 8003d00:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8003d02:	6839      	ldr	r1, [r7, #0]
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 fe03 	bl	8004910 <ai_platform_outputs_get>
 8003d0a:	4603      	mov	r3, r0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3708      	adds	r7, #8
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	20000638 	.word	0x20000638
 8003d18:	a1c00100 	.word	0xa1c00100

08003d1c <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8003d26:	6839      	ldr	r1, [r7, #0]
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 ff97 	bl	8004c5c <ai_platform_network_init>
 8003d2e:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <ai_network_init+0x1e>
 8003d36:	2300      	movs	r3, #0
 8003d38:	e028      	b.n	8003d8c <ai_network_init+0x70>

  ai_bool ok = true;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 8003d3e:	6839      	ldr	r1, [r7, #0]
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f7ff fe97 	bl	8003a74 <network_configure_weights>
 8003d46:	4603      	mov	r3, r0
 8003d48:	461a      	mov	r2, r3
 8003d4a:	7afb      	ldrb	r3, [r7, #11]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	bf14      	ite	ne
 8003d52:	2301      	movne	r3, #1
 8003d54:	2300      	moveq	r3, #0
 8003d56:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8003d58:	6839      	ldr	r1, [r7, #0]
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f7ff fe1a 	bl	8003994 <network_configure_activations>
 8003d60:	4603      	mov	r3, r0
 8003d62:	461a      	mov	r2, r3
 8003d64:	7afb      	ldrb	r3, [r7, #11]
 8003d66:	4013      	ands	r3, r2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	bf14      	ite	ne
 8003d6c:	2301      	movne	r3, #1
 8003d6e:	2300      	moveq	r3, #0
 8003d70:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f001 f860 	bl	8004e38 <ai_platform_network_post_init>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	7afb      	ldrb	r3, [r7, #11]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	bf14      	ite	ne
 8003d84:	2301      	movne	r3, #1
 8003d86:	2300      	moveq	r3, #0
 8003d88:	72fb      	strb	r3, [r7, #11]

  return ok;
 8003d8a:	7afb      	ldrb	r3, [r7, #11]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	68b9      	ldr	r1, [r7, #8]
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f001 f8cf 	bl	8004f48 <ai_platform_network_process>
 8003daa:	4603      	mov	r3, r0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <ai_network_data_params_get+0x12>
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	e016      	b.n	8003df4 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8003dc6:	4a0d      	ldr	r2, [pc, #52]	; (8003dfc <ai_network_data_params_get+0x48>)
 8003dc8:	f107 0310 	add.w	r3, r7, #16
 8003dcc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003dd0:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8003dd4:	4a0a      	ldr	r2, [pc, #40]	; (8003e00 <ai_network_data_params_get+0x4c>)
 8003dd6:	f107 0308 	add.w	r3, r7, #8
 8003dda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003dde:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8003de2:	f107 0210 	add.w	r2, r7, #16
 8003de6:	f107 0308 	add.w	r3, r7, #8
 8003dea:	4619      	mov	r1, r3
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 fc23 	bl	8004638 <ai_platform_bind_network_params>
 8003df2:	4603      	mov	r3, r0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3718      	adds	r7, #24
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	0800d664 	.word	0x0800d664
 8003e00:	0800d66c 	.word	0x0800d66c

08003e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e0a:	4b0f      	ldr	r3, [pc, #60]	; (8003e48 <HAL_MspInit+0x44>)
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	4a0e      	ldr	r2, [pc, #56]	; (8003e48 <HAL_MspInit+0x44>)
 8003e10:	f043 0301 	orr.w	r3, r3, #1
 8003e14:	6193      	str	r3, [r2, #24]
 8003e16:	4b0c      	ldr	r3, [pc, #48]	; (8003e48 <HAL_MspInit+0x44>)
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	607b      	str	r3, [r7, #4]
 8003e20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e22:	4b09      	ldr	r3, [pc, #36]	; (8003e48 <HAL_MspInit+0x44>)
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	4a08      	ldr	r2, [pc, #32]	; (8003e48 <HAL_MspInit+0x44>)
 8003e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e2c:	61d3      	str	r3, [r2, #28]
 8003e2e:	4b06      	ldr	r3, [pc, #24]	; (8003e48 <HAL_MspInit+0x44>)
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e36:	603b      	str	r3, [r7, #0]
 8003e38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	40021000 	.word	0x40021000

08003e4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e50:	e7fe      	b.n	8003e50 <NMI_Handler+0x4>

08003e52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e52:	b480      	push	{r7}
 8003e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e56:	e7fe      	b.n	8003e56 <HardFault_Handler+0x4>

08003e58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e5c:	e7fe      	b.n	8003e5c <MemManage_Handler+0x4>

08003e5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e62:	e7fe      	b.n	8003e62 <BusFault_Handler+0x4>

08003e64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e68:	e7fe      	b.n	8003e68 <UsageFault_Handler+0x4>

08003e6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e6e:	bf00      	nop
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e7c:	bf00      	nop
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e86:	b480      	push	{r7}
 8003e88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e8a:	bf00      	nop
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e98:	f7fc ffa6 	bl	8000de8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e9c:	bf00      	nop
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003ea4:	bf00      	nop
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	af00      	add	r7, sp, #0
  return 1;
 8003eb2:	2301      	movs	r3, #1
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <_kill>:

int _kill(int pid, int sig)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b082      	sub	sp, #8
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
 8003ec6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003ec8:	f005 fbb4 	bl	8009634 <__errno>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2216      	movs	r2, #22
 8003ed0:	601a      	str	r2, [r3, #0]
  return -1;
 8003ed2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <_exit>:

void _exit (int status)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b082      	sub	sp, #8
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003ee6:	f04f 31ff 	mov.w	r1, #4294967295
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7ff ffe7 	bl	8003ebe <_kill>
  while (1) {}    /* Make sure we hang here */
 8003ef0:	e7fe      	b.n	8003ef0 <_exit+0x12>

08003ef2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b086      	sub	sp, #24
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	60f8      	str	r0, [r7, #12]
 8003efa:	60b9      	str	r1, [r7, #8]
 8003efc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003efe:	2300      	movs	r3, #0
 8003f00:	617b      	str	r3, [r7, #20]
 8003f02:	e00a      	b.n	8003f1a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003f04:	f000 fa5c 	bl	80043c0 <__io_getchar>
 8003f08:	4601      	mov	r1, r0
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	1c5a      	adds	r2, r3, #1
 8003f0e:	60ba      	str	r2, [r7, #8]
 8003f10:	b2ca      	uxtb	r2, r1
 8003f12:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	3301      	adds	r3, #1
 8003f18:	617b      	str	r3, [r7, #20]
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	dbf0      	blt.n	8003f04 <_read+0x12>
  }

  return len;
 8003f22:	687b      	ldr	r3, [r7, #4]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3718      	adds	r7, #24
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f38:	2300      	movs	r3, #0
 8003f3a:	617b      	str	r3, [r7, #20]
 8003f3c:	e009      	b.n	8003f52 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	60ba      	str	r2, [r7, #8]
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 fa28 	bl	800439c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	617b      	str	r3, [r7, #20]
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	dbf1      	blt.n	8003f3e <_write+0x12>
  }
  return len;
 8003f5a:	687b      	ldr	r3, [r7, #4]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3718      	adds	r7, #24
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <_close>:

int _close(int file)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003f6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f8c:	605a      	str	r2, [r3, #4]
  return 0;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <_isatty>:

int _isatty(int file)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003fa4:	2301      	movs	r3, #1
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b085      	sub	sp, #20
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	60f8      	str	r0, [r7, #12]
 8003fba:	60b9      	str	r1, [r7, #8]
 8003fbc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3714      	adds	r7, #20
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003fd4:	4a14      	ldr	r2, [pc, #80]	; (8004028 <_sbrk+0x5c>)
 8003fd6:	4b15      	ldr	r3, [pc, #84]	; (800402c <_sbrk+0x60>)
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003fe0:	4b13      	ldr	r3, [pc, #76]	; (8004030 <_sbrk+0x64>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d102      	bne.n	8003fee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003fe8:	4b11      	ldr	r3, [pc, #68]	; (8004030 <_sbrk+0x64>)
 8003fea:	4a12      	ldr	r2, [pc, #72]	; (8004034 <_sbrk+0x68>)
 8003fec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003fee:	4b10      	ldr	r3, [pc, #64]	; (8004030 <_sbrk+0x64>)
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d207      	bcs.n	800400c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ffc:	f005 fb1a 	bl	8009634 <__errno>
 8004000:	4603      	mov	r3, r0
 8004002:	220c      	movs	r2, #12
 8004004:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004006:	f04f 33ff 	mov.w	r3, #4294967295
 800400a:	e009      	b.n	8004020 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800400c:	4b08      	ldr	r3, [pc, #32]	; (8004030 <_sbrk+0x64>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004012:	4b07      	ldr	r3, [pc, #28]	; (8004030 <_sbrk+0x64>)
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4413      	add	r3, r2
 800401a:	4a05      	ldr	r2, [pc, #20]	; (8004030 <_sbrk+0x64>)
 800401c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800401e:	68fb      	ldr	r3, [r7, #12]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3718      	adds	r7, #24
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	20003000 	.word	0x20003000
 800402c:	00000500 	.word	0x00000500
 8004030:	2000260c 	.word	0x2000260c
 8004034:	200027e8 	.word	0x200027e8

08004038 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800403c:	4b06      	ldr	r3, [pc, #24]	; (8004058 <SystemInit+0x20>)
 800403e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004042:	4a05      	ldr	r2, [pc, #20]	; (8004058 <SystemInit+0x20>)
 8004044:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004048:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800404c:	bf00      	nop
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	e000ed00 	.word	0xe000ed00

0800405c <__NVIC_GetPriorityGrouping>:
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004060:	4b04      	ldr	r3, [pc, #16]	; (8004074 <__NVIC_GetPriorityGrouping+0x18>)
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	0a1b      	lsrs	r3, r3, #8
 8004066:	f003 0307 	and.w	r3, r3, #7
}
 800406a:	4618      	mov	r0, r3
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	e000ed00 	.word	0xe000ed00

08004078 <__NVIC_EnableIRQ>:
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	4603      	mov	r3, r0
 8004080:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004086:	2b00      	cmp	r3, #0
 8004088:	db0b      	blt.n	80040a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800408a:	79fb      	ldrb	r3, [r7, #7]
 800408c:	f003 021f 	and.w	r2, r3, #31
 8004090:	4907      	ldr	r1, [pc, #28]	; (80040b0 <__NVIC_EnableIRQ+0x38>)
 8004092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004096:	095b      	lsrs	r3, r3, #5
 8004098:	2001      	movs	r0, #1
 800409a:	fa00 f202 	lsl.w	r2, r0, r2
 800409e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80040a2:	bf00      	nop
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	e000e100 	.word	0xe000e100

080040b4 <__NVIC_SetPriority>:
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	4603      	mov	r3, r0
 80040bc:	6039      	str	r1, [r7, #0]
 80040be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	db0a      	blt.n	80040de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	b2da      	uxtb	r2, r3
 80040cc:	490c      	ldr	r1, [pc, #48]	; (8004100 <__NVIC_SetPriority+0x4c>)
 80040ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040d2:	0112      	lsls	r2, r2, #4
 80040d4:	b2d2      	uxtb	r2, r2
 80040d6:	440b      	add	r3, r1
 80040d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80040dc:	e00a      	b.n	80040f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	4908      	ldr	r1, [pc, #32]	; (8004104 <__NVIC_SetPriority+0x50>)
 80040e4:	79fb      	ldrb	r3, [r7, #7]
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	3b04      	subs	r3, #4
 80040ec:	0112      	lsls	r2, r2, #4
 80040ee:	b2d2      	uxtb	r2, r2
 80040f0:	440b      	add	r3, r1
 80040f2:	761a      	strb	r2, [r3, #24]
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	e000e100 	.word	0xe000e100
 8004104:	e000ed00 	.word	0xe000ed00

08004108 <NVIC_EncodePriority>:
{
 8004108:	b480      	push	{r7}
 800410a:	b089      	sub	sp, #36	; 0x24
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f003 0307 	and.w	r3, r3, #7
 800411a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	f1c3 0307 	rsb	r3, r3, #7
 8004122:	2b04      	cmp	r3, #4
 8004124:	bf28      	it	cs
 8004126:	2304      	movcs	r3, #4
 8004128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	3304      	adds	r3, #4
 800412e:	2b06      	cmp	r3, #6
 8004130:	d902      	bls.n	8004138 <NVIC_EncodePriority+0x30>
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	3b03      	subs	r3, #3
 8004136:	e000      	b.n	800413a <NVIC_EncodePriority+0x32>
 8004138:	2300      	movs	r3, #0
 800413a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800413c:	f04f 32ff 	mov.w	r2, #4294967295
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	fa02 f303 	lsl.w	r3, r2, r3
 8004146:	43da      	mvns	r2, r3
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	401a      	ands	r2, r3
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004150:	f04f 31ff 	mov.w	r1, #4294967295
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	fa01 f303 	lsl.w	r3, r1, r3
 800415a:	43d9      	mvns	r1, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004160:	4313      	orrs	r3, r2
}
 8004162:	4618      	mov	r0, r3
 8004164:	3724      	adds	r7, #36	; 0x24
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <LL_TIM_EnableARRPreload>:
{
 800416e:	b480      	push	{r7}
 8004170:	b083      	sub	sp, #12
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	601a      	str	r2, [r3, #0]
}
 8004182:	bf00      	nop
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <LL_TIM_SetClockSource>:
{
 800418e:	b480      	push	{r7}
 8004190:	b083      	sub	sp, #12
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
 8004196:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80041a0:	f023 0307 	bic.w	r3, r3, #7
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	609a      	str	r2, [r3, #8]
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <LL_TIM_SetTriggerOutput>:
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	431a      	orrs	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	605a      	str	r2, [r3, #4]
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <LL_TIM_DisableMasterSlaveMode>:
{
 80041de:	b480      	push	{r7}
 80041e0:	b083      	sub	sp, #12
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	609a      	str	r2, [r3, #8]
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
	...

08004200 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8004208:	4b08      	ldr	r3, [pc, #32]	; (800422c <LL_APB1_GRP1_EnableClock+0x2c>)
 800420a:	69da      	ldr	r2, [r3, #28]
 800420c:	4907      	ldr	r1, [pc, #28]	; (800422c <LL_APB1_GRP1_EnableClock+0x2c>)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4313      	orrs	r3, r2
 8004212:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8004214:	4b05      	ldr	r3, [pc, #20]	; (800422c <LL_APB1_GRP1_EnableClock+0x2c>)
 8004216:	69da      	ldr	r2, [r3, #28]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4013      	ands	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800421e:	68fb      	ldr	r3, [r7, #12]
}
 8004220:	bf00      	nop
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	40021000 	.word	0x40021000

08004230 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004236:	1d3b      	adds	r3, r7, #4
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	605a      	str	r2, [r3, #4]
 800423e:	609a      	str	r2, [r3, #8]
 8004240:	60da      	str	r2, [r3, #12]
 8004242:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8004244:	2001      	movs	r0, #1
 8004246:	f7ff ffdb 	bl	8004200 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800424a:	f7ff ff07 	bl	800405c <__NVIC_GetPriorityGrouping>
 800424e:	4603      	mov	r3, r0
 8004250:	2200      	movs	r2, #0
 8004252:	2100      	movs	r1, #0
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff ff57 	bl	8004108 <NVIC_EncodePriority>
 800425a:	4603      	mov	r3, r0
 800425c:	4619      	mov	r1, r3
 800425e:	201c      	movs	r0, #28
 8004260:	f7ff ff28 	bl	80040b4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8004264:	201c      	movs	r0, #28
 8004266:	f7ff ff07 	bl	8004078 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 9;
 800426a:	2309      	movs	r3, #9
 800426c:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800426e:	2300      	movs	r3, #0
 8004270:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 5000;
 8004272:	f241 3388 	movw	r3, #5000	; 0x1388
 8004276:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004278:	2300      	movs	r3, #0
 800427a:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 800427c:	1d3b      	adds	r3, r7, #4
 800427e:	4619      	mov	r1, r3
 8004280:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004284:	f7ff f8da 	bl	800343c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM2);
 8004288:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800428c:	f7ff ff6f 	bl	800416e <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8004290:	2100      	movs	r1, #0
 8004292:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004296:	f7ff ff7a 	bl	800418e <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 800429a:	2100      	movs	r1, #0
 800429c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80042a0:	f7ff ff8a 	bl	80041b8 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 80042a4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80042a8:	f7ff ff99 	bl	80041de <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80042ac:	bf00      	nop
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80042b8:	4b14      	ldr	r3, [pc, #80]	; (800430c <MX_USART2_UART_Init+0x58>)
 80042ba:	4a15      	ldr	r2, [pc, #84]	; (8004310 <MX_USART2_UART_Init+0x5c>)
 80042bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80042be:	4b13      	ldr	r3, [pc, #76]	; (800430c <MX_USART2_UART_Init+0x58>)
 80042c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80042c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80042c6:	4b11      	ldr	r3, [pc, #68]	; (800430c <MX_USART2_UART_Init+0x58>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80042cc:	4b0f      	ldr	r3, [pc, #60]	; (800430c <MX_USART2_UART_Init+0x58>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80042d2:	4b0e      	ldr	r3, [pc, #56]	; (800430c <MX_USART2_UART_Init+0x58>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80042d8:	4b0c      	ldr	r3, [pc, #48]	; (800430c <MX_USART2_UART_Init+0x58>)
 80042da:	220c      	movs	r2, #12
 80042dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS;
 80042de:	4b0b      	ldr	r3, [pc, #44]	; (800430c <MX_USART2_UART_Init+0x58>)
 80042e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042e4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80042e6:	4b09      	ldr	r3, [pc, #36]	; (800430c <MX_USART2_UART_Init+0x58>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80042ec:	4b07      	ldr	r3, [pc, #28]	; (800430c <MX_USART2_UART_Init+0x58>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80042f2:	4b06      	ldr	r3, [pc, #24]	; (800430c <MX_USART2_UART_Init+0x58>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80042f8:	4804      	ldr	r0, [pc, #16]	; (800430c <MX_USART2_UART_Init+0x58>)
 80042fa:	f7fe fb77 	bl	80029ec <HAL_UART_Init>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
 8004304:	f7ff fb41 	bl	800398a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004308:	bf00      	nop
 800430a:	bd80      	pop	{r7, pc}
 800430c:	20002610 	.word	0x20002610
 8004310:	40004400 	.word	0x40004400

08004314 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b08a      	sub	sp, #40	; 0x28
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800431c:	f107 0314 	add.w	r3, r7, #20
 8004320:	2200      	movs	r2, #0
 8004322:	601a      	str	r2, [r3, #0]
 8004324:	605a      	str	r2, [r3, #4]
 8004326:	609a      	str	r2, [r3, #8]
 8004328:	60da      	str	r2, [r3, #12]
 800432a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a18      	ldr	r2, [pc, #96]	; (8004394 <HAL_UART_MspInit+0x80>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d129      	bne.n	800438a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004336:	4b18      	ldr	r3, [pc, #96]	; (8004398 <HAL_UART_MspInit+0x84>)
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	4a17      	ldr	r2, [pc, #92]	; (8004398 <HAL_UART_MspInit+0x84>)
 800433c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004340:	61d3      	str	r3, [r2, #28]
 8004342:	4b15      	ldr	r3, [pc, #84]	; (8004398 <HAL_UART_MspInit+0x84>)
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434a:	613b      	str	r3, [r7, #16]
 800434c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800434e:	4b12      	ldr	r3, [pc, #72]	; (8004398 <HAL_UART_MspInit+0x84>)
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	4a11      	ldr	r2, [pc, #68]	; (8004398 <HAL_UART_MspInit+0x84>)
 8004354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004358:	6153      	str	r3, [r2, #20]
 800435a:	4b0f      	ldr	r3, [pc, #60]	; (8004398 <HAL_UART_MspInit+0x84>)
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004362:	60fb      	str	r3, [r7, #12]
 8004364:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA1     ------> USART2_RTS
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|VCP_TX_Pin|VCP_RX_Pin;
 8004366:	f248 0306 	movw	r3, #32774	; 0x8006
 800436a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800436c:	2302      	movs	r3, #2
 800436e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004370:	2300      	movs	r3, #0
 8004372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004374:	2303      	movs	r3, #3
 8004376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004378:	2307      	movs	r3, #7
 800437a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800437c:	f107 0314 	add.w	r3, r7, #20
 8004380:	4619      	mov	r1, r3
 8004382:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004386:	f7fc ff4b 	bl	8001220 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800438a:	bf00      	nop
 800438c:	3728      	adds	r7, #40	; 0x28
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	40004400 	.word	0x40004400
 8004398:	40021000 	.word	0x40021000

0800439c <__io_putchar>:

//#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
//#define GETCHAR_PROTOTYPE int fgetc(FILE *f)

PUTCHAR_PROTOTYPE
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80043a4:	1d39      	adds	r1, r7, #4
 80043a6:	f04f 33ff 	mov.w	r3, #4294967295
 80043aa:	2201      	movs	r2, #1
 80043ac:	4803      	ldr	r0, [pc, #12]	; (80043bc <__io_putchar+0x20>)
 80043ae:	f7fe fb6b 	bl	8002a88 <HAL_UART_Transmit>
  return ch;
 80043b2:	687b      	ldr	r3, [r7, #4]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	20002610 	.word	0x20002610

080043c0 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 80043c6:	2300      	movs	r3, #0
 80043c8:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart2);
 80043ca:	4b08      	ldr	r3, [pc, #32]	; (80043ec <__io_getchar+0x2c>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2208      	movs	r2, #8
 80043d0:	621a      	str	r2, [r3, #32]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80043d2:	1df9      	adds	r1, r7, #7
 80043d4:	f04f 33ff 	mov.w	r3, #4294967295
 80043d8:	2201      	movs	r2, #1
 80043da:	4804      	ldr	r0, [pc, #16]	; (80043ec <__io_getchar+0x2c>)
 80043dc:	f7fe fbde 	bl	8002b9c <HAL_UART_Receive>
//  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
  return ch;
 80043e0:	79fb      	ldrb	r3, [r7, #7]
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	20002610 	.word	0x20002610

080043f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80043f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004428 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80043f4:	f7ff fe20 	bl	8004038 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80043f8:	480c      	ldr	r0, [pc, #48]	; (800442c <LoopForever+0x6>)
  ldr r1, =_edata
 80043fa:	490d      	ldr	r1, [pc, #52]	; (8004430 <LoopForever+0xa>)
  ldr r2, =_sidata
 80043fc:	4a0d      	ldr	r2, [pc, #52]	; (8004434 <LoopForever+0xe>)
  movs r3, #0
 80043fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004400:	e002      	b.n	8004408 <LoopCopyDataInit>

08004402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004406:	3304      	adds	r3, #4

08004408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800440a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800440c:	d3f9      	bcc.n	8004402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800440e:	4a0a      	ldr	r2, [pc, #40]	; (8004438 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004410:	4c0a      	ldr	r4, [pc, #40]	; (800443c <LoopForever+0x16>)
  movs r3, #0
 8004412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004414:	e001      	b.n	800441a <LoopFillZerobss>

08004416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004418:	3204      	adds	r2, #4

0800441a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800441a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800441c:	d3fb      	bcc.n	8004416 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800441e:	f005 f90f 	bl	8009640 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004422:	f7ff f991 	bl	8003748 <main>

08004426 <LoopForever>:

LoopForever:
    b LoopForever
 8004426:	e7fe      	b.n	8004426 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004428:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800442c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004430:	200008a8 	.word	0x200008a8
  ldr r2, =_sidata
 8004434:	0800e188 	.word	0x0800e188
  ldr r2, =_sbss
 8004438:	200008c0 	.word	0x200008c0
  ldr r4, =_ebss
 800443c:	200027e4 	.word	0x200027e4

08004440 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004440:	e7fe      	b.n	8004440 <ADC1_2_IRQHandler>
	...

08004444 <ai_buffer_get_size>:
 8004444:	b378      	cbz	r0, 80044a6 <ai_buffer_get_size+0x62>
 8004446:	b410      	push	{r4}
 8004448:	6803      	ldr	r3, [r0, #0]
 800444a:	4a17      	ldr	r2, [pc, #92]	; (80044a8 <ai_buffer_get_size+0x64>)
 800444c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004450:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004454:	4293      	cmp	r3, r2
 8004456:	d01e      	beq.n	8004496 <ai_buffer_get_size+0x52>
 8004458:	6984      	ldr	r4, [r0, #24]
 800445a:	6862      	ldr	r2, [r4, #4]
 800445c:	7d03      	ldrb	r3, [r0, #20]
 800445e:	6941      	ldr	r1, [r0, #20]
 8004460:	f1a3 0301 	sub.w	r3, r3, #1
 8004464:	fab3 f383 	clz	r3, r3
 8004468:	095b      	lsrs	r3, r3, #5
 800446a:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800446e:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8004472:	da0b      	bge.n	800448c <ai_buffer_get_size+0x48>
 8004474:	2b01      	cmp	r3, #1
 8004476:	d102      	bne.n	800447e <ai_buffer_get_size+0x3a>
 8004478:	2802      	cmp	r0, #2
 800447a:	d007      	beq.n	800448c <ai_buffer_get_size+0x48>
 800447c:	2302      	movs	r3, #2
 800447e:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8004482:	3301      	adds	r3, #1
 8004484:	4298      	cmp	r0, r3
 8004486:	fb01 f202 	mul.w	r2, r1, r2
 800448a:	d1f3      	bne.n	8004474 <ai_buffer_get_size+0x30>
 800448c:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8004490:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	2900      	cmp	r1, #0
 8004498:	d0de      	beq.n	8004458 <ai_buffer_get_size+0x14>
 800449a:	6984      	ldr	r4, [r0, #24]
 800449c:	6863      	ldr	r3, [r4, #4]
 800449e:	331f      	adds	r3, #31
 80044a0:	f023 021f 	bic.w	r2, r3, #31
 80044a4:	e7da      	b.n	800445c <ai_buffer_get_size+0x18>
 80044a6:	4770      	bx	lr
 80044a8:	000400c0 	.word	0x000400c0

080044ac <ai_buffer_array_sane>:
 80044ac:	b138      	cbz	r0, 80044be <ai_buffer_array_sane+0x12>
 80044ae:	6843      	ldr	r3, [r0, #4]
 80044b0:	b123      	cbz	r3, 80044bc <ai_buffer_array_sane+0x10>
 80044b2:	8840      	ldrh	r0, [r0, #2]
 80044b4:	3800      	subs	r0, #0
 80044b6:	bf18      	it	ne
 80044b8:	2001      	movne	r0, #1
 80044ba:	4770      	bx	lr
 80044bc:	4618      	mov	r0, r3
 80044be:	4770      	bx	lr

080044c0 <ai_buffer_array_item_set_address>:
 80044c0:	b150      	cbz	r0, 80044d8 <ai_buffer_array_item_set_address+0x18>
 80044c2:	6843      	ldr	r3, [r0, #4]
 80044c4:	b14b      	cbz	r3, 80044da <ai_buffer_array_item_set_address+0x1a>
 80044c6:	8840      	ldrh	r0, [r0, #2]
 80044c8:	b900      	cbnz	r0, 80044cc <ai_buffer_array_item_set_address+0xc>
 80044ca:	4770      	bx	lr
 80044cc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80044d0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80044d4:	2001      	movs	r0, #1
 80044d6:	604a      	str	r2, [r1, #4]
 80044d8:	4770      	bx	lr
 80044da:	4618      	mov	r0, r3
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop

080044e0 <_ai_platform_acquire_crc>:
 80044e0:	2001      	movs	r0, #1
 80044e2:	4770      	bx	lr

080044e4 <_ai_platform_release_crc>:
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop

080044e8 <ai_platform_get_weights_map>:
 80044e8:	2a00      	cmp	r2, #0
 80044ea:	d037      	beq.n	800455c <ai_platform_get_weights_map+0x74>
 80044ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ee:	4604      	mov	r4, r0
 80044f0:	b1a0      	cbz	r0, 800451c <ai_platform_get_weights_map+0x34>
 80044f2:	460f      	mov	r7, r1
 80044f4:	b191      	cbz	r1, 800451c <ai_platform_get_weights_map+0x34>
 80044f6:	4b25      	ldr	r3, [pc, #148]	; (800458c <ai_platform_get_weights_map+0xa4>)
 80044f8:	6810      	ldr	r0, [r2, #0]
 80044fa:	4298      	cmp	r0, r3
 80044fc:	4615      	mov	r5, r2
 80044fe:	d00f      	beq.n	8004520 <ai_platform_get_weights_map+0x38>
 8004500:	6855      	ldr	r5, [r2, #4]
 8004502:	b15d      	cbz	r5, 800451c <ai_platform_get_weights_map+0x34>
 8004504:	682e      	ldr	r6, [r5, #0]
 8004506:	429e      	cmp	r6, r3
 8004508:	d02a      	beq.n	8004560 <ai_platform_get_weights_map+0x78>
 800450a:	f1a1 0001 	sub.w	r0, r1, #1
 800450e:	6025      	str	r5, [r4, #0]
 8004510:	fab0 f080 	clz	r0, r0
 8004514:	0940      	lsrs	r0, r0, #5
 8004516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004518:	42a7      	cmp	r7, r4
 800451a:	d034      	beq.n	8004586 <ai_platform_get_weights_map+0x9e>
 800451c:	2000      	movs	r0, #0
 800451e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004520:	1d10      	adds	r0, r2, #4
 8004522:	f7ff ffc3 	bl	80044ac <ai_buffer_array_sane>
 8004526:	2800      	cmp	r0, #0
 8004528:	d0f8      	beq.n	800451c <ai_platform_get_weights_map+0x34>
 800452a:	88eb      	ldrh	r3, [r5, #6]
 800452c:	429f      	cmp	r7, r3
 800452e:	d1f5      	bne.n	800451c <ai_platform_get_weights_map+0x34>
 8004530:	f04f 0e00 	mov.w	lr, #0
 8004534:	1f23      	subs	r3, r4, #4
 8004536:	4670      	mov	r0, lr
 8004538:	68aa      	ldr	r2, [r5, #8]
 800453a:	eb02 0c0e 	add.w	ip, r2, lr
 800453e:	f10e 0e1c 	add.w	lr, lr, #28
 8004542:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8004546:	b124      	cbz	r4, 8004552 <ai_platform_get_weights_map+0x6a>
 8004548:	3001      	adds	r0, #1
 800454a:	4287      	cmp	r7, r0
 800454c:	f843 4f04 	str.w	r4, [r3, #4]!
 8004550:	d1f2      	bne.n	8004538 <ai_platform_get_weights_map+0x50>
 8004552:	1a38      	subs	r0, r7, r0
 8004554:	fab0 f080 	clz	r0, r0
 8004558:	0940      	lsrs	r0, r0, #5
 800455a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800455c:	2000      	movs	r0, #0
 800455e:	4770      	bx	lr
 8004560:	1f23      	subs	r3, r4, #4
 8004562:	4628      	mov	r0, r5
 8004564:	2400      	movs	r4, #0
 8004566:	e000      	b.n	800456a <ai_platform_get_weights_map+0x82>
 8004568:	4614      	mov	r4, r2
 800456a:	f850 2f04 	ldr.w	r2, [r0, #4]!
 800456e:	42b2      	cmp	r2, r6
 8004570:	d0d2      	beq.n	8004518 <ai_platform_get_weights_map+0x30>
 8004572:	f843 2f04 	str.w	r2, [r3, #4]!
 8004576:	1c62      	adds	r2, r4, #1
 8004578:	4297      	cmp	r7, r2
 800457a:	d1f5      	bne.n	8004568 <ai_platform_get_weights_map+0x80>
 800457c:	3402      	adds	r4, #2
 800457e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8004582:	42b3      	cmp	r3, r6
 8004584:	d1ca      	bne.n	800451c <ai_platform_get_weights_map+0x34>
 8004586:	2001      	movs	r0, #1
 8004588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800458a:	bf00      	nop
 800458c:	a1facade 	.word	0xa1facade

08004590 <ai_platform_get_activations_map>:
 8004590:	2a00      	cmp	r2, #0
 8004592:	d038      	beq.n	8004606 <ai_platform_get_activations_map+0x76>
 8004594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004596:	4604      	mov	r4, r0
 8004598:	b1a0      	cbz	r0, 80045c4 <ai_platform_get_activations_map+0x34>
 800459a:	460f      	mov	r7, r1
 800459c:	b191      	cbz	r1, 80045c4 <ai_platform_get_activations_map+0x34>
 800459e:	4b25      	ldr	r3, [pc, #148]	; (8004634 <ai_platform_get_activations_map+0xa4>)
 80045a0:	6810      	ldr	r0, [r2, #0]
 80045a2:	4298      	cmp	r0, r3
 80045a4:	4615      	mov	r5, r2
 80045a6:	d00f      	beq.n	80045c8 <ai_platform_get_activations_map+0x38>
 80045a8:	6a15      	ldr	r5, [r2, #32]
 80045aa:	b15d      	cbz	r5, 80045c4 <ai_platform_get_activations_map+0x34>
 80045ac:	682e      	ldr	r6, [r5, #0]
 80045ae:	429e      	cmp	r6, r3
 80045b0:	d02b      	beq.n	800460a <ai_platform_get_activations_map+0x7a>
 80045b2:	f1a1 0001 	sub.w	r0, r1, #1
 80045b6:	6025      	str	r5, [r4, #0]
 80045b8:	fab0 f080 	clz	r0, r0
 80045bc:	0940      	lsrs	r0, r0, #5
 80045be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045c0:	42a7      	cmp	r7, r4
 80045c2:	d035      	beq.n	8004630 <ai_platform_get_activations_map+0xa0>
 80045c4:	2000      	movs	r0, #0
 80045c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045c8:	f102 000c 	add.w	r0, r2, #12
 80045cc:	f7ff ff6e 	bl	80044ac <ai_buffer_array_sane>
 80045d0:	2800      	cmp	r0, #0
 80045d2:	d0f7      	beq.n	80045c4 <ai_platform_get_activations_map+0x34>
 80045d4:	89eb      	ldrh	r3, [r5, #14]
 80045d6:	429f      	cmp	r7, r3
 80045d8:	d1f4      	bne.n	80045c4 <ai_platform_get_activations_map+0x34>
 80045da:	f04f 0e00 	mov.w	lr, #0
 80045de:	1f23      	subs	r3, r4, #4
 80045e0:	4670      	mov	r0, lr
 80045e2:	692a      	ldr	r2, [r5, #16]
 80045e4:	eb02 0c0e 	add.w	ip, r2, lr
 80045e8:	f10e 0e1c 	add.w	lr, lr, #28
 80045ec:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80045f0:	b124      	cbz	r4, 80045fc <ai_platform_get_activations_map+0x6c>
 80045f2:	3001      	adds	r0, #1
 80045f4:	4287      	cmp	r7, r0
 80045f6:	f843 4f04 	str.w	r4, [r3, #4]!
 80045fa:	d1f2      	bne.n	80045e2 <ai_platform_get_activations_map+0x52>
 80045fc:	1a38      	subs	r0, r7, r0
 80045fe:	fab0 f080 	clz	r0, r0
 8004602:	0940      	lsrs	r0, r0, #5
 8004604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004606:	2000      	movs	r0, #0
 8004608:	4770      	bx	lr
 800460a:	1f23      	subs	r3, r4, #4
 800460c:	4628      	mov	r0, r5
 800460e:	2400      	movs	r4, #0
 8004610:	e000      	b.n	8004614 <ai_platform_get_activations_map+0x84>
 8004612:	4614      	mov	r4, r2
 8004614:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8004618:	42b2      	cmp	r2, r6
 800461a:	d0d1      	beq.n	80045c0 <ai_platform_get_activations_map+0x30>
 800461c:	f843 2f04 	str.w	r2, [r3, #4]!
 8004620:	1c62      	adds	r2, r4, #1
 8004622:	4297      	cmp	r7, r2
 8004624:	d1f5      	bne.n	8004612 <ai_platform_get_activations_map+0x82>
 8004626:	3402      	adds	r4, #2
 8004628:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800462c:	42b3      	cmp	r3, r6
 800462e:	d1c9      	bne.n	80045c4 <ai_platform_get_activations_map+0x34>
 8004630:	2001      	movs	r0, #1
 8004632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004634:	a1facade 	.word	0xa1facade

08004638 <ai_platform_bind_network_params>:
 8004638:	b1a0      	cbz	r0, 8004664 <ai_platform_bind_network_params+0x2c>
 800463a:	b1b1      	cbz	r1, 800466a <ai_platform_bind_network_params+0x32>
 800463c:	b1c2      	cbz	r2, 8004670 <ai_platform_bind_network_params+0x38>
 800463e:	b410      	push	{r4}
 8004640:	4603      	mov	r3, r0
 8004642:	4c0d      	ldr	r4, [pc, #52]	; (8004678 <ai_platform_bind_network_params+0x40>)
 8004644:	f843 4b04 	str.w	r4, [r3], #4
 8004648:	f100 0c0c 	add.w	ip, r0, #12
 800464c:	c903      	ldmia	r1, {r0, r1}
 800464e:	e883 0003 	stmia.w	r3, {r0, r1}
 8004652:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004656:	e88c 0003 	stmia.w	ip, {r0, r1}
 800465a:	2301      	movs	r3, #1
 800465c:	4618      	mov	r0, r3
 800465e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004662:	4770      	bx	lr
 8004664:	4603      	mov	r3, r0
 8004666:	4618      	mov	r0, r3
 8004668:	4770      	bx	lr
 800466a:	460b      	mov	r3, r1
 800466c:	4618      	mov	r0, r3
 800466e:	4770      	bx	lr
 8004670:	4613      	mov	r3, r2
 8004672:	4618      	mov	r0, r3
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	a1facade 	.word	0xa1facade

0800467c <ai_platform_network_get_error>:
 800467c:	b510      	push	{r4, lr}
 800467e:	b1f0      	cbz	r0, 80046be <ai_platform_network_get_error+0x42>
 8004680:	4b2f      	ldr	r3, [pc, #188]	; (8004740 <ai_platform_network_get_error+0xc4>)
 8004682:	6802      	ldr	r2, [r0, #0]
 8004684:	429a      	cmp	r2, r3
 8004686:	4604      	mov	r4, r0
 8004688:	d119      	bne.n	80046be <ai_platform_network_get_error+0x42>
 800468a:	f7ff ff29 	bl	80044e0 <_ai_platform_acquire_crc>
 800468e:	4b2d      	ldr	r3, [pc, #180]	; (8004744 <ai_platform_network_get_error+0xc8>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800469a:	d03c      	beq.n	8004716 <ai_platform_network_get_error+0x9a>
 800469c:	4a2a      	ldr	r2, [pc, #168]	; (8004748 <ai_platform_network_get_error+0xcc>)
 800469e:	2301      	movs	r3, #1
 80046a0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80046a4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1fb      	bne.n	80046a4 <ai_platform_network_get_error+0x28>
 80046ac:	4b27      	ldr	r3, [pc, #156]	; (800474c <ai_platform_network_get_error+0xd0>)
 80046ae:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80046b2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80046b6:	4b26      	ldr	r3, [pc, #152]	; (8004750 <ai_platform_network_get_error+0xd4>)
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d038      	beq.n	800472e <ai_platform_network_get_error+0xb2>
 80046bc:	e7fe      	b.n	80046bc <ai_platform_network_get_error+0x40>
 80046be:	f7ff ff0f 	bl	80044e0 <_ai_platform_acquire_crc>
 80046c2:	4b20      	ldr	r3, [pc, #128]	; (8004744 <ai_platform_network_get_error+0xc8>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ce:	d010      	beq.n	80046f2 <ai_platform_network_get_error+0x76>
 80046d0:	4a1d      	ldr	r2, [pc, #116]	; (8004748 <ai_platform_network_get_error+0xcc>)
 80046d2:	2301      	movs	r3, #1
 80046d4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80046d8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1fb      	bne.n	80046d8 <ai_platform_network_get_error+0x5c>
 80046e0:	4b1a      	ldr	r3, [pc, #104]	; (800474c <ai_platform_network_get_error+0xd0>)
 80046e2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80046e6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80046ea:	4b19      	ldr	r3, [pc, #100]	; (8004750 <ai_platform_network_get_error+0xd4>)
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d00d      	beq.n	800470c <ai_platform_network_get_error+0x90>
 80046f0:	e7fe      	b.n	80046f0 <ai_platform_network_get_error+0x74>
 80046f2:	4a18      	ldr	r2, [pc, #96]	; (8004754 <ai_platform_network_get_error+0xd8>)
 80046f4:	2301      	movs	r3, #1
 80046f6:	6093      	str	r3, [r2, #8]
 80046f8:	6893      	ldr	r3, [r2, #8]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1fc      	bne.n	80046f8 <ai_platform_network_get_error+0x7c>
 80046fe:	4b13      	ldr	r3, [pc, #76]	; (800474c <ai_platform_network_get_error+0xd0>)
 8004700:	6013      	str	r3, [r2, #0]
 8004702:	6812      	ldr	r2, [r2, #0]
 8004704:	4b12      	ldr	r3, [pc, #72]	; (8004750 <ai_platform_network_get_error+0xd4>)
 8004706:	429a      	cmp	r2, r3
 8004708:	d000      	beq.n	800470c <ai_platform_network_get_error+0x90>
 800470a:	e7fe      	b.n	800470a <ai_platform_network_get_error+0x8e>
 800470c:	f7ff feea 	bl	80044e4 <_ai_platform_release_crc>
 8004710:	f241 0010 	movw	r0, #4112	; 0x1010
 8004714:	bd10      	pop	{r4, pc}
 8004716:	4a0f      	ldr	r2, [pc, #60]	; (8004754 <ai_platform_network_get_error+0xd8>)
 8004718:	2301      	movs	r3, #1
 800471a:	6093      	str	r3, [r2, #8]
 800471c:	6893      	ldr	r3, [r2, #8]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1fc      	bne.n	800471c <ai_platform_network_get_error+0xa0>
 8004722:	4b0a      	ldr	r3, [pc, #40]	; (800474c <ai_platform_network_get_error+0xd0>)
 8004724:	6013      	str	r3, [r2, #0]
 8004726:	6812      	ldr	r2, [r2, #0]
 8004728:	4b09      	ldr	r3, [pc, #36]	; (8004750 <ai_platform_network_get_error+0xd4>)
 800472a:	429a      	cmp	r2, r3
 800472c:	d107      	bne.n	800473e <ai_platform_network_get_error+0xc2>
 800472e:	f7ff fed9 	bl	80044e4 <_ai_platform_release_crc>
 8004732:	f104 0010 	add.w	r0, r4, #16
 8004736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800473a:	f000 be8b 	b.w	8005454 <core_get_error>
 800473e:	e7fe      	b.n	800473e <ai_platform_network_get_error+0xc2>
 8004740:	a1c00100 	.word	0xa1c00100
 8004744:	e0042000 	.word	0xe0042000
 8004748:	58024000 	.word	0x58024000
 800474c:	f407a5c2 	.word	0xf407a5c2
 8004750:	b5e8b5cd 	.word	0xb5e8b5cd
 8004754:	40023000 	.word	0x40023000

08004758 <ai_platform_network_set_error>:
 8004758:	b110      	cbz	r0, 8004760 <ai_platform_network_set_error+0x8>
 800475a:	3010      	adds	r0, #16
 800475c:	f000 be80 	b.w	8005460 <core_set_error>
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop

08004764 <ai_platform_inputs_get>:
 8004764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004768:	b085      	sub	sp, #20
 800476a:	9102      	str	r1, [sp, #8]
 800476c:	b1f0      	cbz	r0, 80047ac <ai_platform_inputs_get+0x48>
 800476e:	4b62      	ldr	r3, [pc, #392]	; (80048f8 <ai_platform_inputs_get+0x194>)
 8004770:	6802      	ldr	r2, [r0, #0]
 8004772:	429a      	cmp	r2, r3
 8004774:	4607      	mov	r7, r0
 8004776:	d119      	bne.n	80047ac <ai_platform_inputs_get+0x48>
 8004778:	f7ff feb2 	bl	80044e0 <_ai_platform_acquire_crc>
 800477c:	4b5f      	ldr	r3, [pc, #380]	; (80048fc <ai_platform_inputs_get+0x198>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004784:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004788:	d03d      	beq.n	8004806 <ai_platform_inputs_get+0xa2>
 800478a:	4a5d      	ldr	r2, [pc, #372]	; (8004900 <ai_platform_inputs_get+0x19c>)
 800478c:	2301      	movs	r3, #1
 800478e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004792:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1fb      	bne.n	8004792 <ai_platform_inputs_get+0x2e>
 800479a:	4b5a      	ldr	r3, [pc, #360]	; (8004904 <ai_platform_inputs_get+0x1a0>)
 800479c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80047a0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80047a4:	4b58      	ldr	r3, [pc, #352]	; (8004908 <ai_platform_inputs_get+0x1a4>)
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d039      	beq.n	800481e <ai_platform_inputs_get+0xba>
 80047aa:	e7fe      	b.n	80047aa <ai_platform_inputs_get+0x46>
 80047ac:	f7ff fe98 	bl	80044e0 <_ai_platform_acquire_crc>
 80047b0:	4b52      	ldr	r3, [pc, #328]	; (80048fc <ai_platform_inputs_get+0x198>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047bc:	d010      	beq.n	80047e0 <ai_platform_inputs_get+0x7c>
 80047be:	4a50      	ldr	r2, [pc, #320]	; (8004900 <ai_platform_inputs_get+0x19c>)
 80047c0:	2301      	movs	r3, #1
 80047c2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80047c6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1fb      	bne.n	80047c6 <ai_platform_inputs_get+0x62>
 80047ce:	4b4d      	ldr	r3, [pc, #308]	; (8004904 <ai_platform_inputs_get+0x1a0>)
 80047d0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80047d4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80047d8:	4b4b      	ldr	r3, [pc, #300]	; (8004908 <ai_platform_inputs_get+0x1a4>)
 80047da:	429a      	cmp	r2, r3
 80047dc:	d00d      	beq.n	80047fa <ai_platform_inputs_get+0x96>
 80047de:	e7fe      	b.n	80047de <ai_platform_inputs_get+0x7a>
 80047e0:	4a4a      	ldr	r2, [pc, #296]	; (800490c <ai_platform_inputs_get+0x1a8>)
 80047e2:	2301      	movs	r3, #1
 80047e4:	6093      	str	r3, [r2, #8]
 80047e6:	6893      	ldr	r3, [r2, #8]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1fc      	bne.n	80047e6 <ai_platform_inputs_get+0x82>
 80047ec:	4b45      	ldr	r3, [pc, #276]	; (8004904 <ai_platform_inputs_get+0x1a0>)
 80047ee:	6013      	str	r3, [r2, #0]
 80047f0:	6812      	ldr	r2, [r2, #0]
 80047f2:	4b45      	ldr	r3, [pc, #276]	; (8004908 <ai_platform_inputs_get+0x1a4>)
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d000      	beq.n	80047fa <ai_platform_inputs_get+0x96>
 80047f8:	e7fe      	b.n	80047f8 <ai_platform_inputs_get+0x94>
 80047fa:	f7ff fe73 	bl	80044e4 <_ai_platform_release_crc>
 80047fe:	2000      	movs	r0, #0
 8004800:	b005      	add	sp, #20
 8004802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004806:	4a41      	ldr	r2, [pc, #260]	; (800490c <ai_platform_inputs_get+0x1a8>)
 8004808:	2301      	movs	r3, #1
 800480a:	6093      	str	r3, [r2, #8]
 800480c:	6893      	ldr	r3, [r2, #8]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1fc      	bne.n	800480c <ai_platform_inputs_get+0xa8>
 8004812:	4b3c      	ldr	r3, [pc, #240]	; (8004904 <ai_platform_inputs_get+0x1a0>)
 8004814:	6013      	str	r3, [r2, #0]
 8004816:	6812      	ldr	r2, [r2, #0]
 8004818:	4b3b      	ldr	r3, [pc, #236]	; (8004908 <ai_platform_inputs_get+0x1a4>)
 800481a:	429a      	cmp	r2, r3
 800481c:	d155      	bne.n	80048ca <ai_platform_inputs_get+0x166>
 800481e:	f7ff fe61 	bl	80044e4 <_ai_platform_release_crc>
 8004822:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004824:	2b00      	cmp	r3, #0
 8004826:	d051      	beq.n	80048cc <ai_platform_inputs_get+0x168>
 8004828:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 800482c:	f1ba 0f00 	cmp.w	sl, #0
 8004830:	d04c      	beq.n	80048cc <ai_platform_inputs_get+0x168>
 8004832:	f04f 0b00 	mov.w	fp, #0
 8004836:	465d      	mov	r5, fp
 8004838:	9703      	str	r7, [sp, #12]
 800483a:	e016      	b.n	800486a <ai_platform_inputs_get+0x106>
 800483c:	9901      	ldr	r1, [sp, #4]
 800483e:	2301      	movs	r3, #1
 8004840:	507b      	str	r3, [r7, r1]
 8004842:	69b1      	ldr	r1, [r6, #24]
 8004844:	6849      	ldr	r1, [r1, #4]
 8004846:	6121      	str	r1, [r4, #16]
 8004848:	f04f 0301 	mov.w	r3, #1
 800484c:	7523      	strb	r3, [r4, #20]
 800484e:	e9c4 c200 	strd	ip, r2, [r4]
 8004852:	6962      	ldr	r2, [r4, #20]
 8004854:	60a0      	str	r0, [r4, #8]
 8004856:	2300      	movs	r3, #0
 8004858:	f369 221f 	bfi	r2, r9, #8, #24
 800485c:	f8c4 8018 	str.w	r8, [r4, #24]
 8004860:	60e3      	str	r3, [r4, #12]
 8004862:	3501      	adds	r5, #1
 8004864:	f10b 0b1c 	add.w	fp, fp, #28
 8004868:	6162      	str	r2, [r4, #20]
 800486a:	f8ba 3000 	ldrh.w	r3, [sl]
 800486e:	42ab      	cmp	r3, r5
 8004870:	b2aa      	uxth	r2, r5
 8004872:	d93a      	bls.n	80048ea <ai_platform_inputs_get+0x186>
 8004874:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004878:	00e9      	lsls	r1, r5, #3
 800487a:	9101      	str	r1, [sp, #4]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d034      	beq.n	80048ea <ai_platform_inputs_get+0x186>
 8004880:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8004884:	2e00      	cmp	r6, #0
 8004886:	d030      	beq.n	80048ea <ai_platform_inputs_get+0x186>
 8004888:	f8da 3008 	ldr.w	r3, [sl, #8]
 800488c:	69b2      	ldr	r2, [r6, #24]
 800488e:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8004892:	6810      	ldr	r0, [r2, #0]
 8004894:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8004898:	68b3      	ldr	r3, [r6, #8]
 800489a:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800489e:	f003 fcff 	bl	80082a0 <ai_array_to_buffer_fmt>
 80048a2:	69b1      	ldr	r1, [r6, #24]
 80048a4:	4684      	mov	ip, r0
 80048a6:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 80048aa:	688a      	ldr	r2, [r1, #8]
 80048ac:	445c      	add	r4, fp
 80048ae:	2800      	cmp	r0, #0
 80048b0:	d0c8      	beq.n	8004844 <ai_platform_inputs_get+0xe0>
 80048b2:	2100      	movs	r1, #0
 80048b4:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 80048b8:	6831      	ldr	r1, [r6, #0]
 80048ba:	6041      	str	r1, [r0, #4]
 80048bc:	b111      	cbz	r1, 80048c4 <ai_platform_inputs_get+0x160>
 80048be:	8849      	ldrh	r1, [r1, #2]
 80048c0:	2900      	cmp	r1, #0
 80048c2:	d1bb      	bne.n	800483c <ai_platform_inputs_get+0xd8>
 80048c4:	69b1      	ldr	r1, [r6, #24]
 80048c6:	2000      	movs	r0, #0
 80048c8:	e7bc      	b.n	8004844 <ai_platform_inputs_get+0xe0>
 80048ca:	e7fe      	b.n	80048ca <ai_platform_inputs_get+0x166>
 80048cc:	2218      	movs	r2, #24
 80048ce:	2111      	movs	r1, #17
 80048d0:	f107 0010 	add.w	r0, r7, #16
 80048d4:	f000 fdc4 	bl	8005460 <core_set_error>
 80048d8:	2200      	movs	r2, #0
 80048da:	4610      	mov	r0, r2
 80048dc:	9b02      	ldr	r3, [sp, #8]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d08e      	beq.n	8004800 <ai_platform_inputs_get+0x9c>
 80048e2:	801a      	strh	r2, [r3, #0]
 80048e4:	b005      	add	sp, #20
 80048e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048ea:	9f03      	ldr	r7, [sp, #12]
 80048ec:	2a00      	cmp	r2, #0
 80048ee:	d0ed      	beq.n	80048cc <ai_platform_inputs_get+0x168>
 80048f0:	f8da 3008 	ldr.w	r3, [sl, #8]
 80048f4:	6858      	ldr	r0, [r3, #4]
 80048f6:	e7f1      	b.n	80048dc <ai_platform_inputs_get+0x178>
 80048f8:	a1c00100 	.word	0xa1c00100
 80048fc:	e0042000 	.word	0xe0042000
 8004900:	58024000 	.word	0x58024000
 8004904:	f407a5c2 	.word	0xf407a5c2
 8004908:	b5e8b5cd 	.word	0xb5e8b5cd
 800490c:	40023000 	.word	0x40023000

08004910 <ai_platform_outputs_get>:
 8004910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004914:	b085      	sub	sp, #20
 8004916:	9102      	str	r1, [sp, #8]
 8004918:	b1f0      	cbz	r0, 8004958 <ai_platform_outputs_get+0x48>
 800491a:	4b5f      	ldr	r3, [pc, #380]	; (8004a98 <ai_platform_outputs_get+0x188>)
 800491c:	6802      	ldr	r2, [r0, #0]
 800491e:	429a      	cmp	r2, r3
 8004920:	4607      	mov	r7, r0
 8004922:	d119      	bne.n	8004958 <ai_platform_outputs_get+0x48>
 8004924:	f7ff fddc 	bl	80044e0 <_ai_platform_acquire_crc>
 8004928:	4b5c      	ldr	r3, [pc, #368]	; (8004a9c <ai_platform_outputs_get+0x18c>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004934:	d03d      	beq.n	80049b2 <ai_platform_outputs_get+0xa2>
 8004936:	4a5a      	ldr	r2, [pc, #360]	; (8004aa0 <ai_platform_outputs_get+0x190>)
 8004938:	2301      	movs	r3, #1
 800493a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800493e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1fb      	bne.n	800493e <ai_platform_outputs_get+0x2e>
 8004946:	4b57      	ldr	r3, [pc, #348]	; (8004aa4 <ai_platform_outputs_get+0x194>)
 8004948:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800494c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004950:	4b55      	ldr	r3, [pc, #340]	; (8004aa8 <ai_platform_outputs_get+0x198>)
 8004952:	429a      	cmp	r2, r3
 8004954:	d039      	beq.n	80049ca <ai_platform_outputs_get+0xba>
 8004956:	e7fe      	b.n	8004956 <ai_platform_outputs_get+0x46>
 8004958:	f7ff fdc2 	bl	80044e0 <_ai_platform_acquire_crc>
 800495c:	4b4f      	ldr	r3, [pc, #316]	; (8004a9c <ai_platform_outputs_get+0x18c>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004968:	d010      	beq.n	800498c <ai_platform_outputs_get+0x7c>
 800496a:	4a4d      	ldr	r2, [pc, #308]	; (8004aa0 <ai_platform_outputs_get+0x190>)
 800496c:	2301      	movs	r3, #1
 800496e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004972:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1fb      	bne.n	8004972 <ai_platform_outputs_get+0x62>
 800497a:	4b4a      	ldr	r3, [pc, #296]	; (8004aa4 <ai_platform_outputs_get+0x194>)
 800497c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004980:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004984:	4b48      	ldr	r3, [pc, #288]	; (8004aa8 <ai_platform_outputs_get+0x198>)
 8004986:	429a      	cmp	r2, r3
 8004988:	d00d      	beq.n	80049a6 <ai_platform_outputs_get+0x96>
 800498a:	e7fe      	b.n	800498a <ai_platform_outputs_get+0x7a>
 800498c:	4a47      	ldr	r2, [pc, #284]	; (8004aac <ai_platform_outputs_get+0x19c>)
 800498e:	2301      	movs	r3, #1
 8004990:	6093      	str	r3, [r2, #8]
 8004992:	6893      	ldr	r3, [r2, #8]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1fc      	bne.n	8004992 <ai_platform_outputs_get+0x82>
 8004998:	4b42      	ldr	r3, [pc, #264]	; (8004aa4 <ai_platform_outputs_get+0x194>)
 800499a:	6013      	str	r3, [r2, #0]
 800499c:	6812      	ldr	r2, [r2, #0]
 800499e:	4b42      	ldr	r3, [pc, #264]	; (8004aa8 <ai_platform_outputs_get+0x198>)
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d000      	beq.n	80049a6 <ai_platform_outputs_get+0x96>
 80049a4:	e7fe      	b.n	80049a4 <ai_platform_outputs_get+0x94>
 80049a6:	f7ff fd9d 	bl	80044e4 <_ai_platform_release_crc>
 80049aa:	2000      	movs	r0, #0
 80049ac:	b005      	add	sp, #20
 80049ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049b2:	4a3e      	ldr	r2, [pc, #248]	; (8004aac <ai_platform_outputs_get+0x19c>)
 80049b4:	2301      	movs	r3, #1
 80049b6:	6093      	str	r3, [r2, #8]
 80049b8:	6893      	ldr	r3, [r2, #8]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1fc      	bne.n	80049b8 <ai_platform_outputs_get+0xa8>
 80049be:	4b39      	ldr	r3, [pc, #228]	; (8004aa4 <ai_platform_outputs_get+0x194>)
 80049c0:	6013      	str	r3, [r2, #0]
 80049c2:	6812      	ldr	r2, [r2, #0]
 80049c4:	4b38      	ldr	r3, [pc, #224]	; (8004aa8 <ai_platform_outputs_get+0x198>)
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d150      	bne.n	8004a6c <ai_platform_outputs_get+0x15c>
 80049ca:	f7ff fd8b 	bl	80044e4 <_ai_platform_release_crc>
 80049ce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d958      	bls.n	8004a86 <ai_platform_outputs_get+0x176>
 80049d4:	f04f 0b00 	mov.w	fp, #0
 80049d8:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 80049dc:	9703      	str	r7, [sp, #12]
 80049de:	465d      	mov	r5, fp
 80049e0:	e016      	b.n	8004a10 <ai_platform_outputs_get+0x100>
 80049e2:	9901      	ldr	r1, [sp, #4]
 80049e4:	2301      	movs	r3, #1
 80049e6:	507b      	str	r3, [r7, r1]
 80049e8:	69b1      	ldr	r1, [r6, #24]
 80049ea:	6849      	ldr	r1, [r1, #4]
 80049ec:	6121      	str	r1, [r4, #16]
 80049ee:	f04f 0301 	mov.w	r3, #1
 80049f2:	7523      	strb	r3, [r4, #20]
 80049f4:	e9c4 c200 	strd	ip, r2, [r4]
 80049f8:	6962      	ldr	r2, [r4, #20]
 80049fa:	60a0      	str	r0, [r4, #8]
 80049fc:	2300      	movs	r3, #0
 80049fe:	f369 221f 	bfi	r2, r9, #8, #24
 8004a02:	f8c4 8018 	str.w	r8, [r4, #24]
 8004a06:	60e3      	str	r3, [r4, #12]
 8004a08:	3501      	adds	r5, #1
 8004a0a:	f10b 0b1c 	add.w	fp, fp, #28
 8004a0e:	6162      	str	r2, [r4, #20]
 8004a10:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8004a14:	42ab      	cmp	r3, r5
 8004a16:	b2aa      	uxth	r2, r5
 8004a18:	d929      	bls.n	8004a6e <ai_platform_outputs_get+0x15e>
 8004a1a:	f8da 3010 	ldr.w	r3, [sl, #16]
 8004a1e:	00e9      	lsls	r1, r5, #3
 8004a20:	9101      	str	r1, [sp, #4]
 8004a22:	b323      	cbz	r3, 8004a6e <ai_platform_outputs_get+0x15e>
 8004a24:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8004a28:	b30e      	cbz	r6, 8004a6e <ai_platform_outputs_get+0x15e>
 8004a2a:	f8da 3014 	ldr.w	r3, [sl, #20]
 8004a2e:	69b2      	ldr	r2, [r6, #24]
 8004a30:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8004a34:	6810      	ldr	r0, [r2, #0]
 8004a36:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8004a3a:	68b3      	ldr	r3, [r6, #8]
 8004a3c:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8004a40:	f003 fc2e 	bl	80082a0 <ai_array_to_buffer_fmt>
 8004a44:	69b1      	ldr	r1, [r6, #24]
 8004a46:	4684      	mov	ip, r0
 8004a48:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8004a4c:	688a      	ldr	r2, [r1, #8]
 8004a4e:	445c      	add	r4, fp
 8004a50:	2800      	cmp	r0, #0
 8004a52:	d0ca      	beq.n	80049ea <ai_platform_outputs_get+0xda>
 8004a54:	2100      	movs	r1, #0
 8004a56:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8004a5a:	6831      	ldr	r1, [r6, #0]
 8004a5c:	6041      	str	r1, [r0, #4]
 8004a5e:	b111      	cbz	r1, 8004a66 <ai_platform_outputs_get+0x156>
 8004a60:	8849      	ldrh	r1, [r1, #2]
 8004a62:	2900      	cmp	r1, #0
 8004a64:	d1bd      	bne.n	80049e2 <ai_platform_outputs_get+0xd2>
 8004a66:	69b1      	ldr	r1, [r6, #24]
 8004a68:	2000      	movs	r0, #0
 8004a6a:	e7be      	b.n	80049ea <ai_platform_outputs_get+0xda>
 8004a6c:	e7fe      	b.n	8004a6c <ai_platform_outputs_get+0x15c>
 8004a6e:	9f03      	ldr	r7, [sp, #12]
 8004a70:	b14a      	cbz	r2, 8004a86 <ai_platform_outputs_get+0x176>
 8004a72:	f8da 3014 	ldr.w	r3, [sl, #20]
 8004a76:	6858      	ldr	r0, [r3, #4]
 8004a78:	9b02      	ldr	r3, [sp, #8]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d096      	beq.n	80049ac <ai_platform_outputs_get+0x9c>
 8004a7e:	801a      	strh	r2, [r3, #0]
 8004a80:	b005      	add	sp, #20
 8004a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a86:	2218      	movs	r2, #24
 8004a88:	2111      	movs	r1, #17
 8004a8a:	f107 0010 	add.w	r0, r7, #16
 8004a8e:	f000 fce7 	bl	8005460 <core_set_error>
 8004a92:	2200      	movs	r2, #0
 8004a94:	4610      	mov	r0, r2
 8004a96:	e7ef      	b.n	8004a78 <ai_platform_outputs_get+0x168>
 8004a98:	a1c00100 	.word	0xa1c00100
 8004a9c:	e0042000 	.word	0xe0042000
 8004aa0:	58024000 	.word	0x58024000
 8004aa4:	f407a5c2 	.word	0xf407a5c2
 8004aa8:	b5e8b5cd 	.word	0xb5e8b5cd
 8004aac:	40023000 	.word	0x40023000

08004ab0 <ai_platform_network_create>:
 8004ab0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	4606      	mov	r6, r0
 8004ab8:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8004abc:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8004ac0:	4615      	mov	r5, r2
 8004ac2:	461f      	mov	r7, r3
 8004ac4:	f7ff fd0c 	bl	80044e0 <_ai_platform_acquire_crc>
 8004ac8:	b188      	cbz	r0, 8004aee <ai_platform_network_create+0x3e>
 8004aca:	4a5d      	ldr	r2, [pc, #372]	; (8004c40 <ai_platform_network_create+0x190>)
 8004acc:	6812      	ldr	r2, [r2, #0]
 8004ace:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004ad2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	d00e      	beq.n	8004af8 <ai_platform_network_create+0x48>
 8004ada:	4a5a      	ldr	r2, [pc, #360]	; (8004c44 <ai_platform_network_create+0x194>)
 8004adc:	2118      	movs	r1, #24
 8004ade:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8004ae2:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8004ae6:	2918      	cmp	r1, #24
 8004ae8:	d018      	beq.n	8004b1c <ai_platform_network_create+0x6c>
 8004aea:	f7ff fcfb 	bl	80044e4 <_ai_platform_release_crc>
 8004aee:	f244 1033 	movw	r0, #16691	; 0x4133
 8004af2:	b003      	add	sp, #12
 8004af4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004af8:	4a53      	ldr	r2, [pc, #332]	; (8004c48 <ai_platform_network_create+0x198>)
 8004afa:	2101      	movs	r1, #1
 8004afc:	6091      	str	r1, [r2, #8]
 8004afe:	2114      	movs	r1, #20
 8004b00:	e001      	b.n	8004b06 <ai_platform_network_create+0x56>
 8004b02:	3901      	subs	r1, #1
 8004b04:	d002      	beq.n	8004b0c <ai_platform_network_create+0x5c>
 8004b06:	6894      	ldr	r4, [r2, #8]
 8004b08:	2c00      	cmp	r4, #0
 8004b0a:	d1fa      	bne.n	8004b02 <ai_platform_network_create+0x52>
 8004b0c:	4a4e      	ldr	r2, [pc, #312]	; (8004c48 <ai_platform_network_create+0x198>)
 8004b0e:	6891      	ldr	r1, [r2, #8]
 8004b10:	b911      	cbnz	r1, 8004b18 <ai_platform_network_create+0x68>
 8004b12:	6812      	ldr	r2, [r2, #0]
 8004b14:	3201      	adds	r2, #1
 8004b16:	d008      	beq.n	8004b2a <ai_platform_network_create+0x7a>
 8004b18:	4618      	mov	r0, r3
 8004b1a:	e7e6      	b.n	8004aea <ai_platform_network_create+0x3a>
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8004b22:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8004b26:	2900      	cmp	r1, #0
 8004b28:	d1fb      	bne.n	8004b22 <ai_platform_network_create+0x72>
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7ff fcda 	bl	80044e4 <_ai_platform_release_crc>
 8004b30:	f7ff fcd6 	bl	80044e0 <_ai_platform_acquire_crc>
 8004b34:	4b42      	ldr	r3, [pc, #264]	; (8004c40 <ai_platform_network_create+0x190>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b40:	d010      	beq.n	8004b64 <ai_platform_network_create+0xb4>
 8004b42:	4b40      	ldr	r3, [pc, #256]	; (8004c44 <ai_platform_network_create+0x194>)
 8004b44:	2201      	movs	r2, #1
 8004b46:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8004b4a:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 8004b4e:	2900      	cmp	r1, #0
 8004b50:	d1fb      	bne.n	8004b4a <ai_platform_network_create+0x9a>
 8004b52:	4a3e      	ldr	r2, [pc, #248]	; (8004c4c <ai_platform_network_create+0x19c>)
 8004b54:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8004b58:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8004b5c:	4b3c      	ldr	r3, [pc, #240]	; (8004c50 <ai_platform_network_create+0x1a0>)
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d00c      	beq.n	8004b7c <ai_platform_network_create+0xcc>
 8004b62:	e7fe      	b.n	8004b62 <ai_platform_network_create+0xb2>
 8004b64:	4a38      	ldr	r2, [pc, #224]	; (8004c48 <ai_platform_network_create+0x198>)
 8004b66:	2301      	movs	r3, #1
 8004b68:	6093      	str	r3, [r2, #8]
 8004b6a:	6893      	ldr	r3, [r2, #8]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1fc      	bne.n	8004b6a <ai_platform_network_create+0xba>
 8004b70:	4b36      	ldr	r3, [pc, #216]	; (8004c4c <ai_platform_network_create+0x19c>)
 8004b72:	6013      	str	r3, [r2, #0]
 8004b74:	6812      	ldr	r2, [r2, #0]
 8004b76:	4b36      	ldr	r3, [pc, #216]	; (8004c50 <ai_platform_network_create+0x1a0>)
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d122      	bne.n	8004bc2 <ai_platform_network_create+0x112>
 8004b7c:	f7ff fcb2 	bl	80044e4 <_ai_platform_release_crc>
 8004b80:	b38e      	cbz	r6, 8004be6 <ai_platform_network_create+0x136>
 8004b82:	4b34      	ldr	r3, [pc, #208]	; (8004c54 <ai_platform_network_create+0x1a4>)
 8004b84:	602b      	str	r3, [r5, #0]
 8004b86:	6035      	str	r5, [r6, #0]
 8004b88:	f000 fc62 	bl	8005450 <core_init>
 8004b8c:	b1d0      	cbz	r0, 8004bc4 <ai_platform_network_create+0x114>
 8004b8e:	f7ff fca7 	bl	80044e0 <_ai_platform_acquire_crc>
 8004b92:	4b2b      	ldr	r3, [pc, #172]	; (8004c40 <ai_platform_network_create+0x190>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b9e:	d025      	beq.n	8004bec <ai_platform_network_create+0x13c>
 8004ba0:	4a28      	ldr	r2, [pc, #160]	; (8004c44 <ai_platform_network_create+0x194>)
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004ba8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1fb      	bne.n	8004ba8 <ai_platform_network_create+0xf8>
 8004bb0:	4b26      	ldr	r3, [pc, #152]	; (8004c4c <ai_platform_network_create+0x19c>)
 8004bb2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004bb6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004bba:	4b25      	ldr	r3, [pc, #148]	; (8004c50 <ai_platform_network_create+0x1a0>)
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d022      	beq.n	8004c06 <ai_platform_network_create+0x156>
 8004bc0:	e7fe      	b.n	8004bc0 <ai_platform_network_create+0x110>
 8004bc2:	e7fe      	b.n	8004bc2 <ai_platform_network_create+0x112>
 8004bc4:	2430      	movs	r4, #48	; 0x30
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	6033      	str	r3, [r6, #0]
 8004bca:	2610      	movs	r6, #16
 8004bcc:	464a      	mov	r2, r9
 8004bce:	4641      	mov	r1, r8
 8004bd0:	4638      	mov	r0, r7
 8004bd2:	f003 fc0b 	bl	80083ec <ai_version_get>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2000      	movs	r0, #0
 8004bda:	f364 0007 	bfi	r0, r4, #0, #8
 8004bde:	64ab      	str	r3, [r5, #72]	; 0x48
 8004be0:	f366 201f 	bfi	r0, r6, #8, #24
 8004be4:	e785      	b.n	8004af2 <ai_platform_network_create+0x42>
 8004be6:	f241 0010 	movw	r0, #4112	; 0x1010
 8004bea:	e782      	b.n	8004af2 <ai_platform_network_create+0x42>
 8004bec:	4a16      	ldr	r2, [pc, #88]	; (8004c48 <ai_platform_network_create+0x198>)
 8004bee:	2301      	movs	r3, #1
 8004bf0:	6093      	str	r3, [r2, #8]
 8004bf2:	6893      	ldr	r3, [r2, #8]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1fc      	bne.n	8004bf2 <ai_platform_network_create+0x142>
 8004bf8:	4b14      	ldr	r3, [pc, #80]	; (8004c4c <ai_platform_network_create+0x19c>)
 8004bfa:	6013      	str	r3, [r2, #0]
 8004bfc:	6812      	ldr	r2, [r2, #0]
 8004bfe:	4b14      	ldr	r3, [pc, #80]	; (8004c50 <ai_platform_network_create+0x1a0>)
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d000      	beq.n	8004c06 <ai_platform_network_create+0x156>
 8004c04:	e7fe      	b.n	8004c04 <ai_platform_network_create+0x154>
 8004c06:	f7ff fc6d 	bl	80044e4 <_ai_platform_release_crc>
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	4641      	mov	r1, r8
 8004c0e:	4638      	mov	r0, r7
 8004c10:	f003 fbec 	bl	80083ec <ai_version_get>
 8004c14:	2200      	movs	r2, #0
 8004c16:	4604      	mov	r4, r0
 8004c18:	2105      	movs	r1, #5
 8004c1a:	2001      	movs	r0, #1
 8004c1c:	f003 fbe6 	bl	80083ec <ai_version_get>
 8004c20:	4284      	cmp	r4, r0
 8004c22:	d001      	beq.n	8004c28 <ai_platform_network_create+0x178>
 8004c24:	2401      	movs	r4, #1
 8004c26:	e7ce      	b.n	8004bc6 <ai_platform_network_create+0x116>
 8004c28:	4b0b      	ldr	r3, [pc, #44]	; (8004c58 <ai_platform_network_create+0x1a8>)
 8004c2a:	9301      	str	r3, [sp, #4]
 8004c2c:	a801      	add	r0, sp, #4
 8004c2e:	f000 fc23 	bl	8005478 <ai_check_custom_types>
 8004c32:	b110      	cbz	r0, 8004c3a <ai_platform_network_create+0x18a>
 8004c34:	2600      	movs	r6, #0
 8004c36:	4634      	mov	r4, r6
 8004c38:	e7c8      	b.n	8004bcc <ai_platform_network_create+0x11c>
 8004c3a:	2402      	movs	r4, #2
 8004c3c:	e7c3      	b.n	8004bc6 <ai_platform_network_create+0x116>
 8004c3e:	bf00      	nop
 8004c40:	e0042000 	.word	0xe0042000
 8004c44:	58024000 	.word	0x58024000
 8004c48:	40023000 	.word	0x40023000
 8004c4c:	f407a5c2 	.word	0xf407a5c2
 8004c50:	b5e8b5cd 	.word	0xb5e8b5cd
 8004c54:	a1c00100 	.word	0xa1c00100
 8004c58:	84048403 	.word	0x84048403

08004c5c <ai_platform_network_init>:
 8004c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c60:	b1f8      	cbz	r0, 8004ca2 <ai_platform_network_init+0x46>
 8004c62:	4b6e      	ldr	r3, [pc, #440]	; (8004e1c <ai_platform_network_init+0x1c0>)
 8004c64:	6802      	ldr	r2, [r0, #0]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	4604      	mov	r4, r0
 8004c6a:	d11a      	bne.n	8004ca2 <ai_platform_network_init+0x46>
 8004c6c:	460e      	mov	r6, r1
 8004c6e:	f7ff fc37 	bl	80044e0 <_ai_platform_acquire_crc>
 8004c72:	4b6b      	ldr	r3, [pc, #428]	; (8004e20 <ai_platform_network_init+0x1c4>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c7e:	d03d      	beq.n	8004cfc <ai_platform_network_init+0xa0>
 8004c80:	4a68      	ldr	r2, [pc, #416]	; (8004e24 <ai_platform_network_init+0x1c8>)
 8004c82:	2301      	movs	r3, #1
 8004c84:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004c88:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1fb      	bne.n	8004c88 <ai_platform_network_init+0x2c>
 8004c90:	4b65      	ldr	r3, [pc, #404]	; (8004e28 <ai_platform_network_init+0x1cc>)
 8004c92:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004c96:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004c9a:	4b64      	ldr	r3, [pc, #400]	; (8004e2c <ai_platform_network_init+0x1d0>)
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d039      	beq.n	8004d14 <ai_platform_network_init+0xb8>
 8004ca0:	e7fe      	b.n	8004ca0 <ai_platform_network_init+0x44>
 8004ca2:	f7ff fc1d 	bl	80044e0 <_ai_platform_acquire_crc>
 8004ca6:	4b5e      	ldr	r3, [pc, #376]	; (8004e20 <ai_platform_network_init+0x1c4>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cb2:	d010      	beq.n	8004cd6 <ai_platform_network_init+0x7a>
 8004cb4:	4a5b      	ldr	r2, [pc, #364]	; (8004e24 <ai_platform_network_init+0x1c8>)
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004cbc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1fb      	bne.n	8004cbc <ai_platform_network_init+0x60>
 8004cc4:	4b58      	ldr	r3, [pc, #352]	; (8004e28 <ai_platform_network_init+0x1cc>)
 8004cc6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004cca:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004cce:	4b57      	ldr	r3, [pc, #348]	; (8004e2c <ai_platform_network_init+0x1d0>)
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d00d      	beq.n	8004cf0 <ai_platform_network_init+0x94>
 8004cd4:	e7fe      	b.n	8004cd4 <ai_platform_network_init+0x78>
 8004cd6:	4a56      	ldr	r2, [pc, #344]	; (8004e30 <ai_platform_network_init+0x1d4>)
 8004cd8:	2301      	movs	r3, #1
 8004cda:	6093      	str	r3, [r2, #8]
 8004cdc:	6893      	ldr	r3, [r2, #8]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1fc      	bne.n	8004cdc <ai_platform_network_init+0x80>
 8004ce2:	4b51      	ldr	r3, [pc, #324]	; (8004e28 <ai_platform_network_init+0x1cc>)
 8004ce4:	6013      	str	r3, [r2, #0]
 8004ce6:	6812      	ldr	r2, [r2, #0]
 8004ce8:	4b50      	ldr	r3, [pc, #320]	; (8004e2c <ai_platform_network_init+0x1d0>)
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d000      	beq.n	8004cf0 <ai_platform_network_init+0x94>
 8004cee:	e7fe      	b.n	8004cee <ai_platform_network_init+0x92>
 8004cf0:	f7ff fbf8 	bl	80044e4 <_ai_platform_release_crc>
 8004cf4:	2600      	movs	r6, #0
 8004cf6:	4630      	mov	r0, r6
 8004cf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cfc:	4a4c      	ldr	r2, [pc, #304]	; (8004e30 <ai_platform_network_init+0x1d4>)
 8004cfe:	2301      	movs	r3, #1
 8004d00:	6093      	str	r3, [r2, #8]
 8004d02:	6893      	ldr	r3, [r2, #8]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1fc      	bne.n	8004d02 <ai_platform_network_init+0xa6>
 8004d08:	4b47      	ldr	r3, [pc, #284]	; (8004e28 <ai_platform_network_init+0x1cc>)
 8004d0a:	6013      	str	r3, [r2, #0]
 8004d0c:	6812      	ldr	r2, [r2, #0]
 8004d0e:	4b47      	ldr	r3, [pc, #284]	; (8004e2c <ai_platform_network_init+0x1d0>)
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d11c      	bne.n	8004d4e <ai_platform_network_init+0xf2>
 8004d14:	f7ff fbe6 	bl	80044e4 <_ai_platform_release_crc>
 8004d18:	2e00      	cmp	r6, #0
 8004d1a:	d06f      	beq.n	8004dfc <ai_platform_network_init+0x1a0>
 8004d1c:	4b45      	ldr	r3, [pc, #276]	; (8004e34 <ai_platform_network_init+0x1d8>)
 8004d1e:	6832      	ldr	r2, [r6, #0]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d115      	bne.n	8004d50 <ai_platform_network_init+0xf4>
 8004d24:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8004d28:	6933      	ldr	r3, [r6, #16]
 8004d2a:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 8004d2e:	89f7      	ldrh	r7, [r6, #14]
 8004d30:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d32:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8004d36:	2303      	movs	r3, #3
 8004d38:	84e7      	strh	r7, [r4, #38]	; 0x26
 8004d3a:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 8004d3e:	60e3      	str	r3, [r4, #12]
 8004d40:	4620      	mov	r0, r4
 8004d42:	4626      	mov	r6, r4
 8004d44:	f000 fbc2 	bl	80054cc <ai_layers_init_all>
 8004d48:	4630      	mov	r0, r6
 8004d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d4e:	e7fe      	b.n	8004d4e <ai_platform_network_init+0xf2>
 8004d50:	2101      	movs	r1, #1
 8004d52:	4630      	mov	r0, r6
 8004d54:	4635      	mov	r5, r6
 8004d56:	6876      	ldr	r6, [r6, #4]
 8004d58:	f7ff fb74 	bl	8004444 <ai_buffer_get_size>
 8004d5c:	f105 081c 	add.w	r8, r5, #28
 8004d60:	4681      	mov	r9, r0
 8004d62:	2101      	movs	r1, #1
 8004d64:	4640      	mov	r0, r8
 8004d66:	6a2f      	ldr	r7, [r5, #32]
 8004d68:	f7ff fb6c 	bl	8004444 <ai_buffer_get_size>
 8004d6c:	f1b9 0f00 	cmp.w	r9, #0
 8004d70:	d025      	beq.n	8004dbe <ai_platform_network_init+0x162>
 8004d72:	2201      	movs	r2, #1
 8004d74:	4696      	mov	lr, r2
 8004d76:	bb30      	cbnz	r0, 8004dc6 <ai_platform_network_init+0x16a>
 8004d78:	4680      	mov	r8, r0
 8004d7a:	4607      	mov	r7, r0
 8004d7c:	b376      	cbz	r6, 8004ddc <ai_platform_network_init+0x180>
 8004d7e:	8be3      	ldrh	r3, [r4, #30]
 8004d80:	4573      	cmp	r3, lr
 8004d82:	d323      	bcc.n	8004dcc <ai_platform_network_init+0x170>
 8004d84:	b142      	cbz	r2, 8004d98 <ai_platform_network_init+0x13c>
 8004d86:	46ac      	mov	ip, r5
 8004d88:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004d8c:	6a25      	ldr	r5, [r4, #32]
 8004d8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d90:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8004d94:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004d98:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004d9a:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8004d9e:	2600      	movs	r6, #0
 8004da0:	42bb      	cmp	r3, r7
 8004da2:	83a6      	strh	r6, [r4, #28]
 8004da4:	d323      	bcc.n	8004dee <ai_platform_network_init+0x192>
 8004da6:	b37f      	cbz	r7, 8004e08 <ai_platform_network_init+0x1ac>
 8004da8:	46c4      	mov	ip, r8
 8004daa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004dae:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8004db0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004db2:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8004db6:	46b6      	mov	lr, r6
 8004db8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004dbc:	e7bb      	b.n	8004d36 <ai_platform_network_init+0xda>
 8004dbe:	464a      	mov	r2, r9
 8004dc0:	46ce      	mov	lr, r9
 8004dc2:	464d      	mov	r5, r9
 8004dc4:	e7d7      	b.n	8004d76 <ai_platform_network_init+0x11a>
 8004dc6:	b30f      	cbz	r7, 8004e0c <ai_platform_network_init+0x1b0>
 8004dc8:	2701      	movs	r7, #1
 8004dca:	e7d7      	b.n	8004d7c <ai_platform_network_init+0x120>
 8004dcc:	2212      	movs	r2, #18
 8004dce:	2116      	movs	r1, #22
 8004dd0:	f104 0010 	add.w	r0, r4, #16
 8004dd4:	f000 fb44 	bl	8005460 <core_set_error>
 8004dd8:	2600      	movs	r6, #0
 8004dda:	e78c      	b.n	8004cf6 <ai_platform_network_init+0x9a>
 8004ddc:	f1b9 0f00 	cmp.w	r9, #0
 8004de0:	d0cd      	beq.n	8004d7e <ai_platform_network_init+0x122>
 8004de2:	2110      	movs	r1, #16
 8004de4:	2212      	movs	r2, #18
 8004de6:	1860      	adds	r0, r4, r1
 8004de8:	f000 fb3a 	bl	8005460 <core_set_error>
 8004dec:	e783      	b.n	8004cf6 <ai_platform_network_init+0x9a>
 8004dee:	2213      	movs	r2, #19
 8004df0:	2116      	movs	r1, #22
 8004df2:	f104 0010 	add.w	r0, r4, #16
 8004df6:	f000 fb33 	bl	8005460 <core_set_error>
 8004dfa:	e77c      	b.n	8004cf6 <ai_platform_network_init+0x9a>
 8004dfc:	2110      	movs	r1, #16
 8004dfe:	2211      	movs	r2, #17
 8004e00:	1860      	adds	r0, r4, r1
 8004e02:	f000 fb2d 	bl	8005460 <core_set_error>
 8004e06:	e776      	b.n	8004cf6 <ai_platform_network_init+0x9a>
 8004e08:	46be      	mov	lr, r7
 8004e0a:	e794      	b.n	8004d36 <ai_platform_network_init+0xda>
 8004e0c:	2110      	movs	r1, #16
 8004e0e:	2213      	movs	r2, #19
 8004e10:	1860      	adds	r0, r4, r1
 8004e12:	f000 fb25 	bl	8005460 <core_set_error>
 8004e16:	463e      	mov	r6, r7
 8004e18:	e76d      	b.n	8004cf6 <ai_platform_network_init+0x9a>
 8004e1a:	bf00      	nop
 8004e1c:	a1c00100 	.word	0xa1c00100
 8004e20:	e0042000 	.word	0xe0042000
 8004e24:	58024000 	.word	0x58024000
 8004e28:	f407a5c2 	.word	0xf407a5c2
 8004e2c:	b5e8b5cd 	.word	0xb5e8b5cd
 8004e30:	40023000 	.word	0x40023000
 8004e34:	a1facade 	.word	0xa1facade

08004e38 <ai_platform_network_post_init>:
 8004e38:	b538      	push	{r3, r4, r5, lr}
 8004e3a:	b1f0      	cbz	r0, 8004e7a <ai_platform_network_post_init+0x42>
 8004e3c:	4b3c      	ldr	r3, [pc, #240]	; (8004f30 <ai_platform_network_post_init+0xf8>)
 8004e3e:	6802      	ldr	r2, [r0, #0]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	4604      	mov	r4, r0
 8004e44:	d119      	bne.n	8004e7a <ai_platform_network_post_init+0x42>
 8004e46:	f7ff fb4b 	bl	80044e0 <_ai_platform_acquire_crc>
 8004e4a:	4b3a      	ldr	r3, [pc, #232]	; (8004f34 <ai_platform_network_post_init+0xfc>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e56:	d03b      	beq.n	8004ed0 <ai_platform_network_post_init+0x98>
 8004e58:	4a37      	ldr	r2, [pc, #220]	; (8004f38 <ai_platform_network_post_init+0x100>)
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004e60:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1fb      	bne.n	8004e60 <ai_platform_network_post_init+0x28>
 8004e68:	4b34      	ldr	r3, [pc, #208]	; (8004f3c <ai_platform_network_post_init+0x104>)
 8004e6a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004e6e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004e72:	4b33      	ldr	r3, [pc, #204]	; (8004f40 <ai_platform_network_post_init+0x108>)
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d037      	beq.n	8004ee8 <ai_platform_network_post_init+0xb0>
 8004e78:	e7fe      	b.n	8004e78 <ai_platform_network_post_init+0x40>
 8004e7a:	f7ff fb31 	bl	80044e0 <_ai_platform_acquire_crc>
 8004e7e:	4b2d      	ldr	r3, [pc, #180]	; (8004f34 <ai_platform_network_post_init+0xfc>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e8a:	d010      	beq.n	8004eae <ai_platform_network_post_init+0x76>
 8004e8c:	4a2a      	ldr	r2, [pc, #168]	; (8004f38 <ai_platform_network_post_init+0x100>)
 8004e8e:	2301      	movs	r3, #1
 8004e90:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004e94:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1fb      	bne.n	8004e94 <ai_platform_network_post_init+0x5c>
 8004e9c:	4b27      	ldr	r3, [pc, #156]	; (8004f3c <ai_platform_network_post_init+0x104>)
 8004e9e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004ea2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004ea6:	4b26      	ldr	r3, [pc, #152]	; (8004f40 <ai_platform_network_post_init+0x108>)
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d00d      	beq.n	8004ec8 <ai_platform_network_post_init+0x90>
 8004eac:	e7fe      	b.n	8004eac <ai_platform_network_post_init+0x74>
 8004eae:	4a25      	ldr	r2, [pc, #148]	; (8004f44 <ai_platform_network_post_init+0x10c>)
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	6093      	str	r3, [r2, #8]
 8004eb4:	6893      	ldr	r3, [r2, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1fc      	bne.n	8004eb4 <ai_platform_network_post_init+0x7c>
 8004eba:	4b20      	ldr	r3, [pc, #128]	; (8004f3c <ai_platform_network_post_init+0x104>)
 8004ebc:	6013      	str	r3, [r2, #0]
 8004ebe:	6812      	ldr	r2, [r2, #0]
 8004ec0:	4b1f      	ldr	r3, [pc, #124]	; (8004f40 <ai_platform_network_post_init+0x108>)
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d000      	beq.n	8004ec8 <ai_platform_network_post_init+0x90>
 8004ec6:	e7fe      	b.n	8004ec6 <ai_platform_network_post_init+0x8e>
 8004ec8:	f7ff fb0c 	bl	80044e4 <_ai_platform_release_crc>
 8004ecc:	2000      	movs	r0, #0
 8004ece:	bd38      	pop	{r3, r4, r5, pc}
 8004ed0:	4a1c      	ldr	r2, [pc, #112]	; (8004f44 <ai_platform_network_post_init+0x10c>)
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	6093      	str	r3, [r2, #8]
 8004ed6:	6893      	ldr	r3, [r2, #8]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1fc      	bne.n	8004ed6 <ai_platform_network_post_init+0x9e>
 8004edc:	4b17      	ldr	r3, [pc, #92]	; (8004f3c <ai_platform_network_post_init+0x104>)
 8004ede:	6013      	str	r3, [r2, #0]
 8004ee0:	6812      	ldr	r2, [r2, #0]
 8004ee2:	4b17      	ldr	r3, [pc, #92]	; (8004f40 <ai_platform_network_post_init+0x108>)
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d11a      	bne.n	8004f1e <ai_platform_network_post_init+0xe6>
 8004ee8:	f7ff fafc 	bl	80044e4 <_ai_platform_release_crc>
 8004eec:	68e3      	ldr	r3, [r4, #12]
 8004eee:	f013 0502 	ands.w	r5, r3, #2
 8004ef2:	d015      	beq.n	8004f20 <ai_platform_network_post_init+0xe8>
 8004ef4:	4620      	mov	r0, r4
 8004ef6:	f000 faf7 	bl	80054e8 <ai_layers_post_init_all>
 8004efa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004efc:	b16b      	cbz	r3, 8004f1a <ai_platform_network_post_init+0xe2>
 8004efe:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8004f00:	e007      	b.n	8004f12 <ai_platform_network_post_init+0xda>
 8004f02:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8004f06:	4798      	blx	r3
 8004f08:	692b      	ldr	r3, [r5, #16]
 8004f0a:	42ab      	cmp	r3, r5
 8004f0c:	d005      	beq.n	8004f1a <ai_platform_network_post_init+0xe2>
 8004f0e:	b123      	cbz	r3, 8004f1a <ai_platform_network_post_init+0xe2>
 8004f10:	461d      	mov	r5, r3
 8004f12:	4629      	mov	r1, r5
 8004f14:	2000      	movs	r0, #0
 8004f16:	2d00      	cmp	r5, #0
 8004f18:	d1f3      	bne.n	8004f02 <ai_platform_network_post_init+0xca>
 8004f1a:	2001      	movs	r0, #1
 8004f1c:	bd38      	pop	{r3, r4, r5, pc}
 8004f1e:	e7fe      	b.n	8004f1e <ai_platform_network_post_init+0xe6>
 8004f20:	2210      	movs	r2, #16
 8004f22:	2111      	movs	r1, #17
 8004f24:	18a0      	adds	r0, r4, r2
 8004f26:	f000 fa9b 	bl	8005460 <core_set_error>
 8004f2a:	4628      	mov	r0, r5
 8004f2c:	bd38      	pop	{r3, r4, r5, pc}
 8004f2e:	bf00      	nop
 8004f30:	a1c00100 	.word	0xa1c00100
 8004f34:	e0042000 	.word	0xe0042000
 8004f38:	58024000 	.word	0x58024000
 8004f3c:	f407a5c2 	.word	0xf407a5c2
 8004f40:	b5e8b5cd 	.word	0xb5e8b5cd
 8004f44:	40023000 	.word	0x40023000

08004f48 <ai_platform_network_process>:
 8004f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f4c:	460e      	mov	r6, r1
 8004f4e:	b085      	sub	sp, #20
 8004f50:	4693      	mov	fp, r2
 8004f52:	4605      	mov	r5, r0
 8004f54:	b120      	cbz	r0, 8004f60 <ai_platform_network_process+0x18>
 8004f56:	4bb8      	ldr	r3, [pc, #736]	; (8005238 <ai_platform_network_process+0x2f0>)
 8004f58:	6802      	ldr	r2, [r0, #0]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	bf18      	it	ne
 8004f5e:	2500      	movne	r5, #0
 8004f60:	f7ff fabe 	bl	80044e0 <_ai_platform_acquire_crc>
 8004f64:	4bb5      	ldr	r3, [pc, #724]	; (800523c <ai_platform_network_process+0x2f4>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f70:	d010      	beq.n	8004f94 <ai_platform_network_process+0x4c>
 8004f72:	4ab3      	ldr	r2, [pc, #716]	; (8005240 <ai_platform_network_process+0x2f8>)
 8004f74:	2301      	movs	r3, #1
 8004f76:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004f7a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1fb      	bne.n	8004f7a <ai_platform_network_process+0x32>
 8004f82:	4bb0      	ldr	r3, [pc, #704]	; (8005244 <ai_platform_network_process+0x2fc>)
 8004f84:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004f88:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004f8c:	4bae      	ldr	r3, [pc, #696]	; (8005248 <ai_platform_network_process+0x300>)
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d00d      	beq.n	8004fae <ai_platform_network_process+0x66>
 8004f92:	e7fe      	b.n	8004f92 <ai_platform_network_process+0x4a>
 8004f94:	4aad      	ldr	r2, [pc, #692]	; (800524c <ai_platform_network_process+0x304>)
 8004f96:	2301      	movs	r3, #1
 8004f98:	6093      	str	r3, [r2, #8]
 8004f9a:	6893      	ldr	r3, [r2, #8]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1fc      	bne.n	8004f9a <ai_platform_network_process+0x52>
 8004fa0:	4ba8      	ldr	r3, [pc, #672]	; (8005244 <ai_platform_network_process+0x2fc>)
 8004fa2:	6013      	str	r3, [r2, #0]
 8004fa4:	6812      	ldr	r2, [r2, #0]
 8004fa6:	4ba8      	ldr	r3, [pc, #672]	; (8005248 <ai_platform_network_process+0x300>)
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	f040 812c 	bne.w	8005206 <ai_platform_network_process+0x2be>
 8004fae:	f7ff fa99 	bl	80044e4 <_ai_platform_release_crc>
 8004fb2:	2d00      	cmp	r5, #0
 8004fb4:	f000 8154 	beq.w	8005260 <ai_platform_network_process+0x318>
 8004fb8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f000 8124 	beq.w	8005208 <ai_platform_network_process+0x2c0>
 8004fc0:	68eb      	ldr	r3, [r5, #12]
 8004fc2:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8004fc6:	f003 0303 	and.w	r3, r3, #3
 8004fca:	2700      	movs	r7, #0
 8004fcc:	2b03      	cmp	r3, #3
 8004fce:	616f      	str	r7, [r5, #20]
 8004fd0:	f040 813e 	bne.w	8005250 <ai_platform_network_process+0x308>
 8004fd4:	2e00      	cmp	r6, #0
 8004fd6:	f000 811d 	beq.w	8005214 <ai_platform_network_process+0x2cc>
 8004fda:	f1ba 0f00 	cmp.w	sl, #0
 8004fde:	f000 8119 	beq.w	8005214 <ai_platform_network_process+0x2cc>
 8004fe2:	f8ba 3000 	ldrh.w	r3, [sl]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f000 8114 	beq.w	8005214 <ai_platform_network_process+0x2cc>
 8004fec:	69b3      	ldr	r3, [r6, #24]
 8004fee:	f8cd b00c 	str.w	fp, [sp, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8004ff8:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d072      	beq.n	80050e6 <ai_platform_network_process+0x19e>
 8005000:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8005004:	2c00      	cmp	r4, #0
 8005006:	d06e      	beq.n	80050e6 <ai_platform_network_process+0x19e>
 8005008:	f8da 3008 	ldr.w	r3, [sl, #8]
 800500c:	f8d3 9000 	ldr.w	r9, [r3]
 8005010:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8005014:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8005018:	f000 81de 	beq.w	80053d8 <ai_platform_network_process+0x490>
 800501c:	69a3      	ldr	r3, [r4, #24]
 800501e:	2101      	movs	r1, #1
 8005020:	4630      	mov	r0, r6
 8005022:	685d      	ldr	r5, [r3, #4]
 8005024:	f7ff fa0e 	bl	8004444 <ai_buffer_get_size>
 8005028:	4285      	cmp	r5, r0
 800502a:	f0c0 811b 	bcc.w	8005264 <ai_platform_network_process+0x31c>
 800502e:	68e0      	ldr	r0, [r4, #12]
 8005030:	69b1      	ldr	r1, [r6, #24]
 8005032:	68c2      	ldr	r2, [r0, #12]
 8005034:	68cb      	ldr	r3, [r1, #12]
 8005036:	429a      	cmp	r2, r3
 8005038:	f040 8114 	bne.w	8005264 <ai_platform_network_process+0x31c>
 800503c:	6882      	ldr	r2, [r0, #8]
 800503e:	688b      	ldr	r3, [r1, #8]
 8005040:	429a      	cmp	r2, r3
 8005042:	f040 810f 	bne.w	8005264 <ai_platform_network_process+0x31c>
 8005046:	6842      	ldr	r2, [r0, #4]
 8005048:	684b      	ldr	r3, [r1, #4]
 800504a:	429a      	cmp	r2, r3
 800504c:	f040 810a 	bne.w	8005264 <ai_platform_network_process+0x31c>
 8005050:	69a3      	ldr	r3, [r4, #24]
 8005052:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005056:	f003 f9b7 	bl	80083c8 <ai_array_get_data_byte_size>
 800505a:	4605      	mov	r5, r0
 800505c:	4620      	mov	r0, r4
 800505e:	f003 f9cb 	bl	80083f8 <get_tensor_byte_size>
 8005062:	4285      	cmp	r5, r0
 8005064:	f0c0 80fe 	bcc.w	8005264 <ai_platform_network_process+0x31c>
 8005068:	69a3      	ldr	r3, [r4, #24]
 800506a:	6818      	ldr	r0, [r3, #0]
 800506c:	f003 f918 	bl	80082a0 <ai_array_to_buffer_fmt>
 8005070:	6833      	ldr	r3, [r6, #0]
 8005072:	4058      	eors	r0, r3
 8005074:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8005078:	f040 81b9 	bne.w	80053ee <ai_platform_network_process+0x4a6>
 800507c:	6873      	ldr	r3, [r6, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	f000 81ac 	beq.w	80053dc <ai_platform_network_process+0x494>
 8005084:	69b3      	ldr	r3, [r6, #24]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	f000 819c 	beq.w	80053c6 <ai_platform_network_process+0x47e>
 800508e:	9a01      	ldr	r2, [sp, #4]
 8005090:	429a      	cmp	r2, r3
 8005092:	bf38      	it	cc
 8005094:	461a      	movcc	r2, r3
 8005096:	4620      	mov	r0, r4
 8005098:	9201      	str	r2, [sp, #4]
 800509a:	f003 f9ad 	bl	80083f8 <get_tensor_byte_size>
 800509e:	f8c8 0008 	str.w	r0, [r8, #8]
 80050a2:	69b3      	ldr	r3, [r6, #24]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	fb00 f303 	mul.w	r3, r0, r3
 80050aa:	f8c8 300c 	str.w	r3, [r8, #12]
 80050ae:	6871      	ldr	r1, [r6, #4]
 80050b0:	f8c8 1004 	str.w	r1, [r8, #4]
 80050b4:	440b      	add	r3, r1
 80050b6:	f849 300b 	str.w	r3, [r9, fp]
 80050ba:	69a0      	ldr	r0, [r4, #24]
 80050bc:	6803      	ldr	r3, [r0, #0]
 80050be:	009a      	lsls	r2, r3, #2
 80050c0:	f107 0701 	add.w	r7, r7, #1
 80050c4:	f106 061c 	add.w	r6, r6, #28
 80050c8:	f100 80af 	bmi.w	800522a <ai_platform_network_process+0x2e2>
 80050cc:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80050d0:	1a9b      	subs	r3, r3, r2
 80050d2:	4419      	add	r1, r3
 80050d4:	6081      	str	r1, [r0, #8]
 80050d6:	69a3      	ldr	r3, [r4, #24]
 80050d8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80050dc:	60da      	str	r2, [r3, #12]
 80050de:	f8ba 3000 	ldrh.w	r3, [sl]
 80050e2:	42bb      	cmp	r3, r7
 80050e4:	d888      	bhi.n	8004ff8 <ai_platform_network_process+0xb0>
 80050e6:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 80050ea:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 80050ec:	f1bb 0f00 	cmp.w	fp, #0
 80050f0:	f000 8186 	beq.w	8005400 <ai_platform_network_process+0x4b8>
 80050f4:	2a01      	cmp	r2, #1
 80050f6:	f240 815e 	bls.w	80053b6 <ai_platform_network_process+0x46e>
 80050fa:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 80050fe:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005102:	2b00      	cmp	r3, #0
 8005104:	f000 8157 	beq.w	80053b6 <ai_platform_network_process+0x46e>
 8005108:	465e      	mov	r6, fp
 800510a:	2700      	movs	r7, #0
 800510c:	462c      	mov	r4, r5
 800510e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005112:	2b00      	cmp	r3, #0
 8005114:	f000 80b4 	beq.w	8005280 <ai_platform_network_process+0x338>
 8005118:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 800511c:	2d00      	cmp	r5, #0
 800511e:	f000 80af 	beq.w	8005280 <ai_platform_network_process+0x338>
 8005122:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8005126:	f8d3 8000 	ldr.w	r8, [r3]
 800512a:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 800512e:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8005132:	f000 8171 	beq.w	8005418 <ai_platform_network_process+0x4d0>
 8005136:	69ab      	ldr	r3, [r5, #24]
 8005138:	2101      	movs	r1, #1
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	9302      	str	r3, [sp, #8]
 800513e:	4630      	mov	r0, r6
 8005140:	f7ff f980 	bl	8004444 <ai_buffer_get_size>
 8005144:	9b02      	ldr	r3, [sp, #8]
 8005146:	4283      	cmp	r3, r0
 8005148:	f0c0 8134 	bcc.w	80053b4 <ai_platform_network_process+0x46c>
 800514c:	68e8      	ldr	r0, [r5, #12]
 800514e:	69b1      	ldr	r1, [r6, #24]
 8005150:	68c2      	ldr	r2, [r0, #12]
 8005152:	68cb      	ldr	r3, [r1, #12]
 8005154:	429a      	cmp	r2, r3
 8005156:	f040 812d 	bne.w	80053b4 <ai_platform_network_process+0x46c>
 800515a:	6882      	ldr	r2, [r0, #8]
 800515c:	688b      	ldr	r3, [r1, #8]
 800515e:	429a      	cmp	r2, r3
 8005160:	f040 8128 	bne.w	80053b4 <ai_platform_network_process+0x46c>
 8005164:	6842      	ldr	r2, [r0, #4]
 8005166:	684b      	ldr	r3, [r1, #4]
 8005168:	429a      	cmp	r2, r3
 800516a:	f040 8123 	bne.w	80053b4 <ai_platform_network_process+0x46c>
 800516e:	69ab      	ldr	r3, [r5, #24]
 8005170:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005174:	f003 f928 	bl	80083c8 <ai_array_get_data_byte_size>
 8005178:	9002      	str	r0, [sp, #8]
 800517a:	4628      	mov	r0, r5
 800517c:	f003 f93c 	bl	80083f8 <get_tensor_byte_size>
 8005180:	9b02      	ldr	r3, [sp, #8]
 8005182:	4283      	cmp	r3, r0
 8005184:	f0c0 8116 	bcc.w	80053b4 <ai_platform_network_process+0x46c>
 8005188:	69ab      	ldr	r3, [r5, #24]
 800518a:	6818      	ldr	r0, [r3, #0]
 800518c:	f003 f888 	bl	80082a0 <ai_array_to_buffer_fmt>
 8005190:	6833      	ldr	r3, [r6, #0]
 8005192:	4058      	eors	r0, r3
 8005194:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8005198:	f040 8136 	bne.w	8005408 <ai_platform_network_process+0x4c0>
 800519c:	6873      	ldr	r3, [r6, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f000 814d 	beq.w	800543e <ai_platform_network_process+0x4f6>
 80051a4:	69b3      	ldr	r3, [r6, #24]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	f000 813f 	beq.w	800542c <ai_platform_network_process+0x4e4>
 80051ae:	9a01      	ldr	r2, [sp, #4]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	bf38      	it	cc
 80051b4:	461a      	movcc	r2, r3
 80051b6:	4628      	mov	r0, r5
 80051b8:	9201      	str	r2, [sp, #4]
 80051ba:	f003 f91d 	bl	80083f8 <get_tensor_byte_size>
 80051be:	f8ca 0008 	str.w	r0, [sl, #8]
 80051c2:	69b3      	ldr	r3, [r6, #24]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	fb00 f303 	mul.w	r3, r0, r3
 80051ca:	f8ca 300c 	str.w	r3, [sl, #12]
 80051ce:	6871      	ldr	r1, [r6, #4]
 80051d0:	f8ca 1004 	str.w	r1, [sl, #4]
 80051d4:	440b      	add	r3, r1
 80051d6:	f848 300b 	str.w	r3, [r8, fp]
 80051da:	69a8      	ldr	r0, [r5, #24]
 80051dc:	6803      	ldr	r3, [r0, #0]
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	f107 0701 	add.w	r7, r7, #1
 80051e4:	f106 061c 	add.w	r6, r6, #28
 80051e8:	d445      	bmi.n	8005276 <ai_platform_network_process+0x32e>
 80051ea:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80051ee:	1a9b      	subs	r3, r3, r2
 80051f0:	4419      	add	r1, r3
 80051f2:	6081      	str	r1, [r0, #8]
 80051f4:	69ab      	ldr	r3, [r5, #24]
 80051f6:	f8da 2004 	ldr.w	r2, [sl, #4]
 80051fa:	60da      	str	r2, [r3, #12]
 80051fc:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005200:	429f      	cmp	r7, r3
 8005202:	d384      	bcc.n	800510e <ai_platform_network_process+0x1c6>
 8005204:	e03c      	b.n	8005280 <ai_platform_network_process+0x338>
 8005206:	e7fe      	b.n	8005206 <ai_platform_network_process+0x2be>
 8005208:	68ea      	ldr	r2, [r5, #12]
 800520a:	616b      	str	r3, [r5, #20]
 800520c:	f002 0203 	and.w	r2, r2, #3
 8005210:	2a03      	cmp	r2, #3
 8005212:	d11d      	bne.n	8005250 <ai_platform_network_process+0x308>
 8005214:	2217      	movs	r2, #23
 8005216:	2112      	movs	r1, #18
 8005218:	f105 0010 	add.w	r0, r5, #16
 800521c:	f000 f920 	bl	8005460 <core_set_error>
 8005220:	2400      	movs	r4, #0
 8005222:	4620      	mov	r0, r4
 8005224:	b005      	add	sp, #20
 8005226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800522a:	f8ba 3000 	ldrh.w	r3, [sl]
 800522e:	429f      	cmp	r7, r3
 8005230:	f4ff aee2 	bcc.w	8004ff8 <ai_platform_network_process+0xb0>
 8005234:	e757      	b.n	80050e6 <ai_platform_network_process+0x19e>
 8005236:	bf00      	nop
 8005238:	a1c00100 	.word	0xa1c00100
 800523c:	e0042000 	.word	0xe0042000
 8005240:	58024000 	.word	0x58024000
 8005244:	f407a5c2 	.word	0xf407a5c2
 8005248:	b5e8b5cd 	.word	0xb5e8b5cd
 800524c:	40023000 	.word	0x40023000
 8005250:	2230      	movs	r2, #48	; 0x30
 8005252:	2111      	movs	r1, #17
 8005254:	f105 0010 	add.w	r0, r5, #16
 8005258:	f000 f902 	bl	8005460 <core_set_error>
 800525c:	2400      	movs	r4, #0
 800525e:	e7e0      	b.n	8005222 <ai_platform_network_process+0x2da>
 8005260:	462c      	mov	r4, r5
 8005262:	e7de      	b.n	8005222 <ai_platform_network_process+0x2da>
 8005264:	9d02      	ldr	r5, [sp, #8]
 8005266:	2218      	movs	r2, #24
 8005268:	2112      	movs	r1, #18
 800526a:	f105 0010 	add.w	r0, r5, #16
 800526e:	f000 f8f7 	bl	8005460 <core_set_error>
 8005272:	2400      	movs	r4, #0
 8005274:	e7d5      	b.n	8005222 <ai_platform_network_process+0x2da>
 8005276:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800527a:	429f      	cmp	r7, r3
 800527c:	f4ff af47 	bcc.w	800510e <ai_platform_network_process+0x1c6>
 8005280:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005284:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8005286:	82a3      	strh	r3, [r4, #20]
 8005288:	4625      	mov	r5, r4
 800528a:	2a00      	cmp	r2, #0
 800528c:	f040 808c 	bne.w	80053a8 <ai_platform_network_process+0x460>
 8005290:	4616      	mov	r6, r2
 8005292:	4617      	mov	r7, r2
 8005294:	8aec      	ldrh	r4, [r5, #22]
 8005296:	429c      	cmp	r4, r3
 8005298:	bf38      	it	cc
 800529a:	46ab      	movcc	fp, r5
 800529c:	d2c1      	bcs.n	8005222 <ai_platform_network_process+0x2da>
 800529e:	2e00      	cmp	r6, #0
 80052a0:	d030      	beq.n	8005304 <ai_platform_network_process+0x3bc>
 80052a2:	f04f 0800 	mov.w	r8, #0
 80052a6:	e014      	b.n	80052d2 <ai_platform_network_process+0x38a>
 80052a8:	6882      	ldr	r2, [r0, #8]
 80052aa:	68c5      	ldr	r5, [r0, #12]
 80052ac:	6863      	ldr	r3, [r4, #4]
 80052ae:	1b52      	subs	r2, r2, r5
 80052b0:	4413      	add	r3, r2
 80052b2:	6083      	str	r3, [r0, #8]
 80052b4:	698b      	ldr	r3, [r1, #24]
 80052b6:	6862      	ldr	r2, [r4, #4]
 80052b8:	60da      	str	r2, [r3, #12]
 80052ba:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80052be:	f859 200a 	ldr.w	r2, [r9, sl]
 80052c2:	440b      	add	r3, r1
 80052c4:	4293      	cmp	r3, r2
 80052c6:	bf24      	itt	cs
 80052c8:	68e3      	ldrcs	r3, [r4, #12]
 80052ca:	1ad3      	subcs	r3, r2, r3
 80052cc:	6063      	str	r3, [r4, #4]
 80052ce:	f108 0801 	add.w	r8, r8, #1
 80052d2:	8833      	ldrh	r3, [r6, #0]
 80052d4:	4543      	cmp	r3, r8
 80052d6:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 80052da:	d913      	bls.n	8005304 <ai_platform_network_process+0x3bc>
 80052dc:	6873      	ldr	r3, [r6, #4]
 80052de:	b18b      	cbz	r3, 8005304 <ai_platform_network_process+0x3bc>
 80052e0:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 80052e4:	b171      	cbz	r1, 8005304 <ai_platform_network_process+0x3bc>
 80052e6:	6988      	ldr	r0, [r1, #24]
 80052e8:	68b2      	ldr	r2, [r6, #8]
 80052ea:	6803      	ldr	r3, [r0, #0]
 80052ec:	f8d2 9000 	ldr.w	r9, [r2]
 80052f0:	009d      	lsls	r5, r3, #2
 80052f2:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 80052f6:	d5d7      	bpl.n	80052a8 <ai_platform_network_process+0x360>
 80052f8:	6881      	ldr	r1, [r0, #8]
 80052fa:	68a2      	ldr	r2, [r4, #8]
 80052fc:	6860      	ldr	r0, [r4, #4]
 80052fe:	f001 fdf9 	bl	8006ef4 <st_int8_copy>
 8005302:	e7da      	b.n	80052ba <ai_platform_network_process+0x372>
 8005304:	4658      	mov	r0, fp
 8005306:	f000 f903 	bl	8005510 <ai_layers_forward_all>
 800530a:	2f00      	cmp	r7, #0
 800530c:	d03d      	beq.n	800538a <ai_platform_network_process+0x442>
 800530e:	2400      	movs	r4, #0
 8005310:	e016      	b.n	8005340 <ai_platform_network_process+0x3f8>
 8005312:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8005316:	f859 100a 	ldr.w	r1, [r9, sl]
 800531a:	4413      	add	r3, r2
 800531c:	428b      	cmp	r3, r1
 800531e:	bf24      	itt	cs
 8005320:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8005324:	1acb      	subcs	r3, r1, r3
 8005326:	f8c8 3004 	str.w	r3, [r8, #4]
 800532a:	6981      	ldr	r1, [r0, #24]
 800532c:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8005330:	1b52      	subs	r2, r2, r5
 8005332:	4413      	add	r3, r2
 8005334:	608b      	str	r3, [r1, #8]
 8005336:	6983      	ldr	r3, [r0, #24]
 8005338:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800533c:	60da      	str	r2, [r3, #12]
 800533e:	3401      	adds	r4, #1
 8005340:	883b      	ldrh	r3, [r7, #0]
 8005342:	42a3      	cmp	r3, r4
 8005344:	d921      	bls.n	800538a <ai_platform_network_process+0x442>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	b1fb      	cbz	r3, 800538a <ai_platform_network_process+0x442>
 800534a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800534e:	b1e0      	cbz	r0, 800538a <ai_platform_network_process+0x442>
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	6983      	ldr	r3, [r0, #24]
 8005354:	f8d2 9000 	ldr.w	r9, [r2]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	0092      	lsls	r2, r2, #2
 800535c:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8005360:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8005364:	d5d5      	bpl.n	8005312 <ai_platform_network_process+0x3ca>
 8005366:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 800536a:	6898      	ldr	r0, [r3, #8]
 800536c:	f001 fdc2 	bl	8006ef4 <st_int8_copy>
 8005370:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8005374:	f859 200a 	ldr.w	r2, [r9, sl]
 8005378:	440b      	add	r3, r1
 800537a:	4293      	cmp	r3, r2
 800537c:	bf24      	itt	cs
 800537e:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8005382:	1ad3      	subcs	r3, r2, r3
 8005384:	f8c8 3004 	str.w	r3, [r8, #4]
 8005388:	e7d9      	b.n	800533e <ai_platform_network_process+0x3f6>
 800538a:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800538e:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8005392:	3401      	adds	r4, #1
 8005394:	b2a4      	uxth	r4, r4
 8005396:	42a3      	cmp	r3, r4
 8005398:	f8ab 4016 	strh.w	r4, [fp, #22]
 800539c:	f63f af7f 	bhi.w	800529e <ai_platform_network_process+0x356>
 80053a0:	4620      	mov	r0, r4
 80053a2:	b005      	add	sp, #20
 80053a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053a8:	2a01      	cmp	r2, #1
 80053aa:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 80053ac:	d03c      	beq.n	8005428 <ai_platform_network_process+0x4e0>
 80053ae:	f106 070c 	add.w	r7, r6, #12
 80053b2:	e76f      	b.n	8005294 <ai_platform_network_process+0x34c>
 80053b4:	4625      	mov	r5, r4
 80053b6:	2218      	movs	r2, #24
 80053b8:	2113      	movs	r1, #19
 80053ba:	f105 0010 	add.w	r0, r5, #16
 80053be:	f000 f84f 	bl	8005460 <core_set_error>
 80053c2:	2400      	movs	r4, #0
 80053c4:	e72d      	b.n	8005222 <ai_platform_network_process+0x2da>
 80053c6:	9d02      	ldr	r5, [sp, #8]
 80053c8:	4604      	mov	r4, r0
 80053ca:	2221      	movs	r2, #33	; 0x21
 80053cc:	2112      	movs	r1, #18
 80053ce:	f105 0010 	add.w	r0, r5, #16
 80053d2:	f000 f845 	bl	8005460 <core_set_error>
 80053d6:	e724      	b.n	8005222 <ai_platform_network_process+0x2da>
 80053d8:	9d02      	ldr	r5, [sp, #8]
 80053da:	e71b      	b.n	8005214 <ai_platform_network_process+0x2cc>
 80053dc:	9d02      	ldr	r5, [sp, #8]
 80053de:	4604      	mov	r4, r0
 80053e0:	2217      	movs	r2, #23
 80053e2:	2112      	movs	r1, #18
 80053e4:	f105 0010 	add.w	r0, r5, #16
 80053e8:	f000 f83a 	bl	8005460 <core_set_error>
 80053ec:	e719      	b.n	8005222 <ai_platform_network_process+0x2da>
 80053ee:	9d02      	ldr	r5, [sp, #8]
 80053f0:	2219      	movs	r2, #25
 80053f2:	2112      	movs	r1, #18
 80053f4:	f105 0010 	add.w	r0, r5, #16
 80053f8:	f000 f832 	bl	8005460 <core_set_error>
 80053fc:	2400      	movs	r4, #0
 80053fe:	e710      	b.n	8005222 <ai_platform_network_process+0x2da>
 8005400:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005404:	82ab      	strh	r3, [r5, #20]
 8005406:	e740      	b.n	800528a <ai_platform_network_process+0x342>
 8005408:	f104 0010 	add.w	r0, r4, #16
 800540c:	2219      	movs	r2, #25
 800540e:	2113      	movs	r1, #19
 8005410:	f000 f826 	bl	8005460 <core_set_error>
 8005414:	2400      	movs	r4, #0
 8005416:	e704      	b.n	8005222 <ai_platform_network_process+0x2da>
 8005418:	f104 0010 	add.w	r0, r4, #16
 800541c:	2217      	movs	r2, #23
 800541e:	2113      	movs	r1, #19
 8005420:	f000 f81e 	bl	8005460 <core_set_error>
 8005424:	4654      	mov	r4, sl
 8005426:	e6fc      	b.n	8005222 <ai_platform_network_process+0x2da>
 8005428:	2700      	movs	r7, #0
 800542a:	e733      	b.n	8005294 <ai_platform_network_process+0x34c>
 800542c:	4625      	mov	r5, r4
 800542e:	2221      	movs	r2, #33	; 0x21
 8005430:	4604      	mov	r4, r0
 8005432:	2113      	movs	r1, #19
 8005434:	f105 0010 	add.w	r0, r5, #16
 8005438:	f000 f812 	bl	8005460 <core_set_error>
 800543c:	e6f1      	b.n	8005222 <ai_platform_network_process+0x2da>
 800543e:	4625      	mov	r5, r4
 8005440:	2217      	movs	r2, #23
 8005442:	4604      	mov	r4, r0
 8005444:	2113      	movs	r1, #19
 8005446:	f105 0010 	add.w	r0, r5, #16
 800544a:	f000 f809 	bl	8005460 <core_set_error>
 800544e:	e6e8      	b.n	8005222 <ai_platform_network_process+0x2da>

08005450 <core_init>:
 8005450:	2001      	movs	r0, #1
 8005452:	4770      	bx	lr

08005454 <core_get_error>:
 8005454:	4603      	mov	r3, r0
 8005456:	2200      	movs	r2, #0
 8005458:	6800      	ldr	r0, [r0, #0]
 800545a:	601a      	str	r2, [r3, #0]
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop

08005460 <core_set_error>:
 8005460:	4603      	mov	r3, r0
 8005462:	7800      	ldrb	r0, [r0, #0]
 8005464:	b108      	cbz	r0, 800546a <core_set_error+0xa>
 8005466:	2000      	movs	r0, #0
 8005468:	4770      	bx	lr
 800546a:	7019      	strb	r1, [r3, #0]
 800546c:	6819      	ldr	r1, [r3, #0]
 800546e:	f362 211f 	bfi	r1, r2, #8, #24
 8005472:	2001      	movs	r0, #1
 8005474:	6019      	str	r1, [r3, #0]
 8005476:	4770      	bx	lr

08005478 <ai_check_custom_types>:
 8005478:	b082      	sub	sp, #8
 800547a:	4b13      	ldr	r3, [pc, #76]	; (80054c8 <ai_check_custom_types+0x50>)
 800547c:	9301      	str	r3, [sp, #4]
 800547e:	b118      	cbz	r0, 8005488 <ai_check_custom_types+0x10>
 8005480:	7803      	ldrb	r3, [r0, #0]
 8005482:	2b03      	cmp	r3, #3
 8005484:	d002      	beq.n	800548c <ai_check_custom_types+0x14>
 8005486:	2000      	movs	r0, #0
 8005488:	b002      	add	sp, #8
 800548a:	4770      	bx	lr
 800548c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8005490:	4293      	cmp	r3, r2
 8005492:	d004      	beq.n	800549e <ai_check_custom_types+0x26>
 8005494:	2001      	movs	r0, #1
 8005496:	f080 0001 	eor.w	r0, r0, #1
 800549a:	b002      	add	sp, #8
 800549c:	4770      	bx	lr
 800549e:	7842      	ldrb	r2, [r0, #1]
 80054a0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	f100 0001 	add.w	r0, r0, #1
 80054aa:	d1f3      	bne.n	8005494 <ai_check_custom_types+0x1c>
 80054ac:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80054b0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d1ed      	bne.n	8005494 <ai_check_custom_types+0x1c>
 80054b8:	7842      	ldrb	r2, [r0, #1]
 80054ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d1e8      	bne.n	8005494 <ai_check_custom_types+0x1c>
 80054c2:	2000      	movs	r0, #0
 80054c4:	e7e7      	b.n	8005496 <ai_check_custom_types+0x1e>
 80054c6:	bf00      	nop
 80054c8:	84048403 	.word	0x84048403

080054cc <ai_layers_init_all>:
 80054cc:	4601      	mov	r1, r0
 80054ce:	2000      	movs	r0, #0
 80054d0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80054d2:	b143      	cbz	r3, 80054e6 <ai_layers_init_all+0x1a>
 80054d4:	691a      	ldr	r2, [r3, #16]
 80054d6:	60d9      	str	r1, [r3, #12]
 80054d8:	429a      	cmp	r2, r3
 80054da:	f100 0001 	add.w	r0, r0, #1
 80054de:	d002      	beq.n	80054e6 <ai_layers_init_all+0x1a>
 80054e0:	b10a      	cbz	r2, 80054e6 <ai_layers_init_all+0x1a>
 80054e2:	4613      	mov	r3, r2
 80054e4:	e7f5      	b.n	80054d2 <ai_layers_init_all+0x6>
 80054e6:	4770      	bx	lr

080054e8 <ai_layers_post_init_all>:
 80054e8:	b538      	push	{r3, r4, r5, lr}
 80054ea:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80054ec:	2500      	movs	r5, #0
 80054ee:	b16c      	cbz	r4, 800550c <ai_layers_post_init_all+0x24>
 80054f0:	6863      	ldr	r3, [r4, #4]
 80054f2:	07db      	lsls	r3, r3, #31
 80054f4:	d504      	bpl.n	8005500 <ai_layers_post_init_all+0x18>
 80054f6:	6a23      	ldr	r3, [r4, #32]
 80054f8:	4620      	mov	r0, r4
 80054fa:	b10b      	cbz	r3, 8005500 <ai_layers_post_init_all+0x18>
 80054fc:	4798      	blx	r3
 80054fe:	3501      	adds	r5, #1
 8005500:	6923      	ldr	r3, [r4, #16]
 8005502:	42a3      	cmp	r3, r4
 8005504:	d002      	beq.n	800550c <ai_layers_post_init_all+0x24>
 8005506:	b10b      	cbz	r3, 800550c <ai_layers_post_init_all+0x24>
 8005508:	461c      	mov	r4, r3
 800550a:	e7f0      	b.n	80054ee <ai_layers_post_init_all+0x6>
 800550c:	4628      	mov	r0, r5
 800550e:	bd38      	pop	{r3, r4, r5, pc}

08005510 <ai_layers_forward_all>:
 8005510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005514:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8005518:	4604      	mov	r4, r0
 800551a:	f1b8 0f00 	cmp.w	r8, #0
 800551e:	d02b      	beq.n	8005578 <ai_layers_forward_all+0x68>
 8005520:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8005522:	6381      	str	r1, [r0, #56]	; 0x38
 8005524:	b321      	cbz	r1, 8005570 <ai_layers_forward_all+0x60>
 8005526:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005528:	2001      	movs	r0, #1
 800552a:	47c0      	blx	r8
 800552c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800552e:	b1fe      	cbz	r6, 8005570 <ai_layers_forward_all+0x60>
 8005530:	2700      	movs	r7, #0
 8005532:	4631      	mov	r1, r6
 8005534:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005536:	2002      	movs	r0, #2
 8005538:	47c0      	blx	r8
 800553a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800553c:	4628      	mov	r0, r5
 800553e:	696b      	ldr	r3, [r5, #20]
 8005540:	4798      	blx	r3
 8005542:	692e      	ldr	r6, [r5, #16]
 8005544:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005546:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005548:	42b5      	cmp	r5, r6
 800554a:	f04f 0003 	mov.w	r0, #3
 800554e:	d007      	beq.n	8005560 <ai_layers_forward_all+0x50>
 8005550:	47c0      	blx	r8
 8005552:	3701      	adds	r7, #1
 8005554:	63a6      	str	r6, [r4, #56]	; 0x38
 8005556:	2e00      	cmp	r6, #0
 8005558:	d1eb      	bne.n	8005532 <ai_layers_forward_all+0x22>
 800555a:	4638      	mov	r0, r7
 800555c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005560:	2003      	movs	r0, #3
 8005562:	47c0      	blx	r8
 8005564:	2300      	movs	r3, #0
 8005566:	3701      	adds	r7, #1
 8005568:	63a3      	str	r3, [r4, #56]	; 0x38
 800556a:	4638      	mov	r0, r7
 800556c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005570:	2700      	movs	r7, #0
 8005572:	4638      	mov	r0, r7
 8005574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005578:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800557a:	6385      	str	r5, [r0, #56]	; 0x38
 800557c:	2d00      	cmp	r5, #0
 800557e:	d0f7      	beq.n	8005570 <ai_layers_forward_all+0x60>
 8005580:	4647      	mov	r7, r8
 8005582:	696b      	ldr	r3, [r5, #20]
 8005584:	4628      	mov	r0, r5
 8005586:	4798      	blx	r3
 8005588:	462b      	mov	r3, r5
 800558a:	692d      	ldr	r5, [r5, #16]
 800558c:	429d      	cmp	r5, r3
 800558e:	d004      	beq.n	800559a <ai_layers_forward_all+0x8a>
 8005590:	63a5      	str	r5, [r4, #56]	; 0x38
 8005592:	3701      	adds	r7, #1
 8005594:	2d00      	cmp	r5, #0
 8005596:	d1f4      	bne.n	8005582 <ai_layers_forward_all+0x72>
 8005598:	e7df      	b.n	800555a <ai_layers_forward_all+0x4a>
 800559a:	2300      	movs	r3, #0
 800559c:	63a3      	str	r3, [r4, #56]	; 0x38
 800559e:	3701      	adds	r7, #1
 80055a0:	e7db      	b.n	800555a <ai_layers_forward_all+0x4a>
 80055a2:	bf00      	nop

080055a4 <func_dummy>:
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop

080055a8 <forward_conv2d_sssa8_ch>:
 80055a8:	6982      	ldr	r2, [r0, #24]
 80055aa:	8813      	ldrh	r3, [r2, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f000 8123 	beq.w	80057f8 <forward_conv2d_sssa8_ch+0x250>
 80055b2:	6852      	ldr	r2, [r2, #4]
 80055b4:	6851      	ldr	r1, [r2, #4]
 80055b6:	b101      	cbz	r1, 80055ba <forward_conv2d_sssa8_ch+0x12>
 80055b8:	6809      	ldr	r1, [r1, #0]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	f000 813e 	beq.w	800583c <forward_conv2d_sssa8_ch+0x294>
 80055c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055c4:	ed2d 8b02 	vpush	{d8}
 80055c8:	f8d2 9010 	ldr.w	r9, [r2, #16]
 80055cc:	b0a7      	sub	sp, #156	; 0x9c
 80055ce:	f1b9 0f00 	cmp.w	r9, #0
 80055d2:	d001      	beq.n	80055d8 <forward_conv2d_sssa8_ch+0x30>
 80055d4:	f8d9 9000 	ldr.w	r9, [r9]
 80055d8:	2b02      	cmp	r3, #2
 80055da:	f000 810a 	beq.w	80057f2 <forward_conv2d_sssa8_ch+0x24a>
 80055de:	69d4      	ldr	r4, [r2, #28]
 80055e0:	2c00      	cmp	r4, #0
 80055e2:	f000 8125 	beq.w	8005830 <forward_conv2d_sssa8_ch+0x288>
 80055e6:	8b15      	ldrh	r5, [r2, #24]
 80055e8:	f8d4 c000 	ldr.w	ip, [r4]
 80055ec:	2d01      	cmp	r5, #1
 80055ee:	f200 8105 	bhi.w	80057fc <forward_conv2d_sssa8_ch+0x254>
 80055f2:	2500      	movs	r5, #0
 80055f4:	2b03      	cmp	r3, #3
 80055f6:	f000 8124 	beq.w	8005842 <forward_conv2d_sssa8_ch+0x29a>
 80055fa:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80055fc:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80055fe:	2b00      	cmp	r3, #0
 8005600:	f000 8119 	beq.w	8005836 <forward_conv2d_sssa8_ch+0x28e>
 8005604:	681e      	ldr	r6, [r3, #0]
 8005606:	921a      	str	r2, [sp, #104]	; 0x68
 8005608:	9613      	str	r6, [sp, #76]	; 0x4c
 800560a:	2a00      	cmp	r2, #0
 800560c:	f000 8107 	beq.w	800581e <forward_conv2d_sssa8_ch+0x276>
 8005610:	685f      	ldr	r7, [r3, #4]
 8005612:	4632      	mov	r2, r6
 8005614:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8005618:	69ab      	ldr	r3, [r5, #24]
 800561a:	f8b8 6004 	ldrh.w	r6, [r8, #4]
 800561e:	68fd      	ldr	r5, [r7, #12]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	9325      	str	r3, [sp, #148]	; 0x94
 8005624:	ee08 6a10 	vmov	s16, r6
 8005628:	686b      	ldr	r3, [r5, #4]
 800562a:	68ee      	ldr	r6, [r5, #12]
 800562c:	68ad      	ldr	r5, [r5, #8]
 800562e:	951c      	str	r5, [sp, #112]	; 0x70
 8005630:	f8d8 500c 	ldr.w	r5, [r8, #12]
 8005634:	951d      	str	r5, [sp, #116]	; 0x74
 8005636:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800563a:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 800563e:	951e      	str	r5, [sp, #120]	; 0x78
 8005640:	8d05      	ldrh	r5, [r0, #40]	; 0x28
 8005642:	951f      	str	r5, [sp, #124]	; 0x7c
 8005644:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
 8005646:	f8dc a00c 	ldr.w	sl, [ip, #12]
 800564a:	9520      	str	r5, [sp, #128]	; 0x80
 800564c:	f8be 5000 	ldrh.w	r5, [lr]
 8005650:	9521      	str	r5, [sp, #132]	; 0x84
 8005652:	f8be 5004 	ldrh.w	r5, [lr, #4]
 8005656:	9522      	str	r5, [sp, #136]	; 0x88
 8005658:	f8da 5008 	ldr.w	r5, [sl, #8]
 800565c:	6992      	ldr	r2, [r2, #24]
 800565e:	9523      	str	r5, [sp, #140]	; 0x8c
 8005660:	f8da 5004 	ldr.w	r5, [sl, #4]
 8005664:	9524      	str	r5, [sp, #144]	; 0x90
 8005666:	b29d      	uxth	r5, r3
 8005668:	f8d2 b008 	ldr.w	fp, [r2, #8]
 800566c:	961b      	str	r6, [sp, #108]	; 0x6c
 800566e:	9512      	str	r5, [sp, #72]	; 0x48
 8005670:	2c00      	cmp	r4, #0
 8005672:	f000 80cb 	beq.w	800580c <forward_conv2d_sssa8_ch+0x264>
 8005676:	68a4      	ldr	r4, [r4, #8]
 8005678:	2c00      	cmp	r4, #0
 800567a:	f000 80c7 	beq.w	800580c <forward_conv2d_sssa8_ch+0x264>
 800567e:	f8d4 8018 	ldr.w	r8, [r4, #24]
 8005682:	f1b8 0f00 	cmp.w	r8, #0
 8005686:	bf18      	it	ne
 8005688:	46a0      	movne	r8, r4
 800568a:	680d      	ldr	r5, [r1, #0]
 800568c:	683e      	ldr	r6, [r7, #0]
 800568e:	f8dc 4000 	ldr.w	r4, [ip]
 8005692:	2d00      	cmp	r5, #0
 8005694:	f000 80b7 	beq.w	8005806 <forward_conv2d_sssa8_ch+0x25e>
 8005698:	f8d5 e004 	ldr.w	lr, [r5, #4]
 800569c:	f1be 0f00 	cmp.w	lr, #0
 80056a0:	f000 80b1 	beq.w	8005806 <forward_conv2d_sssa8_ch+0x25e>
 80056a4:	f8b5 a002 	ldrh.w	sl, [r5, #2]
 80056a8:	f1ba 0f00 	cmp.w	sl, #0
 80056ac:	f000 80ab 	beq.w	8005806 <forward_conv2d_sssa8_ch+0x25e>
 80056b0:	f8de e000 	ldr.w	lr, [lr]
 80056b4:	ed9e 0a00 	vldr	s0, [lr]
 80056b8:	2e00      	cmp	r6, #0
 80056ba:	f000 80a1 	beq.w	8005800 <forward_conv2d_sssa8_ch+0x258>
 80056be:	f8d6 e004 	ldr.w	lr, [r6, #4]
 80056c2:	f1be 0f00 	cmp.w	lr, #0
 80056c6:	f000 809b 	beq.w	8005800 <forward_conv2d_sssa8_ch+0x258>
 80056ca:	f8b6 a002 	ldrh.w	sl, [r6, #2]
 80056ce:	f1ba 0f00 	cmp.w	sl, #0
 80056d2:	f000 8095 	beq.w	8005800 <forward_conv2d_sssa8_ch+0x258>
 80056d6:	f8de e000 	ldr.w	lr, [lr]
 80056da:	edde 0a00 	vldr	s1, [lr]
 80056de:	f8d1 e018 	ldr.w	lr, [r1, #24]
 80056e2:	f8dc 1018 	ldr.w	r1, [ip, #24]
 80056e6:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
 80056ea:	6889      	ldr	r1, [r1, #8]
 80056ec:	9116      	str	r1, [sp, #88]	; 0x58
 80056ee:	69b9      	ldr	r1, [r7, #24]
 80056f0:	f8de a008 	ldr.w	sl, [lr, #8]
 80056f4:	6889      	ldr	r1, [r1, #8]
 80056f6:	9014      	str	r0, [sp, #80]	; 0x50
 80056f8:	9115      	str	r1, [sp, #84]	; 0x54
 80056fa:	b114      	cbz	r4, 8005702 <forward_conv2d_sssa8_ch+0x15a>
 80056fc:	6864      	ldr	r4, [r4, #4]
 80056fe:	b104      	cbz	r4, 8005702 <forward_conv2d_sssa8_ch+0x15a>
 8005700:	6824      	ldr	r4, [r4, #0]
 8005702:	b29b      	uxth	r3, r3
 8005704:	b145      	cbz	r5, 8005718 <forward_conv2d_sssa8_ch+0x170>
 8005706:	6869      	ldr	r1, [r5, #4]
 8005708:	2900      	cmp	r1, #0
 800570a:	f000 808d 	beq.w	8005828 <forward_conv2d_sssa8_ch+0x280>
 800570e:	886d      	ldrh	r5, [r5, #2]
 8005710:	b115      	cbz	r5, 8005718 <forward_conv2d_sssa8_ch+0x170>
 8005712:	6849      	ldr	r1, [r1, #4]
 8005714:	f991 5000 	ldrsb.w	r5, [r1]
 8005718:	b146      	cbz	r6, 800572c <forward_conv2d_sssa8_ch+0x184>
 800571a:	6871      	ldr	r1, [r6, #4]
 800571c:	2900      	cmp	r1, #0
 800571e:	f000 8085 	beq.w	800582c <forward_conv2d_sssa8_ch+0x284>
 8005722:	8876      	ldrh	r6, [r6, #2]
 8005724:	b116      	cbz	r6, 800572c <forward_conv2d_sssa8_ch+0x184>
 8005726:	6849      	ldr	r1, [r1, #4]
 8005728:	f991 6000 	ldrsb.w	r6, [r1]
 800572c:	9319      	str	r3, [sp, #100]	; 0x64
 800572e:	e9d2 0100 	ldrd	r0, r1, [r2]
 8005732:	edcd 0a18 	vstr	s1, [sp, #96]	; 0x60
 8005736:	ed8d 0a17 	vstr	s0, [sp, #92]	; 0x5c
 800573a:	f002 fe1d 	bl	8008378 <ai_array_get_byte_size>
 800573e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005740:	eddd 0a18 	vldr	s1, [sp, #96]	; 0x60
 8005744:	ed9d 0a17 	vldr	s0, [sp, #92]	; 0x5c
 8005748:	9912      	ldr	r1, [sp, #72]	; 0x48
 800574a:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
 800574e:	465a      	mov	r2, fp
 8005750:	4620      	mov	r0, r4
 8005752:	445b      	add	r3, fp
 8005754:	f001 f816 	bl	8006784 <align_factor_ch>
 8005758:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005760:	f002 fe0a 	bl	8008378 <ai_array_get_byte_size>
 8005764:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005766:	930c      	str	r3, [sp, #48]	; 0x30
 8005768:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800576a:	f8bd 2074 	ldrh.w	r2, [sp, #116]	; 0x74
 800576e:	f8bd 1078 	ldrh.w	r1, [sp, #120]	; 0x78
 8005772:	9509      	str	r5, [sp, #36]	; 0x24
 8005774:	e9cd 630a 	strd	r6, r3, [sp, #40]	; 0x28
 8005778:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800577a:	9308      	str	r3, [sp, #32]
 800577c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800577e:	9307      	str	r3, [sp, #28]
 8005780:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005782:	9306      	str	r3, [sp, #24]
 8005784:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005786:	9305      	str	r3, [sp, #20]
 8005788:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800578a:	9304      	str	r3, [sp, #16]
 800578c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800578e:	9301      	str	r3, [sp, #4]
 8005790:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005792:	9300      	str	r3, [sp, #0]
 8005794:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8005798:	930d      	str	r3, [sp, #52]	; 0x34
 800579a:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 800579e:	9303      	str	r3, [sp, #12]
 80057a0:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 80057a4:	9302      	str	r3, [sp, #8]
 80057a6:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 80057aa:	930e      	str	r3, [sp, #56]	; 0x38
 80057ac:	e9cd 0b10 	strd	r0, fp, [sp, #64]	; 0x40
 80057b0:	ee18 3a10 	vmov	r3, s16
 80057b4:	2401      	movs	r4, #1
 80057b6:	4650      	mov	r0, sl
 80057b8:	940f      	str	r4, [sp, #60]	; 0x3c
 80057ba:	f000 f9c5 	bl	8005b48 <forward_lite_conv2d_sssa8_ch>
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	0a1b      	lsrs	r3, r3, #8
 80057c2:	4622      	mov	r2, r4
 80057c4:	d008      	beq.n	80057d8 <forward_conv2d_sssa8_ch+0x230>
 80057c6:	68f8      	ldr	r0, [r7, #12]
 80057c8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80057cc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80057d0:	4298      	cmp	r0, r3
 80057d2:	fb01 f202 	mul.w	r2, r1, r2
 80057d6:	d1f9      	bne.n	80057cc <forward_conv2d_sssa8_ch+0x224>
 80057d8:	eddd 7a1a 	vldr	s15, [sp, #104]	; 0x68
 80057dc:	ee17 ca90 	vmov	ip, s15
 80057e0:	4643      	mov	r3, r8
 80057e2:	4639      	mov	r1, r7
 80057e4:	4648      	mov	r0, r9
 80057e6:	b027      	add	sp, #156	; 0x9c
 80057e8:	ecbd 8b02 	vpop	{d8}
 80057ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f0:	4760      	bx	ip
 80057f2:	2300      	movs	r3, #0
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	deff      	udf	#255	; 0xff
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	deff      	udf	#255	; 0xff
 80057fc:	6865      	ldr	r5, [r4, #4]
 80057fe:	e6f9      	b.n	80055f4 <forward_conv2d_sssa8_ch+0x4c>
 8005800:	eddf 0a12 	vldr	s1, [pc, #72]	; 800584c <forward_conv2d_sssa8_ch+0x2a4>
 8005804:	e76b      	b.n	80056de <forward_conv2d_sssa8_ch+0x136>
 8005806:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800584c <forward_conv2d_sssa8_ch+0x2a4>
 800580a:	e755      	b.n	80056b8 <forward_conv2d_sssa8_ch+0x110>
 800580c:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8005810:	f1b8 0f00 	cmp.w	r8, #0
 8005814:	f43f af39 	beq.w	800568a <forward_conv2d_sssa8_ch+0xe2>
 8005818:	f8d8 8008 	ldr.w	r8, [r8, #8]
 800581c:	e735      	b.n	800568a <forward_conv2d_sssa8_ch+0xe2>
 800581e:	4b0c      	ldr	r3, [pc, #48]	; (8005850 <forward_conv2d_sssa8_ch+0x2a8>)
 8005820:	931a      	str	r3, [sp, #104]	; 0x68
 8005822:	464f      	mov	r7, r9
 8005824:	4632      	mov	r2, r6
 8005826:	e6f5      	b.n	8005614 <forward_conv2d_sssa8_ch+0x6c>
 8005828:	460d      	mov	r5, r1
 800582a:	e775      	b.n	8005718 <forward_conv2d_sssa8_ch+0x170>
 800582c:	460e      	mov	r6, r1
 800582e:	e77d      	b.n	800572c <forward_conv2d_sssa8_ch+0x184>
 8005830:	46a4      	mov	ip, r4
 8005832:	4625      	mov	r5, r4
 8005834:	e6de      	b.n	80055f4 <forward_conv2d_sssa8_ch+0x4c>
 8005836:	b93a      	cbnz	r2, 8005848 <forward_conv2d_sssa8_ch+0x2a0>
 8005838:	6993      	ldr	r3, [r2, #24]
 800583a:	deff      	udf	#255	; 0xff
 800583c:	2300      	movs	r3, #0
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	deff      	udf	#255	; 0xff
 8005842:	2300      	movs	r3, #0
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	deff      	udf	#255	; 0xff
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	deff      	udf	#255	; 0xff
 800584c:	00000000 	.word	0x00000000
 8005850:	080055a5 	.word	0x080055a5

08005854 <forward_dense_integer_SSSA>:
 8005854:	6982      	ldr	r2, [r0, #24]
 8005856:	8813      	ldrh	r3, [r2, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 80c8 	beq.w	80059ee <forward_dense_integer_SSSA+0x19a>
 800585e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005862:	6852      	ldr	r2, [r2, #4]
 8005864:	6854      	ldr	r4, [r2, #4]
 8005866:	b093      	sub	sp, #76	; 0x4c
 8005868:	b104      	cbz	r4, 800586c <forward_dense_integer_SSSA+0x18>
 800586a:	6824      	ldr	r4, [r4, #0]
 800586c:	2b01      	cmp	r3, #1
 800586e:	f000 815f 	beq.w	8005b30 <forward_dense_integer_SSSA+0x2dc>
 8005872:	6911      	ldr	r1, [r2, #16]
 8005874:	b101      	cbz	r1, 8005878 <forward_dense_integer_SSSA+0x24>
 8005876:	6809      	ldr	r1, [r1, #0]
 8005878:	2b02      	cmp	r3, #2
 800587a:	f000 815c 	beq.w	8005b36 <forward_dense_integer_SSSA+0x2e2>
 800587e:	69d5      	ldr	r5, [r2, #28]
 8005880:	2d00      	cmp	r5, #0
 8005882:	f000 8108 	beq.w	8005a96 <forward_dense_integer_SSSA+0x242>
 8005886:	8b16      	ldrh	r6, [r2, #24]
 8005888:	6828      	ldr	r0, [r5, #0]
 800588a:	2e01      	cmp	r6, #1
 800588c:	f240 812d 	bls.w	8005aea <forward_dense_integer_SSSA+0x296>
 8005890:	686d      	ldr	r5, [r5, #4]
 8005892:	2b03      	cmp	r3, #3
 8005894:	f000 8152 	beq.w	8005b3c <forward_dense_integer_SSSA+0x2e8>
 8005898:	f8d2 9028 	ldr.w	r9, [r2, #40]	; 0x28
 800589c:	69ab      	ldr	r3, [r5, #24]
 800589e:	f1b9 0f00 	cmp.w	r9, #0
 80058a2:	f000 810f 	beq.w	8005ac4 <forward_dense_integer_SSSA+0x270>
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	68e2      	ldr	r2, [r4, #12]
 80058aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80058ac:	68cb      	ldr	r3, [r1, #12]
 80058ae:	6856      	ldr	r6, [r2, #4]
 80058b0:	f8d9 9000 	ldr.w	r9, [r9]
 80058b4:	f8d4 e018 	ldr.w	lr, [r4, #24]
 80058b8:	698d      	ldr	r5, [r1, #24]
 80058ba:	960f      	str	r6, [sp, #60]	; 0x3c
 80058bc:	e9d3 a201 	ldrd	sl, r2, [r3, #4]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	fb03 f302 	mul.w	r3, r3, r2
 80058c6:	930c      	str	r3, [sp, #48]	; 0x30
 80058c8:	b2b2      	uxth	r2, r6
 80058ca:	fa1f f38a 	uxth.w	r3, sl
 80058ce:	f1b9 0f00 	cmp.w	r9, #0
 80058d2:	d003      	beq.n	80058dc <forward_dense_integer_SSSA+0x88>
 80058d4:	f8d9 6018 	ldr.w	r6, [r9, #24]
 80058d8:	f8d6 9008 	ldr.w	r9, [r6, #8]
 80058dc:	6827      	ldr	r7, [r4, #0]
 80058de:	f8d0 b000 	ldr.w	fp, [r0]
 80058e2:	680c      	ldr	r4, [r1, #0]
 80058e4:	6981      	ldr	r1, [r0, #24]
 80058e6:	2f00      	cmp	r7, #0
 80058e8:	f000 8083 	beq.w	80059f2 <forward_dense_integer_SSSA+0x19e>
 80058ec:	f8d7 c004 	ldr.w	ip, [r7, #4]
 80058f0:	f1bc 0f00 	cmp.w	ip, #0
 80058f4:	f000 80b1 	beq.w	8005a5a <forward_dense_integer_SSSA+0x206>
 80058f8:	8878      	ldrh	r0, [r7, #2]
 80058fa:	2800      	cmp	r0, #0
 80058fc:	f000 809c 	beq.w	8005a38 <forward_dense_integer_SSSA+0x1e4>
 8005900:	f8dc 6000 	ldr.w	r6, [ip]
 8005904:	edd6 7a00 	vldr	s15, [r6]
 8005908:	2c00      	cmp	r4, #0
 800590a:	f000 809a 	beq.w	8005a42 <forward_dense_integer_SSSA+0x1ee>
 800590e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8005912:	f1b8 0f00 	cmp.w	r8, #0
 8005916:	f000 80a9 	beq.w	8005a6c <forward_dense_integer_SSSA+0x218>
 800591a:	8860      	ldrh	r0, [r4, #2]
 800591c:	2800      	cmp	r0, #0
 800591e:	d074      	beq.n	8005a0a <forward_dense_integer_SSSA+0x1b6>
 8005920:	68ae      	ldr	r6, [r5, #8]
 8005922:	f8de 5008 	ldr.w	r5, [lr, #8]
 8005926:	950d      	str	r5, [sp, #52]	; 0x34
 8005928:	f8d8 5000 	ldr.w	r5, [r8]
 800592c:	6889      	ldr	r1, [r1, #8]
 800592e:	ed95 0a00 	vldr	s0, [r5]
 8005932:	f1bc 0f00 	cmp.w	ip, #0
 8005936:	d076      	beq.n	8005a26 <forward_dense_integer_SSSA+0x1d2>
 8005938:	8878      	ldrh	r0, [r7, #2]
 800593a:	2800      	cmp	r0, #0
 800593c:	f000 80a3 	beq.w	8005a86 <forward_dense_integer_SSSA+0x232>
 8005940:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8005944:	f990 7000 	ldrsb.w	r7, [r0]
 8005948:	2c00      	cmp	r4, #0
 800594a:	f000 80d6 	beq.w	8005afa <forward_dense_integer_SSSA+0x2a6>
 800594e:	f1b8 0f00 	cmp.w	r8, #0
 8005952:	f000 809d 	beq.w	8005a90 <forward_dense_integer_SSSA+0x23c>
 8005956:	8860      	ldrh	r0, [r4, #2]
 8005958:	2800      	cmp	r0, #0
 800595a:	d167      	bne.n	8005a2c <forward_dense_integer_SSSA+0x1d8>
 800595c:	900a      	str	r0, [sp, #40]	; 0x28
 800595e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005962:	910e      	str	r1, [sp, #56]	; 0x38
 8005964:	f1bb 0f00 	cmp.w	fp, #0
 8005968:	f000 80dc 	beq.w	8005b24 <forward_dense_integer_SSSA+0x2d0>
 800596c:	f8db 0004 	ldr.w	r0, [fp, #4]
 8005970:	2800      	cmp	r0, #0
 8005972:	f000 80d7 	beq.w	8005b24 <forward_dense_integer_SSSA+0x2d0>
 8005976:	6800      	ldr	r0, [r0, #0]
 8005978:	2400      	movs	r4, #0
 800597a:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
 800597e:	9411      	str	r4, [sp, #68]	; 0x44
 8005980:	ed90 7a00 	vldr	s14, [r0]
 8005984:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005988:	f10d 0842 	add.w	r8, sp, #66	; 0x42
 800598c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8005990:	4640      	mov	r0, r8
 8005992:	f000 fea3 	bl	80066dc <align_factor>
 8005996:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005998:	9011      	str	r0, [sp, #68]	; 0x44
 800599a:	b32b      	cbz	r3, 80059e8 <forward_dense_integer_SSSA+0x194>
 800599c:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80059a0:	4699      	mov	r9, r3
 80059a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059a4:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
 80059a8:	9a08      	ldr	r2, [sp, #32]
 80059aa:	990e      	ldr	r1, [sp, #56]	; 0x38
 80059ac:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80059ae:	970d      	str	r7, [sp, #52]	; 0x34
 80059b0:	fa1f fa8a 	uxth.w	sl, sl
 80059b4:	461f      	mov	r7, r3
 80059b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059b8:	9306      	str	r3, [sp, #24]
 80059ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059bc:	9304      	str	r3, [sp, #16]
 80059be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059c0:	9303      	str	r3, [sp, #12]
 80059c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059c4:	9605      	str	r6, [sp, #20]
 80059c6:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80059ca:	ab11      	add	r3, sp, #68	; 0x44
 80059cc:	9300      	str	r3, [sp, #0]
 80059ce:	4628      	mov	r0, r5
 80059d0:	3401      	adds	r4, #1
 80059d2:	463b      	mov	r3, r7
 80059d4:	e9cd 1208 	strd	r1, r2, [sp, #32]
 80059d8:	f000 ff92 	bl	8006900 <st_sssa8_fully_connected>
 80059dc:	454c      	cmp	r4, r9
 80059de:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80059e2:	4456      	add	r6, sl
 80059e4:	445d      	add	r5, fp
 80059e6:	d1e6      	bne.n	80059b6 <forward_dense_integer_SSSA+0x162>
 80059e8:	b013      	add	sp, #76	; 0x4c
 80059ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	deff      	udf	#255	; 0xff
 80059f2:	2c00      	cmp	r4, #0
 80059f4:	d056      	beq.n	8005aa4 <forward_dense_integer_SSSA+0x250>
 80059f6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80059fa:	f1b8 0f00 	cmp.w	r8, #0
 80059fe:	d05d      	beq.n	8005abc <forward_dense_integer_SSSA+0x268>
 8005a00:	8860      	ldrh	r0, [r4, #2]
 8005a02:	2800      	cmp	r0, #0
 8005a04:	d17b      	bne.n	8005afe <forward_dense_integer_SSSA+0x2aa>
 8005a06:	eddf 7a4f 	vldr	s15, [pc, #316]	; 8005b44 <forward_dense_integer_SSSA+0x2f0>
 8005a0a:	68ae      	ldr	r6, [r5, #8]
 8005a0c:	f8de 5008 	ldr.w	r5, [lr, #8]
 8005a10:	6889      	ldr	r1, [r1, #8]
 8005a12:	950d      	str	r5, [sp, #52]	; 0x34
 8005a14:	2f00      	cmp	r7, #0
 8005a16:	d041      	beq.n	8005a9c <forward_dense_integer_SSSA+0x248>
 8005a18:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8005a1c:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8005b44 <forward_dense_integer_SSSA+0x2f0>
 8005a20:	f1bc 0f00 	cmp.w	ip, #0
 8005a24:	d188      	bne.n	8005938 <forward_dense_integer_SSSA+0xe4>
 8005a26:	4667      	mov	r7, ip
 8005a28:	2800      	cmp	r0, #0
 8005a2a:	d097      	beq.n	800595c <forward_dense_integer_SSSA+0x108>
 8005a2c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005a30:	f990 0000 	ldrsb.w	r0, [r0]
 8005a34:	900a      	str	r0, [sp, #40]	; 0x28
 8005a36:	e792      	b.n	800595e <forward_dense_integer_SSSA+0x10a>
 8005a38:	eddf 7a42 	vldr	s15, [pc, #264]	; 8005b44 <forward_dense_integer_SSSA+0x2f0>
 8005a3c:	2c00      	cmp	r4, #0
 8005a3e:	f47f af66 	bne.w	800590e <forward_dense_integer_SSSA+0xba>
 8005a42:	68ae      	ldr	r6, [r5, #8]
 8005a44:	f8de 5008 	ldr.w	r5, [lr, #8]
 8005a48:	6889      	ldr	r1, [r1, #8]
 8005a4a:	950d      	str	r5, [sp, #52]	; 0x34
 8005a4c:	2800      	cmp	r0, #0
 8005a4e:	d14e      	bne.n	8005aee <forward_dense_integer_SSSA+0x29a>
 8005a50:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8005b44 <forward_dense_integer_SSSA+0x2f0>
 8005a54:	900a      	str	r0, [sp, #40]	; 0x28
 8005a56:	4607      	mov	r7, r0
 8005a58:	e781      	b.n	800595e <forward_dense_integer_SSSA+0x10a>
 8005a5a:	b31c      	cbz	r4, 8005aa4 <forward_dense_integer_SSSA+0x250>
 8005a5c:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8005a60:	eddf 7a38 	vldr	s15, [pc, #224]	; 8005b44 <forward_dense_integer_SSSA+0x2f0>
 8005a64:	f1b8 0f00 	cmp.w	r8, #0
 8005a68:	f47f af57 	bne.w	800591a <forward_dense_integer_SSSA+0xc6>
 8005a6c:	f8de 0008 	ldr.w	r0, [lr, #8]
 8005a70:	68ae      	ldr	r6, [r5, #8]
 8005a72:	6889      	ldr	r1, [r1, #8]
 8005a74:	900d      	str	r0, [sp, #52]	; 0x34
 8005a76:	f1bc 0f00 	cmp.w	ip, #0
 8005a7a:	d00e      	beq.n	8005a9a <forward_dense_integer_SSSA+0x246>
 8005a7c:	8878      	ldrh	r0, [r7, #2]
 8005a7e:	2800      	cmp	r0, #0
 8005a80:	d149      	bne.n	8005b16 <forward_dense_integer_SSSA+0x2c2>
 8005a82:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8005b44 <forward_dense_integer_SSSA+0x2f0>
 8005a86:	2700      	movs	r7, #0
 8005a88:	f1b8 0f00 	cmp.w	r8, #0
 8005a8c:	f47f af63 	bne.w	8005956 <forward_dense_integer_SSSA+0x102>
 8005a90:	2000      	movs	r0, #0
 8005a92:	900a      	str	r0, [sp, #40]	; 0x28
 8005a94:	e763      	b.n	800595e <forward_dense_integer_SSSA+0x10a>
 8005a96:	4628      	mov	r0, r5
 8005a98:	e6fb      	b.n	8005892 <forward_dense_integer_SSSA+0x3e>
 8005a9a:	4667      	mov	r7, ip
 8005a9c:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8005b44 <forward_dense_integer_SSSA+0x2f0>
 8005aa0:	970a      	str	r7, [sp, #40]	; 0x28
 8005aa2:	e75c      	b.n	800595e <forward_dense_integer_SSSA+0x10a>
 8005aa4:	eddf 7a27 	vldr	s15, [pc, #156]	; 8005b44 <forward_dense_integer_SSSA+0x2f0>
 8005aa8:	4627      	mov	r7, r4
 8005aaa:	f8de 0008 	ldr.w	r0, [lr, #8]
 8005aae:	68ae      	ldr	r6, [r5, #8]
 8005ab0:	6889      	ldr	r1, [r1, #8]
 8005ab2:	900d      	str	r0, [sp, #52]	; 0x34
 8005ab4:	eeb0 0a67 	vmov.f32	s0, s15
 8005ab8:	970a      	str	r7, [sp, #40]	; 0x28
 8005aba:	e750      	b.n	800595e <forward_dense_integer_SSSA+0x10a>
 8005abc:	eddf 7a21 	vldr	s15, [pc, #132]	; 8005b44 <forward_dense_integer_SSSA+0x2f0>
 8005ac0:	4647      	mov	r7, r8
 8005ac2:	e7f2      	b.n	8005aaa <forward_dense_integer_SSSA+0x256>
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	68e2      	ldr	r2, [r4, #12]
 8005ac8:	930b      	str	r3, [sp, #44]	; 0x2c
 8005aca:	68cb      	ldr	r3, [r1, #12]
 8005acc:	6856      	ldr	r6, [r2, #4]
 8005ace:	f8d4 e018 	ldr.w	lr, [r4, #24]
 8005ad2:	698d      	ldr	r5, [r1, #24]
 8005ad4:	960f      	str	r6, [sp, #60]	; 0x3c
 8005ad6:	e9d3 a201 	ldrd	sl, r2, [r3, #4]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	fb03 f302 	mul.w	r3, r3, r2
 8005ae0:	930c      	str	r3, [sp, #48]	; 0x30
 8005ae2:	b2b2      	uxth	r2, r6
 8005ae4:	fa1f f38a 	uxth.w	r3, sl
 8005ae8:	e6f8      	b.n	80058dc <forward_dense_integer_SSSA+0x88>
 8005aea:	2500      	movs	r5, #0
 8005aec:	e6d1      	b.n	8005892 <forward_dense_integer_SSSA+0x3e>
 8005aee:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8005af2:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8005b44 <forward_dense_integer_SSSA+0x2f0>
 8005af6:	f990 7000 	ldrsb.w	r7, [r0]
 8005afa:	940a      	str	r4, [sp, #40]	; 0x28
 8005afc:	e72f      	b.n	800595e <forward_dense_integer_SSSA+0x10a>
 8005afe:	f8de 0008 	ldr.w	r0, [lr, #8]
 8005b02:	900d      	str	r0, [sp, #52]	; 0x34
 8005b04:	f8d8 0000 	ldr.w	r0, [r8]
 8005b08:	68ae      	ldr	r6, [r5, #8]
 8005b0a:	6889      	ldr	r1, [r1, #8]
 8005b0c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8005b44 <forward_dense_integer_SSSA+0x2f0>
 8005b10:	ed90 0a00 	vldr	s0, [r0]
 8005b14:	e78a      	b.n	8005a2c <forward_dense_integer_SSSA+0x1d8>
 8005b16:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8005b1a:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8005b44 <forward_dense_integer_SSSA+0x2f0>
 8005b1e:	f990 7000 	ldrsb.w	r7, [r0]
 8005b22:	e7b5      	b.n	8005a90 <forward_dense_integer_SSSA+0x23c>
 8005b24:	2300      	movs	r3, #0
 8005b26:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8005b2a:	9311      	str	r3, [sp, #68]	; 0x44
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	deff      	udf	#255	; 0xff
 8005b30:	2300      	movs	r3, #0
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	deff      	udf	#255	; 0xff
 8005b36:	2300      	movs	r3, #0
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	deff      	udf	#255	; 0xff
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	deff      	udf	#255	; 0xff
 8005b42:	bf00      	nop
 8005b44:	00000000 	.word	0x00000000

08005b48 <forward_lite_conv2d_sssa8_ch>:
 8005b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b4c:	ed2d 8b08 	vpush	{d8-d11}
 8005b50:	b0d5      	sub	sp, #340	; 0x154
 8005b52:	4699      	mov	r9, r3
 8005b54:	f8dd a1d8 	ldr.w	sl, [sp, #472]	; 0x1d8
 8005b58:	f8bd 319c 	ldrh.w	r3, [sp, #412]	; 0x19c
 8005b5c:	9215      	str	r2, [sp, #84]	; 0x54
 8005b5e:	9a77      	ldr	r2, [sp, #476]	; 0x1dc
 8005b60:	f8bd 61d0 	ldrh.w	r6, [sp, #464]	; 0x1d0
 8005b64:	9013      	str	r0, [sp, #76]	; 0x4c
 8005b66:	ebaa 0543 	sub.w	r5, sl, r3, lsl #1
 8005b6a:	4415      	add	r5, r2
 8005b6c:	f8bd 21a0 	ldrh.w	r2, [sp, #416]	; 0x1a0
 8005b70:	9226      	str	r2, [sp, #152]	; 0x98
 8005b72:	f8bd 21a4 	ldrh.w	r2, [sp, #420]	; 0x1a4
 8005b76:	9229      	str	r2, [sp, #164]	; 0xa4
 8005b78:	f8bd 21a8 	ldrh.w	r2, [sp, #424]	; 0x1a8
 8005b7c:	9211      	str	r2, [sp, #68]	; 0x44
 8005b7e:	4688      	mov	r8, r1
 8005b80:	f8bd 21ac 	ldrh.w	r2, [sp, #428]	; 0x1ac
 8005b84:	f89d 11c4 	ldrb.w	r1, [sp, #452]	; 0x1c4
 8005b88:	9225      	str	r2, [sp, #148]	; 0x94
 8005b8a:	f8bd 21b0 	ldrh.w	r2, [sp, #432]	; 0x1b0
 8005b8e:	f8bd 01cc 	ldrh.w	r0, [sp, #460]	; 0x1cc
 8005b92:	9220      	str	r2, [sp, #128]	; 0x80
 8005b94:	ee09 3a90 	vmov	s19, r3
 8005b98:	f8bd 21b4 	ldrh.w	r2, [sp, #436]	; 0x1b4
 8005b9c:	9628      	str	r6, [sp, #160]	; 0xa0
 8005b9e:	005e      	lsls	r6, r3, #1
 8005ba0:	07cb      	lsls	r3, r1, #31
 8005ba2:	922a      	str	r2, [sp, #168]	; 0xa8
 8005ba4:	f99d b1bc 	ldrsb.w	fp, [sp, #444]	; 0x1bc
 8005ba8:	9a6e      	ldr	r2, [sp, #440]	; 0x1b8
 8005baa:	f99d 41c0 	ldrsb.w	r4, [sp, #448]	; 0x1c0
 8005bae:	f8bd 71d4 	ldrh.w	r7, [sp, #468]	; 0x1d4
 8005bb2:	9124      	str	r1, [sp, #144]	; 0x90
 8005bb4:	9010      	str	r0, [sp, #64]	; 0x40
 8005bb6:	f140 8463 	bpl.w	8006480 <forward_lite_conv2d_sssa8_ch+0x938>
 8005bba:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8005bbc:	1c83      	adds	r3, r0, #2
 8005bbe:	3102      	adds	r1, #2
 8005bc0:	fb01 f303 	mul.w	r3, r1, r3
 8005bc4:	931c      	str	r3, [sp, #112]	; 0x70
 8005bc6:	9b77      	ldr	r3, [sp, #476]	; 0x1dc
 8005bc8:	9966      	ldr	r1, [sp, #408]	; 0x198
 8005bca:	9201      	str	r2, [sp, #4]
 8005bcc:	e9cd b302 	strd	fp, r3, [sp, #8]
 8005bd0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8005bd2:	9300      	str	r3, [sp, #0]
 8005bd4:	ee19 2a90 	vmov	r2, s19
 8005bd8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005bda:	4648      	mov	r0, r9
 8005bdc:	f000 fe02 	bl	80067e4 <st_sssa8_ch_convolve_rank1upd>
 8005be0:	ee19 2a90 	vmov	r2, s19
 8005be4:	9977      	ldr	r1, [sp, #476]	; 0x1dc
 8005be6:	9826      	ldr	r0, [sp, #152]	; 0x98
 8005be8:	18b3      	adds	r3, r6, r2
 8005bea:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8005bee:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8005bf0:	9119      	str	r1, [sp, #100]	; 0x64
 8005bf2:	fb10 f303 	smulbb	r3, r0, r3
 8005bf6:	fb13 f309 	smulbb	r3, r3, r9
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	931b      	str	r3, [sp, #108]	; 0x6c
 8005bfe:	ebc2 7342 	rsb	r3, r2, r2, lsl #29
 8005c02:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8005c06:	ee0a 3a90 	vmov	s21, r3
 8005c0a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8005c0e:	9323      	str	r3, [sp, #140]	; 0x8c
 8005c10:	b1d2      	cbz	r2, 8005c48 <forward_lite_conv2d_sssa8_ch+0x100>
 8005c12:	1d19      	adds	r1, r3, #4
 8005c14:	eb05 0c06 	add.w	ip, r5, r6
 8005c18:	f04f 0e01 	mov.w	lr, #1
 8005c1c:	f935 3b02 	ldrsh.w	r3, [r5], #2
 8005c20:	1e5a      	subs	r2, r3, #1
 8005c22:	b292      	uxth	r2, r2
 8005c24:	fa0e f003 	lsl.w	r0, lr, r3
 8005c28:	2a14      	cmp	r2, #20
 8005c2a:	fa04 f303 	lsl.w	r3, r4, r3
 8005c2e:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8005c32:	f200 818f 	bhi.w	8005f54 <forward_lite_conv2d_sssa8_ch+0x40c>
 8005c36:	4565      	cmp	r5, ip
 8005c38:	f841 3c04 	str.w	r3, [r1, #-4]
 8005c3c:	f101 0104 	add.w	r1, r1, #4
 8005c40:	d1ec      	bne.n	8005c1c <forward_lite_conv2d_sssa8_ch+0xd4>
 8005c42:	9b77      	ldr	r3, [sp, #476]	; 0x1dc
 8005c44:	eb03 050a 	add.w	r5, r3, sl
 8005c48:	1bab      	subs	r3, r5, r6
 8005c4a:	9322      	str	r3, [sp, #136]	; 0x88
 8005c4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005c4e:	9335      	str	r3, [sp, #212]	; 0xd4
 8005c50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c52:	933a      	str	r3, [sp, #232]	; 0xe8
 8005c54:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005c56:	9339      	str	r3, [sp, #228]	; 0xe4
 8005c58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c5a:	934c      	str	r3, [sp, #304]	; 0x130
 8005c5c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8005c5e:	934d      	str	r3, [sp, #308]	; 0x134
 8005c60:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005c62:	934e      	str	r3, [sp, #312]	; 0x138
 8005c64:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8005c66:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8005c68:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8005c6a:	934f      	str	r3, [sp, #316]	; 0x13c
 8005c6c:	ab3c      	add	r3, sp, #240	; 0xf0
 8005c6e:	9300      	str	r3, [sp, #0]
 8005c70:	aa34      	add	r2, sp, #208	; 0xd0
 8005c72:	ab38      	add	r3, sp, #224	; 0xe0
 8005c74:	a94a      	add	r1, sp, #296	; 0x128
 8005c76:	a840      	add	r0, sp, #256	; 0x100
 8005c78:	943e      	str	r4, [sp, #248]	; 0xf8
 8005c7a:	953d      	str	r5, [sp, #244]	; 0xf4
 8005c7c:	f8cd 80d8 	str.w	r8, [sp, #216]	; 0xd8
 8005c80:	f001 fc38 	bl	80074f4 <ai_padding_opt_init>
 8005c84:	ee19 2a90 	vmov	r2, s19
 8005c88:	462b      	mov	r3, r5
 8005c8a:	fb05 f504 	mul.w	r5, r5, r4
 8005c8e:	fb09 fa04 	mul.w	sl, r9, r4
 8005c92:	fb09 f405 	mul.w	r4, r9, r5
 8005c96:	fb02 f404 	mul.w	r4, r2, r4
 8005c9a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005c9c:	fb0a f303 	mul.w	r3, sl, r3
 8005ca0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005ca4:	ee0a 3a10 	vmov	s20, r3
 8005ca8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005caa:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 8005cae:	f003 0202 	and.w	r2, r3, #2
 8005cb2:	bfa8      	it	ge
 8005cb4:	f44f 6420 	movge.w	r4, #2560	; 0xa00
 8005cb8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005cbc:	2f01      	cmp	r7, #1
 8005cbe:	922f      	str	r2, [sp, #188]	; 0xbc
 8005cc0:	931e      	str	r3, [sp, #120]	; 0x78
 8005cc2:	f000 83c8 	beq.w	8006456 <forward_lite_conv2d_sssa8_ch+0x90e>
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	932e      	str	r3, [sp, #184]	; 0xb8
 8005cca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	f240 8273 	bls.w	80061b8 <forward_lite_conv2d_sssa8_ch+0x670>
 8005cd2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005cd4:	fbb4 f3f3 	udiv	r3, r4, r3
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	4619      	mov	r1, r3
 8005cdc:	ee19 3a90 	vmov	r3, s19
 8005ce0:	4299      	cmp	r1, r3
 8005ce2:	bf28      	it	cs
 8005ce4:	4619      	movcs	r1, r3
 8005ce6:	fbb3 f2f1 	udiv	r2, r3, r1
 8005cea:	fb01 3312 	mls	r3, r1, r2, r3
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	b292      	uxth	r2, r2
 8005cf2:	911f      	str	r1, [sp, #124]	; 0x7c
 8005cf4:	922c      	str	r2, [sp, #176]	; 0xb0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	f040 8141 	bne.w	8005f7e <forward_lite_conv2d_sssa8_ch+0x436>
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	3a01      	subs	r2, #1
 8005d00:	b292      	uxth	r2, r2
 8005d02:	922c      	str	r2, [sp, #176]	; 0xb0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f000 823e 	beq.w	8006186 <forward_lite_conv2d_sssa8_ch+0x63e>
 8005d0a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005d0c:	edcd 9a2d 	vstr	s19, [sp, #180]	; 0xb4
 8005d10:	fb09 f505 	mul.w	r5, r9, r5
 8005d14:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8005d18:	fa0f f68b 	sxth.w	r6, fp
 8005d1c:	9317      	str	r3, [sp, #92]	; 0x5c
 8005d1e:	f009 0303 	and.w	r3, r9, #3
 8005d22:	9312      	str	r3, [sp, #72]	; 0x48
 8005d24:	ea4f 0b49 	mov.w	fp, r9, lsl #1
 8005d28:	ea4f 034a 	mov.w	r3, sl, lsl #1
 8005d2c:	ee09 9a10 	vmov	s18, r9
 8005d30:	ee0b 6a10 	vmov	s22, r6
 8005d34:	9318      	str	r3, [sp, #96]	; 0x60
 8005d36:	f8cd b0ac 	str.w	fp, [sp, #172]	; 0xac
 8005d3a:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8005d3e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8005d40:	b953      	cbnz	r3, 8005d58 <forward_lite_conv2d_sssa8_ch+0x210>
 8005d42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f040 822f 	bne.w	80061a8 <forward_lite_conv2d_sssa8_ch+0x660>
 8005d4a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005d4c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005d4e:	9866      	ldr	r0, [sp, #408]	; 0x198
 8005d50:	ee1a 1a10 	vmov	r1, s20
 8005d54:	f001 fb16 	bl	8007384 <st_int8_to16_dual_interleaved>
 8005d58:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005d5a:	2b03      	cmp	r3, #3
 8005d5c:	f000 8218 	beq.w	8006190 <forward_lite_conv2d_sssa8_ch+0x648>
 8005d60:	9b72      	ldr	r3, [sp, #456]	; 0x1c8
 8005d62:	931a      	str	r3, [sp, #104]	; 0x68
 8005d64:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f000 80bf 	beq.w	8005eea <forward_lite_conv2d_sssa8_ch+0x3a2>
 8005d6c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8005d6e:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8005d70:	425b      	negs	r3, r3
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	2400      	movs	r4, #0
 8005d76:	ee08 aa90 	vmov	s17, sl
 8005d7a:	9321      	str	r3, [sp, #132]	; 0x84
 8005d7c:	4626      	mov	r6, r4
 8005d7e:	a840      	add	r0, sp, #256	; 0x100
 8005d80:	f001 fc10 	bl	80075a4 <ai_padding_opt_phase1>
 8005d84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f000 81f3 	beq.w	8006172 <forward_lite_conv2d_sssa8_ch+0x62a>
 8005d8c:	b2a3      	uxth	r3, r4
 8005d8e:	9327      	str	r3, [sp, #156]	; 0x9c
 8005d90:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8005d94:	1a9b      	subs	r3, r3, r2
 8005d96:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8005d98:	fb06 3302 	mla	r3, r6, r2, r3
 8005d9c:	930d      	str	r3, [sp, #52]	; 0x34
 8005d9e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005da0:	f9bd 2084 	ldrsh.w	r2, [sp, #132]	; 0x84
 8005da4:	9216      	str	r2, [sp, #88]	; 0x58
 8005da6:	425b      	negs	r3, r3
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	930b      	str	r3, [sp, #44]	; 0x2c
 8005dac:	2300      	movs	r3, #0
 8005dae:	930e      	str	r3, [sp, #56]	; 0x38
 8005db0:	9314      	str	r3, [sp, #80]	; 0x50
 8005db2:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f000 80e6 	beq.w	8005f86 <forward_lite_conv2d_sssa8_ch+0x43e>
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	9340      	str	r3, [sp, #256]	; 0x100
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	f8ad 3126 	strh.w	r3, [sp, #294]	; 0x126
 8005dc4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005dc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	f280 80ea 	bge.w	8005fa2 <forward_lite_conv2d_sssa8_ch+0x45a>
 8005dce:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005dd0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005dd2:	9914      	ldr	r1, [sp, #80]	; 0x50
 8005dd4:	f8dd 90ac 	ldr.w	r9, [sp, #172]	; 0xac
 8005dd8:	fb01 3402 	mla	r4, r1, r2, r3
 8005ddc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005dde:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8005de2:	1ae4      	subs	r4, r4, r3
 8005de4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8005de8:	930f      	str	r3, [sp, #60]	; 0x3c
 8005dea:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005dec:	ee19 7a10 	vmov	r7, s18
 8005df0:	ee1b 8a10 	vmov	r8, s22
 8005df4:	461e      	mov	r6, r3
 8005df6:	4693      	mov	fp, r2
 8005df8:	455c      	cmp	r4, fp
 8005dfa:	dd35      	ble.n	8005e68 <forward_lite_conv2d_sssa8_ch+0x320>
 8005dfc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005dfe:	2e00      	cmp	r6, #0
 8005e00:	fb02 f203 	mul.w	r2, r2, r3
 8005e04:	920a      	str	r2, [sp, #40]	; 0x28
 8005e06:	f2c0 817c 	blt.w	8006102 <forward_lite_conv2d_sssa8_ch+0x5ba>
 8005e0a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e0c:	2a00      	cmp	r2, #0
 8005e0e:	f000 8125 	beq.w	800605c <forward_lite_conv2d_sssa8_ch+0x514>
 8005e12:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005e14:	429a      	cmp	r2, r3
 8005e16:	46da      	mov	sl, fp
 8005e18:	f340 80a4 	ble.w	8005f64 <forward_lite_conv2d_sssa8_ch+0x41c>
 8005e1c:	46dc      	mov	ip, fp
 8005e1e:	961d      	str	r6, [sp, #116]	; 0x74
 8005e20:	e011      	b.n	8005e46 <forward_lite_conv2d_sssa8_ch+0x2fe>
 8005e22:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005e24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e26:	4566      	cmp	r6, ip
 8005e28:	4463      	add	r3, ip
 8005e2a:	dd12      	ble.n	8005e52 <forward_lite_conv2d_sssa8_ch+0x30a>
 8005e2c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8005e2e:	f10a 0a01 	add.w	sl, sl, #1
 8005e32:	fa0f fa8a 	sxth.w	sl, sl
 8005e36:	fb07 0003 	mla	r0, r7, r3, r0
 8005e3a:	f001 f917 	bl	800706c <st_int8_to16_no_shift>
 8005e3e:	45a2      	cmp	sl, r4
 8005e40:	444d      	add	r5, r9
 8005e42:	46d4      	mov	ip, sl
 8005e44:	da0f      	bge.n	8005e66 <forward_lite_conv2d_sssa8_ch+0x31e>
 8005e46:	f1ba 0f00 	cmp.w	sl, #0
 8005e4a:	463a      	mov	r2, r7
 8005e4c:	4629      	mov	r1, r5
 8005e4e:	4640      	mov	r0, r8
 8005e50:	dae7      	bge.n	8005e22 <forward_lite_conv2d_sssa8_ch+0x2da>
 8005e52:	f10a 0a01 	add.w	sl, sl, #1
 8005e56:	fa0f fa8a 	sxth.w	sl, sl
 8005e5a:	f002 f9f3 	bl	8008244 <arm_fill_q15>
 8005e5e:	45a2      	cmp	sl, r4
 8005e60:	444d      	add	r5, r9
 8005e62:	46d4      	mov	ip, sl
 8005e64:	dbef      	blt.n	8005e46 <forward_lite_conv2d_sssa8_ch+0x2fe>
 8005e66:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8005e68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005e6a:	3601      	adds	r6, #1
 8005e6c:	b236      	sxth	r6, r6
 8005e6e:	4296      	cmp	r6, r2
 8005e70:	4633      	mov	r3, r6
 8005e72:	dbc1      	blt.n	8005df8 <forward_lite_conv2d_sssa8_ch+0x2b0>
 8005e74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e76:	42ab      	cmp	r3, r5
 8005e78:	f000 809a 	beq.w	8005fb0 <forward_lite_conv2d_sssa8_ch+0x468>
 8005e7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e7e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005e80:	3301      	adds	r3, #1
 8005e82:	b21a      	sxth	r2, r3
 8005e84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e86:	920e      	str	r2, [sp, #56]	; 0x38
 8005e88:	440b      	add	r3, r1
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005e90:	9214      	str	r2, [sp, #80]	; 0x50
 8005e92:	4293      	cmp	r3, r2
 8005e94:	dc8d      	bgt.n	8005db2 <forward_lite_conv2d_sssa8_ch+0x26a>
 8005e96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e98:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8005e9a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8005e9c:	4413      	add	r3, r2
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	3401      	adds	r4, #1
 8005ea2:	9321      	str	r3, [sp, #132]	; 0x84
 8005ea4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005ea6:	b224      	sxth	r4, r4
 8005ea8:	42a3      	cmp	r3, r4
 8005eaa:	4626      	mov	r6, r4
 8005eac:	f73f af67 	bgt.w	8005d7e <forward_lite_conv2d_sssa8_ch+0x236>
 8005eb0:	9919      	ldr	r1, [sp, #100]	; 0x64
 8005eb2:	42a9      	cmp	r1, r5
 8005eb4:	ee18 aa90 	vmov	sl, s17
 8005eb8:	d017      	beq.n	8005eea <forward_lite_conv2d_sssa8_ch+0x3a2>
 8005eba:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005ebc:	9307      	str	r3, [sp, #28]
 8005ebe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005ec0:	9306      	str	r3, [sp, #24]
 8005ec2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005ec4:	9305      	str	r3, [sp, #20]
 8005ec6:	9b77      	ldr	r3, [sp, #476]	; 0x1dc
 8005ec8:	9304      	str	r3, [sp, #16]
 8005eca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ecc:	9303      	str	r3, [sp, #12]
 8005ece:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ed0:	9302      	str	r3, [sp, #8]
 8005ed2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005ed4:	9301      	str	r3, [sp, #4]
 8005ed6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005ed8:	9300      	str	r3, [sp, #0]
 8005eda:	ee1a 2a90 	vmov	r2, s21
 8005ede:	ee19 3a90 	vmov	r3, s19
 8005ee2:	ee1a 0a10 	vmov	r0, s20
 8005ee6:	f001 ff73 	bl	8007dd0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 8005eea:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005eec:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8005eee:	1a9b      	subs	r3, r3, r2
 8005ef0:	b299      	uxth	r1, r3
 8005ef2:	428a      	cmp	r2, r1
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	bf28      	it	cs
 8005ef8:	460b      	movcs	r3, r1
 8005efa:	912d      	str	r1, [sp, #180]	; 0xb4
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f000 813b 	beq.w	8006178 <forward_lite_conv2d_sssa8_ch+0x630>
 8005f02:	9966      	ldr	r1, [sp, #408]	; 0x198
 8005f04:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005f06:	fb02 1100 	mla	r1, r2, r0, r1
 8005f0a:	9166      	str	r1, [sp, #408]	; 0x198
 8005f0c:	ee1a 1a90 	vmov	r1, s21
 8005f10:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005f14:	ee0a 1a90 	vmov	s21, r1
 8005f18:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005f1a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8005f1e:	9122      	str	r1, [sp, #136]	; 0x88
 8005f20:	9977      	ldr	r1, [sp, #476]	; 0x1dc
 8005f22:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005f26:	9177      	str	r1, [sp, #476]	; 0x1dc
 8005f28:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8005f2a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005f2e:	9123      	str	r1, [sp, #140]	; 0x8c
 8005f30:	992f      	ldr	r1, [sp, #188]	; 0xbc
 8005f32:	2900      	cmp	r1, #0
 8005f34:	f000 8132 	beq.w	800619c <forward_lite_conv2d_sssa8_ch+0x654>
 8005f38:	9972      	ldr	r1, [sp, #456]	; 0x1c8
 8005f3a:	981c      	ldr	r0, [sp, #112]	; 0x70
 8005f3c:	931f      	str	r3, [sp, #124]	; 0x7c
 8005f3e:	fb00 1202 	mla	r2, r0, r2, r1
 8005f42:	9272      	str	r2, [sp, #456]	; 0x1c8
 8005f44:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8005f46:	1e53      	subs	r3, r2, #1
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	2a00      	cmp	r2, #0
 8005f4c:	f000 811b 	beq.w	8006186 <forward_lite_conv2d_sssa8_ch+0x63e>
 8005f50:	932c      	str	r3, [sp, #176]	; 0xb0
 8005f52:	e6f4      	b.n	8005d3e <forward_lite_conv2d_sssa8_ch+0x1f6>
 8005f54:	4565      	cmp	r5, ip
 8005f56:	f841 4c04 	str.w	r4, [r1, #-4]
 8005f5a:	f101 0104 	add.w	r1, r1, #4
 8005f5e:	f47f ae5d 	bne.w	8005c1c <forward_lite_conv2d_sssa8_ch+0xd4>
 8005f62:	e66e      	b.n	8005c42 <forward_lite_conv2d_sssa8_ch+0xfa>
 8005f64:	f10a 0a01 	add.w	sl, sl, #1
 8005f68:	4629      	mov	r1, r5
 8005f6a:	463a      	mov	r2, r7
 8005f6c:	4640      	mov	r0, r8
 8005f6e:	fa0f fa8a 	sxth.w	sl, sl
 8005f72:	f002 f967 	bl	8008244 <arm_fill_q15>
 8005f76:	45a2      	cmp	sl, r4
 8005f78:	444d      	add	r5, r9
 8005f7a:	dbf3      	blt.n	8005f64 <forward_lite_conv2d_sssa8_ch+0x41c>
 8005f7c:	e774      	b.n	8005e68 <forward_lite_conv2d_sssa8_ch+0x320>
 8005f7e:	4613      	mov	r3, r2
 8005f80:	3301      	adds	r3, #1
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	e6be      	b.n	8005d04 <forward_lite_conv2d_sssa8_ch+0x1bc>
 8005f86:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d133      	bne.n	8005ff4 <forward_lite_conv2d_sssa8_ch+0x4ac>
 8005f8c:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8005f8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005f90:	3b01      	subs	r3, #1
 8005f92:	9342      	str	r3, [sp, #264]	; 0x108
 8005f94:	2301      	movs	r3, #1
 8005f96:	f8ad 3126 	strh.w	r3, [sp, #294]	; 0x126
 8005f9a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	f6ff af16 	blt.w	8005dce <forward_lite_conv2d_sssa8_ch+0x286>
 8005fa2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8005fa6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005fa8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005faa:	42ab      	cmp	r3, r5
 8005fac:	f47f af66 	bne.w	8005e7c <forward_lite_conv2d_sssa8_ch+0x334>
 8005fb0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005fb2:	2b03      	cmp	r3, #3
 8005fb4:	f000 80b3 	beq.w	800611e <forward_lite_conv2d_sssa8_ch+0x5d6>
 8005fb8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005fba:	9308      	str	r3, [sp, #32]
 8005fbc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005fbe:	9307      	str	r3, [sp, #28]
 8005fc0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005fc2:	9306      	str	r3, [sp, #24]
 8005fc4:	9b77      	ldr	r3, [sp, #476]	; 0x1dc
 8005fc6:	9305      	str	r3, [sp, #20]
 8005fc8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005fca:	9304      	str	r3, [sp, #16]
 8005fcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005fce:	9303      	str	r3, [sp, #12]
 8005fd0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005fd2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8005fd4:	9302      	str	r3, [sp, #8]
 8005fd6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005fd8:	9300      	str	r3, [sp, #0]
 8005fda:	2300      	movs	r3, #0
 8005fdc:	9301      	str	r3, [sp, #4]
 8005fde:	ee1a 2a90 	vmov	r2, s21
 8005fe2:	ee19 3a90 	vmov	r3, s19
 8005fe6:	ee1a 0a10 	vmov	r0, s20
 8005fea:	4629      	mov	r1, r5
 8005fec:	f001 faf4 	bl	80075d8 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 8005ff0:	901a      	str	r0, [sp, #104]	; 0x68
 8005ff2:	e743      	b.n	8005e7c <forward_lite_conv2d_sssa8_ch+0x334>
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	9341      	str	r3, [sp, #260]	; 0x104
 8005ff8:	f8bd 3124 	ldrh.w	r3, [sp, #292]	; 0x124
 8005ffc:	f8ad 3126 	strh.w	r3, [sp, #294]	; 0x126
 8006000:	2b01      	cmp	r3, #1
 8006002:	f43f aedf 	beq.w	8005dc4 <forward_lite_conv2d_sssa8_ch+0x27c>
 8006006:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800600a:	930f      	str	r3, [sp, #60]	; 0x3c
 800600c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800600e:	f9bd 402c 	ldrsh.w	r4, [sp, #44]	; 0x2c
 8006012:	2b00      	cmp	r3, #0
 8006014:	d152      	bne.n	80060bc <forward_lite_conv2d_sssa8_ch+0x574>
 8006016:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006018:	990d      	ldr	r1, [sp, #52]	; 0x34
 800601a:	428b      	cmp	r3, r1
 800601c:	f6bf af2a 	bge.w	8005e74 <forward_lite_conv2d_sssa8_ch+0x32c>
 8006020:	ee18 2a90 	vmov	r2, s17
 8006024:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 8006028:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 800602c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800602e:	ee19 8a10 	vmov	r8, s18
 8006032:	46aa      	mov	sl, r5
 8006034:	461e      	mov	r6, r3
 8006036:	4618      	mov	r0, r3
 8006038:	460d      	mov	r5, r1
 800603a:	fb00 4007 	mla	r0, r0, r7, r4
 800603e:	3601      	adds	r6, #1
 8006040:	fb08 9000 	mla	r0, r8, r0, r9
 8006044:	4651      	mov	r1, sl
 8006046:	b236      	sxth	r6, r6
 8006048:	920a      	str	r2, [sp, #40]	; 0x28
 800604a:	f001 f86f 	bl	800712c <st_int8_to16_no_shift_interleaved>
 800604e:	42ae      	cmp	r6, r5
 8006050:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006052:	44da      	add	sl, fp
 8006054:	4630      	mov	r0, r6
 8006056:	dbf0      	blt.n	800603a <forward_lite_conv2d_sssa8_ch+0x4f2>
 8006058:	4655      	mov	r5, sl
 800605a:	e70b      	b.n	8005e74 <forward_lite_conv2d_sssa8_ch+0x32c>
 800605c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800605e:	429a      	cmp	r2, r3
 8006060:	46da      	mov	sl, fp
 8006062:	dd1e      	ble.n	80060a2 <forward_lite_conv2d_sssa8_ch+0x55a>
 8006064:	46dc      	mov	ip, fp
 8006066:	961d      	str	r6, [sp, #116]	; 0x74
 8006068:	e012      	b.n	8006090 <forward_lite_conv2d_sssa8_ch+0x548>
 800606a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800606c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800606e:	4566      	cmp	r6, ip
 8006070:	4463      	add	r3, ip
 8006072:	dd13      	ble.n	800609c <forward_lite_conv2d_sssa8_ch+0x554>
 8006074:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8006076:	fb07 0003 	mla	r0, r7, r3, r0
 800607a:	f001 f857 	bl	800712c <st_int8_to16_no_shift_interleaved>
 800607e:	f10a 0a01 	add.w	sl, sl, #1
 8006082:	fa0f fa8a 	sxth.w	sl, sl
 8006086:	4554      	cmp	r4, sl
 8006088:	444d      	add	r5, r9
 800608a:	46d4      	mov	ip, sl
 800608c:	f77f aeeb 	ble.w	8005e66 <forward_lite_conv2d_sssa8_ch+0x31e>
 8006090:	f1ba 0f00 	cmp.w	sl, #0
 8006094:	4629      	mov	r1, r5
 8006096:	463a      	mov	r2, r7
 8006098:	4640      	mov	r0, r8
 800609a:	dae6      	bge.n	800606a <forward_lite_conv2d_sssa8_ch+0x522>
 800609c:	f002 f8d2 	bl	8008244 <arm_fill_q15>
 80060a0:	e7ed      	b.n	800607e <forward_lite_conv2d_sssa8_ch+0x536>
 80060a2:	f10a 0a01 	add.w	sl, sl, #1
 80060a6:	4629      	mov	r1, r5
 80060a8:	463a      	mov	r2, r7
 80060aa:	4640      	mov	r0, r8
 80060ac:	fa0f fa8a 	sxth.w	sl, sl
 80060b0:	f002 f8c8 	bl	8008244 <arm_fill_q15>
 80060b4:	45a2      	cmp	sl, r4
 80060b6:	444d      	add	r5, r9
 80060b8:	dbf3      	blt.n	80060a2 <forward_lite_conv2d_sssa8_ch+0x55a>
 80060ba:	e6d5      	b.n	8005e68 <forward_lite_conv2d_sssa8_ch+0x320>
 80060bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80060be:	990d      	ldr	r1, [sp, #52]	; 0x34
 80060c0:	428b      	cmp	r3, r1
 80060c2:	f6bf aed7 	bge.w	8005e74 <forward_lite_conv2d_sssa8_ch+0x32c>
 80060c6:	ee18 2a90 	vmov	r2, s17
 80060ca:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 80060ce:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 80060d2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80060d4:	ee19 8a10 	vmov	r8, s18
 80060d8:	46aa      	mov	sl, r5
 80060da:	461e      	mov	r6, r3
 80060dc:	4618      	mov	r0, r3
 80060de:	460d      	mov	r5, r1
 80060e0:	fb00 4007 	mla	r0, r0, r7, r4
 80060e4:	3601      	adds	r6, #1
 80060e6:	fb08 9000 	mla	r0, r8, r0, r9
 80060ea:	4651      	mov	r1, sl
 80060ec:	b236      	sxth	r6, r6
 80060ee:	920a      	str	r2, [sp, #40]	; 0x28
 80060f0:	f000 ffbc 	bl	800706c <st_int8_to16_no_shift>
 80060f4:	42ae      	cmp	r6, r5
 80060f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060f8:	44da      	add	sl, fp
 80060fa:	4630      	mov	r0, r6
 80060fc:	dbf0      	blt.n	80060e0 <forward_lite_conv2d_sssa8_ch+0x598>
 80060fe:	4655      	mov	r5, sl
 8006100:	e6b8      	b.n	8005e74 <forward_lite_conv2d_sssa8_ch+0x32c>
 8006102:	46da      	mov	sl, fp
 8006104:	f10a 0a01 	add.w	sl, sl, #1
 8006108:	4629      	mov	r1, r5
 800610a:	463a      	mov	r2, r7
 800610c:	4640      	mov	r0, r8
 800610e:	fa0f fa8a 	sxth.w	sl, sl
 8006112:	f002 f897 	bl	8008244 <arm_fill_q15>
 8006116:	45a2      	cmp	sl, r4
 8006118:	444d      	add	r5, r9
 800611a:	dbf3      	blt.n	8006104 <forward_lite_conv2d_sssa8_ch+0x5bc>
 800611c:	e6a4      	b.n	8005e68 <forward_lite_conv2d_sssa8_ch+0x320>
 800611e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006120:	9919      	ldr	r1, [sp, #100]	; 0x64
 8006122:	2b00      	cmp	r3, #0
 8006124:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006126:	9308      	str	r3, [sp, #32]
 8006128:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800612a:	9307      	str	r3, [sp, #28]
 800612c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800612e:	9306      	str	r3, [sp, #24]
 8006130:	9b77      	ldr	r3, [sp, #476]	; 0x1dc
 8006132:	9305      	str	r3, [sp, #20]
 8006134:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006136:	9304      	str	r3, [sp, #16]
 8006138:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800613a:	9303      	str	r3, [sp, #12]
 800613c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800613e:	9302      	str	r3, [sp, #8]
 8006140:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8006142:	9300      	str	r3, [sp, #0]
 8006144:	bf0c      	ite	eq
 8006146:	2302      	moveq	r3, #2
 8006148:	2300      	movne	r3, #0
 800614a:	ee1a 2a90 	vmov	r2, s21
 800614e:	9301      	str	r3, [sp, #4]
 8006150:	ee1a 0a10 	vmov	r0, s20
 8006154:	ee19 3a90 	vmov	r3, s19
 8006158:	f001 fa3e 	bl	80075d8 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 800615c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800615e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006160:	901a      	str	r0, [sp, #104]	; 0x68
 8006162:	3b01      	subs	r3, #1
 8006164:	4293      	cmp	r3, r2
 8006166:	d102      	bne.n	800616e <forward_lite_conv2d_sssa8_ch+0x626>
 8006168:	4603      	mov	r3, r0
 800616a:	3302      	adds	r3, #2
 800616c:	931a      	str	r3, [sp, #104]	; 0x68
 800616e:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006170:	e684      	b.n	8005e7c <forward_lite_conv2d_sssa8_ch+0x334>
 8006172:	b2a3      	uxth	r3, r4
 8006174:	9327      	str	r3, [sp, #156]	; 0x9c
 8006176:	e68e      	b.n	8005e96 <forward_lite_conv2d_sssa8_ch+0x34e>
 8006178:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800617a:	931f      	str	r3, [sp, #124]	; 0x7c
 800617c:	1e53      	subs	r3, r2, #1
 800617e:	b29b      	uxth	r3, r3
 8006180:	2a00      	cmp	r2, #0
 8006182:	f47f aee5 	bne.w	8005f50 <forward_lite_conv2d_sssa8_ch+0x408>
 8006186:	b055      	add	sp, #340	; 0x154
 8006188:	ecbd 8b08 	vpop	{d8-d11}
 800618c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006190:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006192:	9a72      	ldr	r2, [sp, #456]	; 0x1c8
 8006194:	3303      	adds	r3, #3
 8006196:	18d3      	adds	r3, r2, r3
 8006198:	931a      	str	r3, [sp, #104]	; 0x68
 800619a:	e5e3      	b.n	8005d64 <forward_lite_conv2d_sssa8_ch+0x21c>
 800619c:	4611      	mov	r1, r2
 800619e:	9a72      	ldr	r2, [sp, #456]	; 0x1c8
 80061a0:	931f      	str	r3, [sp, #124]	; 0x7c
 80061a2:	440a      	add	r2, r1
 80061a4:	9272      	str	r2, [sp, #456]	; 0x1c8
 80061a6:	e6cd      	b.n	8005f44 <forward_lite_conv2d_sssa8_ch+0x3fc>
 80061a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80061aa:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80061ac:	9866      	ldr	r0, [sp, #408]	; 0x198
 80061ae:	ee1a 1a10 	vmov	r1, s20
 80061b2:	f000 fffd 	bl	80071b0 <st_int8_to16_dual>
 80061b6:	e5cf      	b.n	8005d58 <forward_lite_conv2d_sssa8_ch+0x210>
 80061b8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80061ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80061bc:	ee19 1a90 	vmov	r1, s19
 80061c0:	fb02 f303 	mul.w	r3, r2, r3
 80061c4:	9a72      	ldr	r2, [sp, #456]	; 0x1c8
 80061c6:	fb01 2303 	mla	r3, r1, r3, r2
 80061ca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80061cc:	429a      	cmp	r2, r3
 80061ce:	f4bf ad80 	bcs.w	8005cd2 <forward_lite_conv2d_sssa8_ch+0x18a>
 80061d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80061d4:	fb03 f308 	mul.w	r3, r3, r8
 80061d8:	fb09 2303 	mla	r3, r9, r3, r2
 80061dc:	9a72      	ldr	r2, [sp, #456]	; 0x1c8
 80061de:	429a      	cmp	r2, r3
 80061e0:	f4bf ad77 	bcs.w	8005cd2 <forward_lite_conv2d_sssa8_ch+0x18a>
 80061e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80061e6:	fbb4 f3f3 	udiv	r3, r4, r3
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	4619      	mov	r1, r3
 80061ee:	ee19 3a90 	vmov	r3, s19
 80061f2:	4299      	cmp	r1, r3
 80061f4:	bf28      	it	cs
 80061f6:	4619      	movcs	r1, r3
 80061f8:	fbb3 f2f1 	udiv	r2, r3, r1
 80061fc:	fb01 3312 	mls	r3, r1, r2, r3
 8006200:	b29b      	uxth	r3, r3
 8006202:	b292      	uxth	r2, r2
 8006204:	9131      	str	r1, [sp, #196]	; 0xc4
 8006206:	922f      	str	r2, [sp, #188]	; 0xbc
 8006208:	b11b      	cbz	r3, 8006212 <forward_lite_conv2d_sssa8_ch+0x6ca>
 800620a:	4613      	mov	r3, r2
 800620c:	3301      	adds	r3, #1
 800620e:	b29b      	uxth	r3, r3
 8006210:	932f      	str	r3, [sp, #188]	; 0xbc
 8006212:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d0b6      	beq.n	8006186 <forward_lite_conv2d_sssa8_ch+0x63e>
 8006218:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800621a:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800621e:	fb09 f505 	mul.w	r5, r9, r5
 8006222:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8006226:	9314      	str	r3, [sp, #80]	; 0x50
 8006228:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800622a:	3b01      	subs	r3, #1
 800622c:	b29b      	uxth	r3, r3
 800622e:	9333      	str	r3, [sp, #204]	; 0xcc
 8006230:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8006232:	425b      	negs	r3, r3
 8006234:	b29b      	uxth	r3, r3
 8006236:	9330      	str	r3, [sp, #192]	; 0xc0
 8006238:	f009 0303 	and.w	r3, r9, #3
 800623c:	fa0f f68b 	sxth.w	r6, fp
 8006240:	930f      	str	r3, [sp, #60]	; 0x3c
 8006242:	ea4f 034a 	mov.w	r3, sl, lsl #1
 8006246:	2400      	movs	r4, #0
 8006248:	9316      	str	r3, [sp, #88]	; 0x58
 800624a:	ee08 aa90 	vmov	s17, sl
 800624e:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8006252:	ee09 9a10 	vmov	s18, r9
 8006256:	ee0b 6a90 	vmov	s23, r6
 800625a:	932c      	str	r3, [sp, #176]	; 0xb0
 800625c:	4625      	mov	r5, r4
 800625e:	a840      	add	r0, sp, #256	; 0x100
 8006260:	f001 f9a0 	bl	80075a4 <ai_padding_opt_phase1>
 8006264:	ee19 3a90 	vmov	r3, s19
 8006268:	9a72      	ldr	r2, [sp, #456]	; 0x1c8
 800626a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800626c:	fb03 f305 	mul.w	r3, r3, r5
 8006270:	fb01 2303 	mla	r3, r1, r3, r2
 8006274:	931d      	str	r3, [sp, #116]	; 0x74
 8006276:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8006278:	b953      	cbnz	r3, 8006290 <forward_lite_conv2d_sssa8_ch+0x748>
 800627a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800627c:	2b00      	cmp	r3, #0
 800627e:	f040 8216 	bne.w	80066ae <forward_lite_conv2d_sssa8_ch+0xb66>
 8006282:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8006284:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006286:	9866      	ldr	r0, [sp, #408]	; 0x198
 8006288:	ee1a 1a10 	vmov	r1, s20
 800628c:	f001 f87a 	bl	8007384 <st_int8_to16_dual_interleaved>
 8006290:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8006292:	2b00      	cmp	r3, #0
 8006294:	f000 8216 	beq.w	80066c4 <forward_lite_conv2d_sssa8_ch+0xb7c>
 8006298:	b2a3      	uxth	r3, r4
 800629a:	9332      	str	r3, [sp, #200]	; 0xc8
 800629c:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 80062a0:	1a9b      	subs	r3, r3, r2
 80062a2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80062a4:	edcd 9a2b 	vstr	s19, [sp, #172]	; 0xac
 80062a8:	fb05 3302 	mla	r3, r5, r2, r3
 80062ac:	930d      	str	r3, [sp, #52]	; 0x34
 80062ae:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 80062b2:	9312      	str	r3, [sp, #72]	; 0x48
 80062b4:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80062b6:	9327      	str	r3, [sp, #156]	; 0x9c
 80062b8:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80062ba:	9318      	str	r3, [sp, #96]	; 0x60
 80062bc:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80062be:	932d      	str	r3, [sp, #180]	; 0xb4
 80062c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80062c2:	931f      	str	r3, [sp, #124]	; 0x7c
 80062c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062c6:	9324      	str	r3, [sp, #144]	; 0x90
 80062c8:	9b77      	ldr	r3, [sp, #476]	; 0x1dc
 80062ca:	9321      	str	r3, [sp, #132]	; 0x84
 80062cc:	eeb0 ba6a 	vmov.f32	s22, s21
 80062d0:	9a44      	ldr	r2, [sp, #272]	; 0x110
 80062d2:	9241      	str	r2, [sp, #260]	; 0x104
 80062d4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80062d6:	9242      	str	r2, [sp, #264]	; 0x108
 80062d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80062da:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80062dc:	9340      	str	r3, [sp, #256]	; 0x100
 80062de:	2a00      	cmp	r2, #0
 80062e0:	f000 8193 	beq.w	800660a <forward_lite_conv2d_sssa8_ch+0xac2>
 80062e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80062e6:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80062e8:	4252      	negs	r2, r2
 80062ea:	b292      	uxth	r2, r2
 80062ec:	920b      	str	r2, [sp, #44]	; 0x2c
 80062ee:	2100      	movs	r1, #0
 80062f0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80062f2:	9217      	str	r2, [sp, #92]	; 0x5c
 80062f4:	460a      	mov	r2, r1
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d070      	beq.n	80063dc <forward_lite_conv2d_sssa8_ch+0x894>
 80062fa:	3b01      	subs	r3, #1
 80062fc:	9340      	str	r3, [sp, #256]	; 0x100
 80062fe:	2301      	movs	r3, #1
 8006300:	f8ad 3126 	strh.w	r3, [sp, #294]	; 0x126
 8006304:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006306:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006308:	4283      	cmp	r3, r0
 800630a:	da74      	bge.n	80063f6 <forward_lite_conv2d_sssa8_ch+0x8ae>
 800630c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800630e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8006310:	f8dd 90b0 	ldr.w	r9, [sp, #176]	; 0xb0
 8006314:	fb02 3200 	mla	r2, r2, r0, r3
 8006318:	b28b      	uxth	r3, r1
 800631a:	930e      	str	r3, [sp, #56]	; 0x38
 800631c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800631e:	1ad5      	subs	r5, r2, r3
 8006320:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8006324:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006326:	ee19 7a10 	vmov	r7, s18
 800632a:	ee1b 8a90 	vmov	r8, s23
 800632e:	461e      	mov	r6, r3
 8006330:	4693      	mov	fp, r2
 8006332:	455d      	cmp	r5, fp
 8006334:	dd39      	ble.n	80063aa <forward_lite_conv2d_sssa8_ch+0x862>
 8006336:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006338:	2e00      	cmp	r6, #0
 800633a:	fb03 f202 	mul.w	r2, r3, r2
 800633e:	920a      	str	r2, [sp, #40]	; 0x28
 8006340:	f2c0 813a 	blt.w	80065b8 <forward_lite_conv2d_sssa8_ch+0xa70>
 8006344:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006346:	2a00      	cmp	r2, #0
 8006348:	f000 80e1 	beq.w	800650e <forward_lite_conv2d_sssa8_ch+0x9c6>
 800634c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800634e:	429a      	cmp	r2, r3
 8006350:	46da      	mov	sl, fp
 8006352:	f340 809c 	ble.w	800648e <forward_lite_conv2d_sssa8_ch+0x946>
 8006356:	46dc      	mov	ip, fp
 8006358:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
 800635c:	46b3      	mov	fp, r6
 800635e:	e011      	b.n	8006384 <forward_lite_conv2d_sssa8_ch+0x83c>
 8006360:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006362:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006364:	4566      	cmp	r6, ip
 8006366:	4463      	add	r3, ip
 8006368:	dd12      	ble.n	8006390 <forward_lite_conv2d_sssa8_ch+0x848>
 800636a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800636c:	f10a 0a01 	add.w	sl, sl, #1
 8006370:	fa0f fa8a 	sxth.w	sl, sl
 8006374:	fb07 0003 	mla	r0, r7, r3, r0
 8006378:	f000 fe78 	bl	800706c <st_int8_to16_no_shift>
 800637c:	4555      	cmp	r5, sl
 800637e:	444c      	add	r4, r9
 8006380:	46d4      	mov	ip, sl
 8006382:	dd0f      	ble.n	80063a4 <forward_lite_conv2d_sssa8_ch+0x85c>
 8006384:	f1ba 0f00 	cmp.w	sl, #0
 8006388:	463a      	mov	r2, r7
 800638a:	4621      	mov	r1, r4
 800638c:	4640      	mov	r0, r8
 800638e:	dae7      	bge.n	8006360 <forward_lite_conv2d_sssa8_ch+0x818>
 8006390:	f10a 0a01 	add.w	sl, sl, #1
 8006394:	fa0f fa8a 	sxth.w	sl, sl
 8006398:	f001 ff54 	bl	8008244 <arm_fill_q15>
 800639c:	4555      	cmp	r5, sl
 800639e:	444c      	add	r4, r9
 80063a0:	46d4      	mov	ip, sl
 80063a2:	dcef      	bgt.n	8006384 <forward_lite_conv2d_sssa8_ch+0x83c>
 80063a4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80063a6:	465e      	mov	r6, fp
 80063a8:	469b      	mov	fp, r3
 80063aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80063ac:	3601      	adds	r6, #1
 80063ae:	b236      	sxth	r6, r6
 80063b0:	4296      	cmp	r6, r2
 80063b2:	4633      	mov	r3, r6
 80063b4:	dbbd      	blt.n	8006332 <forward_lite_conv2d_sssa8_ch+0x7ea>
 80063b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80063b8:	42a3      	cmp	r3, r4
 80063ba:	d021      	beq.n	8006400 <forward_lite_conv2d_sssa8_ch+0x8b8>
 80063bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063be:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80063c0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80063c2:	4413      	add	r3, r2
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	3101      	adds	r1, #1
 80063c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80063ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80063cc:	b209      	sxth	r1, r1
 80063ce:	4299      	cmp	r1, r3
 80063d0:	460a      	mov	r2, r1
 80063d2:	f280 80ff 	bge.w	80065d4 <forward_lite_conv2d_sssa8_ch+0xa8c>
 80063d6:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d18e      	bne.n	80062fa <forward_lite_conv2d_sssa8_ch+0x7b2>
 80063dc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d162      	bne.n	80064a8 <forward_lite_conv2d_sssa8_ch+0x960>
 80063e2:	9b42      	ldr	r3, [sp, #264]	; 0x108
 80063e4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80063e6:	3b01      	subs	r3, #1
 80063e8:	9342      	str	r3, [sp, #264]	; 0x108
 80063ea:	2301      	movs	r3, #1
 80063ec:	f8ad 3126 	strh.w	r3, [sp, #294]	; 0x126
 80063f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80063f2:	4283      	cmp	r3, r0
 80063f4:	db8a      	blt.n	800630c <forward_lite_conv2d_sssa8_ch+0x7c4>
 80063f6:	b28b      	uxth	r3, r1
 80063f8:	930e      	str	r3, [sp, #56]	; 0x38
 80063fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80063fc:	42a3      	cmp	r3, r4
 80063fe:	d1dd      	bne.n	80063bc <forward_lite_conv2d_sssa8_ch+0x874>
 8006400:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006402:	9308      	str	r3, [sp, #32]
 8006404:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006406:	9307      	str	r3, [sp, #28]
 8006408:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800640a:	9306      	str	r3, [sp, #24]
 800640c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800640e:	9305      	str	r3, [sp, #20]
 8006410:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006412:	9304      	str	r3, [sp, #16]
 8006414:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006416:	9303      	str	r3, [sp, #12]
 8006418:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800641a:	9302      	str	r3, [sp, #8]
 800641c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	2300      	movs	r3, #0
 8006422:	ee1b 2a10 	vmov	r2, s22
 8006426:	9919      	ldr	r1, [sp, #100]	; 0x64
 8006428:	9301      	str	r3, [sp, #4]
 800642a:	ee1a 0a10 	vmov	r0, s20
 800642e:	ee19 3a90 	vmov	r3, s19
 8006432:	f001 f8d1 	bl	80075d8 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 8006436:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006438:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800643a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800643c:	9017      	str	r0, [sp, #92]	; 0x5c
 800643e:	4413      	add	r3, r2
 8006440:	b29b      	uxth	r3, r3
 8006442:	3101      	adds	r1, #1
 8006444:	930b      	str	r3, [sp, #44]	; 0x2c
 8006446:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006448:	b209      	sxth	r1, r1
 800644a:	4299      	cmp	r1, r3
 800644c:	460a      	mov	r2, r1
 800644e:	f280 80dc 	bge.w	800660a <forward_lite_conv2d_sssa8_ch+0xac2>
 8006452:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8006454:	e7bf      	b.n	80063d6 <forward_lite_conv2d_sssa8_ch+0x88e>
 8006456:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006458:	ee19 1a90 	vmov	r1, s19
 800645c:	fb01 f302 	mul.w	r3, r1, r2
 8006460:	42a3      	cmp	r3, r4
 8006462:	f73f ac30 	bgt.w	8005cc6 <forward_lite_conv2d_sssa8_ch+0x17e>
 8006466:	f019 0f03 	tst.w	r9, #3
 800646a:	972e      	str	r7, [sp, #184]	; 0xb8
 800646c:	f040 812d 	bne.w	80066ca <forward_lite_conv2d_sssa8_ch+0xb82>
 8006470:	ee19 3a90 	vmov	r3, s19
 8006474:	ee1a 1a10 	vmov	r1, s20
 8006478:	9866      	ldr	r0, [sp, #408]	; 0x198
 800647a:	f000 ff83 	bl	8007384 <st_int8_to16_dual_interleaved>
 800647e:	e424      	b.n	8005cca <forward_lite_conv2d_sssa8_ch+0x182>
 8006480:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8006482:	4603      	mov	r3, r0
 8006484:	fb01 f303 	mul.w	r3, r1, r3
 8006488:	931c      	str	r3, [sp, #112]	; 0x70
 800648a:	f7ff bb9c 	b.w	8005bc6 <forward_lite_conv2d_sssa8_ch+0x7e>
 800648e:	f10a 0a01 	add.w	sl, sl, #1
 8006492:	4621      	mov	r1, r4
 8006494:	463a      	mov	r2, r7
 8006496:	4640      	mov	r0, r8
 8006498:	fa0f fa8a 	sxth.w	sl, sl
 800649c:	f001 fed2 	bl	8008244 <arm_fill_q15>
 80064a0:	4555      	cmp	r5, sl
 80064a2:	444c      	add	r4, r9
 80064a4:	dcf3      	bgt.n	800648e <forward_lite_conv2d_sssa8_ch+0x946>
 80064a6:	e780      	b.n	80063aa <forward_lite_conv2d_sssa8_ch+0x862>
 80064a8:	3b01      	subs	r3, #1
 80064aa:	9341      	str	r3, [sp, #260]	; 0x104
 80064ac:	f8bd 3124 	ldrh.w	r3, [sp, #292]	; 0x124
 80064b0:	f8ad 3126 	strh.w	r3, [sp, #294]	; 0x126
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	f43f af25 	beq.w	8006304 <forward_lite_conv2d_sssa8_ch+0x7bc>
 80064ba:	b28b      	uxth	r3, r1
 80064bc:	930e      	str	r3, [sp, #56]	; 0x38
 80064be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80064c0:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d154      	bne.n	8006572 <forward_lite_conv2d_sssa8_ch+0xa2a>
 80064c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80064ca:	990d      	ldr	r1, [sp, #52]	; 0x34
 80064cc:	428b      	cmp	r3, r1
 80064ce:	f6bf af72 	bge.w	80063b6 <forward_lite_conv2d_sssa8_ch+0x86e>
 80064d2:	ee18 2a90 	vmov	r2, s17
 80064d6:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
 80064da:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 80064de:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80064e0:	ee19 8a10 	vmov	r8, s18
 80064e4:	46a2      	mov	sl, r4
 80064e6:	461e      	mov	r6, r3
 80064e8:	4618      	mov	r0, r3
 80064ea:	460c      	mov	r4, r1
 80064ec:	fb00 5007 	mla	r0, r0, r7, r5
 80064f0:	3601      	adds	r6, #1
 80064f2:	fb08 9000 	mla	r0, r8, r0, r9
 80064f6:	4651      	mov	r1, sl
 80064f8:	b236      	sxth	r6, r6
 80064fa:	920a      	str	r2, [sp, #40]	; 0x28
 80064fc:	f000 fe16 	bl	800712c <st_int8_to16_no_shift_interleaved>
 8006500:	42a6      	cmp	r6, r4
 8006502:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006504:	44da      	add	sl, fp
 8006506:	4630      	mov	r0, r6
 8006508:	dbf0      	blt.n	80064ec <forward_lite_conv2d_sssa8_ch+0x9a4>
 800650a:	4654      	mov	r4, sl
 800650c:	e753      	b.n	80063b6 <forward_lite_conv2d_sssa8_ch+0x86e>
 800650e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006510:	429a      	cmp	r2, r3
 8006512:	46da      	mov	sl, fp
 8006514:	dd20      	ble.n	8006558 <forward_lite_conv2d_sssa8_ch+0xa10>
 8006516:	46dc      	mov	ip, fp
 8006518:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
 800651c:	46b3      	mov	fp, r6
 800651e:	e012      	b.n	8006546 <forward_lite_conv2d_sssa8_ch+0x9fe>
 8006520:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006524:	4566      	cmp	r6, ip
 8006526:	4463      	add	r3, ip
 8006528:	dd13      	ble.n	8006552 <forward_lite_conv2d_sssa8_ch+0xa0a>
 800652a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800652c:	fb07 0003 	mla	r0, r7, r3, r0
 8006530:	f000 fdfc 	bl	800712c <st_int8_to16_no_shift_interleaved>
 8006534:	f10a 0a01 	add.w	sl, sl, #1
 8006538:	fa0f fa8a 	sxth.w	sl, sl
 800653c:	4555      	cmp	r5, sl
 800653e:	444c      	add	r4, r9
 8006540:	46d4      	mov	ip, sl
 8006542:	f77f af2f 	ble.w	80063a4 <forward_lite_conv2d_sssa8_ch+0x85c>
 8006546:	f1ba 0f00 	cmp.w	sl, #0
 800654a:	4621      	mov	r1, r4
 800654c:	463a      	mov	r2, r7
 800654e:	4640      	mov	r0, r8
 8006550:	dae6      	bge.n	8006520 <forward_lite_conv2d_sssa8_ch+0x9d8>
 8006552:	f001 fe77 	bl	8008244 <arm_fill_q15>
 8006556:	e7ed      	b.n	8006534 <forward_lite_conv2d_sssa8_ch+0x9ec>
 8006558:	f10a 0a01 	add.w	sl, sl, #1
 800655c:	4621      	mov	r1, r4
 800655e:	463a      	mov	r2, r7
 8006560:	4640      	mov	r0, r8
 8006562:	fa0f fa8a 	sxth.w	sl, sl
 8006566:	f001 fe6d 	bl	8008244 <arm_fill_q15>
 800656a:	4555      	cmp	r5, sl
 800656c:	444c      	add	r4, r9
 800656e:	dcf3      	bgt.n	8006558 <forward_lite_conv2d_sssa8_ch+0xa10>
 8006570:	e71b      	b.n	80063aa <forward_lite_conv2d_sssa8_ch+0x862>
 8006572:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006574:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006576:	428b      	cmp	r3, r1
 8006578:	f6bf af1d 	bge.w	80063b6 <forward_lite_conv2d_sssa8_ch+0x86e>
 800657c:	ee18 2a90 	vmov	r2, s17
 8006580:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
 8006584:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 8006588:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800658a:	ee19 8a10 	vmov	r8, s18
 800658e:	46a2      	mov	sl, r4
 8006590:	461e      	mov	r6, r3
 8006592:	4618      	mov	r0, r3
 8006594:	460c      	mov	r4, r1
 8006596:	fb00 5007 	mla	r0, r0, r7, r5
 800659a:	3601      	adds	r6, #1
 800659c:	fb08 9000 	mla	r0, r8, r0, r9
 80065a0:	4651      	mov	r1, sl
 80065a2:	b236      	sxth	r6, r6
 80065a4:	920a      	str	r2, [sp, #40]	; 0x28
 80065a6:	f000 fd61 	bl	800706c <st_int8_to16_no_shift>
 80065aa:	42a6      	cmp	r6, r4
 80065ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065ae:	44da      	add	sl, fp
 80065b0:	4630      	mov	r0, r6
 80065b2:	dbf0      	blt.n	8006596 <forward_lite_conv2d_sssa8_ch+0xa4e>
 80065b4:	4654      	mov	r4, sl
 80065b6:	e6fe      	b.n	80063b6 <forward_lite_conv2d_sssa8_ch+0x86e>
 80065b8:	46da      	mov	sl, fp
 80065ba:	f10a 0a01 	add.w	sl, sl, #1
 80065be:	4621      	mov	r1, r4
 80065c0:	463a      	mov	r2, r7
 80065c2:	4640      	mov	r0, r8
 80065c4:	fa0f fa8a 	sxth.w	sl, sl
 80065c8:	f001 fe3c 	bl	8008244 <arm_fill_q15>
 80065cc:	45aa      	cmp	sl, r5
 80065ce:	444c      	add	r4, r9
 80065d0:	dbf3      	blt.n	80065ba <forward_lite_conv2d_sssa8_ch+0xa72>
 80065d2:	e6ea      	b.n	80063aa <forward_lite_conv2d_sssa8_ch+0x862>
 80065d4:	9919      	ldr	r1, [sp, #100]	; 0x64
 80065d6:	428c      	cmp	r4, r1
 80065d8:	d017      	beq.n	800660a <forward_lite_conv2d_sssa8_ch+0xac2>
 80065da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80065dc:	9307      	str	r3, [sp, #28]
 80065de:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80065e0:	9306      	str	r3, [sp, #24]
 80065e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80065e4:	9305      	str	r3, [sp, #20]
 80065e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065e8:	9304      	str	r3, [sp, #16]
 80065ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80065ec:	9303      	str	r3, [sp, #12]
 80065ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80065f0:	9302      	str	r3, [sp, #8]
 80065f2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80065f4:	9301      	str	r3, [sp, #4]
 80065f6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80065f8:	9300      	str	r3, [sp, #0]
 80065fa:	ee1b 2a10 	vmov	r2, s22
 80065fe:	ee19 3a90 	vmov	r3, s19
 8006602:	ee1a 0a10 	vmov	r0, s20
 8006606:	f001 fbe3 	bl	8007dd0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 800660a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800660c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800660e:	991d      	ldr	r1, [sp, #116]	; 0x74
 8006610:	1a9b      	subs	r3, r3, r2
 8006612:	b29b      	uxth	r3, r3
 8006614:	4293      	cmp	r3, r2
 8006616:	932b      	str	r3, [sp, #172]	; 0xac
 8006618:	bf28      	it	cs
 800661a:	4613      	movcs	r3, r2
 800661c:	4411      	add	r1, r2
 800661e:	b29b      	uxth	r3, r3
 8006620:	911d      	str	r1, [sp, #116]	; 0x74
 8006622:	2b00      	cmp	r3, #0
 8006624:	d03a      	beq.n	800669c <forward_lite_conv2d_sssa8_ch+0xb54>
 8006626:	ee1b 4a10 	vmov	r4, s22
 800662a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800662e:	ee0b 4a10 	vmov	s22, r4
 8006632:	9c24      	ldr	r4, [sp, #144]	; 0x90
 8006634:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8006636:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8006638:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 800663c:	9424      	str	r4, [sp, #144]	; 0x90
 800663e:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8006640:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8006644:	9421      	str	r4, [sp, #132]	; 0x84
 8006646:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8006648:	fb01 0002 	mla	r0, r1, r2, r0
 800664c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006650:	921f      	str	r2, [sp, #124]	; 0x7c
 8006652:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006654:	902d      	str	r0, [sp, #180]	; 0xb4
 8006656:	bb1a      	cbnz	r2, 80066a0 <forward_lite_conv2d_sssa8_ch+0xb58>
 8006658:	460a      	mov	r2, r1
 800665a:	ee1a 1a10 	vmov	r1, s20
 800665e:	9318      	str	r3, [sp, #96]	; 0x60
 8006660:	f000 fe90 	bl	8007384 <st_int8_to16_dual_interleaved>
 8006664:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8006666:	3b01      	subs	r3, #1
 8006668:	b29b      	uxth	r3, r3
 800666a:	461a      	mov	r2, r3
 800666c:	9327      	str	r3, [sp, #156]	; 0x9c
 800666e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006672:	429a      	cmp	r2, r3
 8006674:	f47f ae2c 	bne.w	80062d0 <forward_lite_conv2d_sssa8_ch+0x788>
 8006678:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800667a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800667c:	9c32      	ldr	r4, [sp, #200]	; 0xc8
 800667e:	4413      	add	r3, r2
 8006680:	b29b      	uxth	r3, r3
 8006682:	3401      	adds	r4, #1
 8006684:	9330      	str	r3, [sp, #192]	; 0xc0
 8006686:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006688:	b224      	sxth	r4, r4
 800668a:	429c      	cmp	r4, r3
 800668c:	4625      	mov	r5, r4
 800668e:	f6ff ade6 	blt.w	800625e <forward_lite_conv2d_sssa8_ch+0x716>
 8006692:	b055      	add	sp, #340	; 0x154
 8006694:	ecbd 8b08 	vpop	{d8-d11}
 8006698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800669c:	9318      	str	r3, [sp, #96]	; 0x60
 800669e:	e7e1      	b.n	8006664 <forward_lite_conv2d_sssa8_ch+0xb1c>
 80066a0:	460a      	mov	r2, r1
 80066a2:	ee1a 1a10 	vmov	r1, s20
 80066a6:	9318      	str	r3, [sp, #96]	; 0x60
 80066a8:	f000 fd82 	bl	80071b0 <st_int8_to16_dual>
 80066ac:	e7da      	b.n	8006664 <forward_lite_conv2d_sssa8_ch+0xb1c>
 80066ae:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80066b0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80066b2:	9866      	ldr	r0, [sp, #408]	; 0x198
 80066b4:	ee1a 1a10 	vmov	r1, s20
 80066b8:	f000 fd7a 	bl	80071b0 <st_int8_to16_dual>
 80066bc:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f47f adea 	bne.w	8006298 <forward_lite_conv2d_sssa8_ch+0x750>
 80066c4:	b2a3      	uxth	r3, r4
 80066c6:	9332      	str	r3, [sp, #200]	; 0xc8
 80066c8:	e7d6      	b.n	8006678 <forward_lite_conv2d_sssa8_ch+0xb30>
 80066ca:	ee19 3a90 	vmov	r3, s19
 80066ce:	ee1a 1a10 	vmov	r1, s20
 80066d2:	9866      	ldr	r0, [sp, #408]	; 0x198
 80066d4:	f000 fd6c 	bl	80071b0 <st_int8_to16_dual>
 80066d8:	f7ff baf7 	b.w	8005cca <forward_lite_conv2d_sssa8_ch+0x182>

080066dc <align_factor>:
 80066dc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80066e0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80066e4:	b508      	push	{r3, lr}
 80066e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066ea:	f04f 0300 	mov.w	r3, #0
 80066ee:	8003      	strh	r3, [r0, #0]
 80066f0:	d425      	bmi.n	800673e <align_factor+0x62>
 80066f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80066f6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80066fa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80066fe:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8006702:	e005      	b.n	8006710 <align_factor+0x34>
 8006704:	8003      	strh	r3, [r0, #0]
 8006706:	b293      	uxth	r3, r2
 8006708:	428b      	cmp	r3, r1
 800670a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800670e:	d02d      	beq.n	800676c <align_factor+0x90>
 8006710:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006718:	f103 32ff 	add.w	r2, r3, #4294967295
 800671c:	dcf2      	bgt.n	8006704 <align_factor+0x28>
 800671e:	eddf 7a18 	vldr	s15, [pc, #96]	; 8006780 <align_factor+0xa4>
 8006722:	ee60 7a27 	vmul.f32	s15, s0, s15
 8006726:	ee17 0a90 	vmov	r0, s15
 800672a:	f7fa faad 	bl	8000c88 <__aeabi_f2lz>
 800672e:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 8006732:	bf1c      	itt	ne
 8006734:	f06f 4000 	mvnne.w	r0, #2147483648	; 0x80000000
 8006738:	ea80 70e1 	eorne.w	r0, r0, r1, asr #31
 800673c:	bd08      	pop	{r3, pc}
 800673e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006746:	ddd4      	ble.n	80066f2 <align_factor+0x16>
 8006748:	2301      	movs	r3, #1
 800674a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800674e:	e005      	b.n	800675c <align_factor+0x80>
 8006750:	8003      	strh	r3, [r0, #0]
 8006752:	b293      	uxth	r3, r2
 8006754:	2b21      	cmp	r3, #33	; 0x21
 8006756:	ee30 0a00 	vadd.f32	s0, s0, s0
 800675a:	d00d      	beq.n	8006778 <align_factor+0x9c>
 800675c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006764:	f103 0201 	add.w	r2, r3, #1
 8006768:	d4f2      	bmi.n	8006750 <align_factor+0x74>
 800676a:	e7d8      	b.n	800671e <align_factor+0x42>
 800676c:	f64f 73e2 	movw	r3, #65506	; 0xffe2
 8006770:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006774:	8003      	strh	r3, [r0, #0]
 8006776:	e7d2      	b.n	800671e <align_factor+0x42>
 8006778:	2300      	movs	r3, #0
 800677a:	8003      	strh	r3, [r0, #0]
 800677c:	4618      	mov	r0, r3
 800677e:	bd08      	pop	{r3, pc}
 8006780:	4f000000 	.word	0x4f000000

08006784 <align_factor_ch>:
 8006784:	b361      	cbz	r1, 80067e0 <align_factor_ch+0x5c>
 8006786:	ee80 7a20 	vdiv.f32	s14, s0, s1
 800678a:	b530      	push	{r4, r5, lr}
 800678c:	f1a2 0c04 	sub.w	ip, r2, #4
 8006790:	f1a3 0e02 	sub.w	lr, r3, #2
 8006794:	eb00 0481 	add.w	r4, r0, r1, lsl #2
 8006798:	2500      	movs	r5, #0
 800679a:	ecf0 7a01 	vldmia	r0!, {s15}
 800679e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067a2:	ee17 2a90 	vmov	r2, s15
 80067a6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80067aa:	f3c2 0316 	ubfx	r3, r2, #0, #23
 80067ae:	f503 0300 	add.w	r3, r3, #8388608	; 0x800000
 80067b2:	2a00      	cmp	r2, #0
 80067b4:	f1c1 017e 	rsb	r1, r1, #126	; 0x7e
 80067b8:	bfb8      	it	lt
 80067ba:	425b      	neglt	r3, r3
 80067bc:	291f      	cmp	r1, #31
 80067be:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 80067c2:	dc06      	bgt.n	80067d2 <align_factor_ch+0x4e>
 80067c4:	4284      	cmp	r4, r0
 80067c6:	f82e 1f02 	strh.w	r1, [lr, #2]!
 80067ca:	f84c 3f04 	str.w	r3, [ip, #4]!
 80067ce:	d1e4      	bne.n	800679a <align_factor_ch+0x16>
 80067d0:	bd30      	pop	{r4, r5, pc}
 80067d2:	4284      	cmp	r4, r0
 80067d4:	f82e 5f02 	strh.w	r5, [lr, #2]!
 80067d8:	f84c 5f04 	str.w	r5, [ip, #4]!
 80067dc:	d1dd      	bne.n	800679a <align_factor_ch+0x16>
 80067de:	bd30      	pop	{r4, r5, pc}
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop

080067e4 <st_sssa8_ch_convolve_rank1upd>:
 80067e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067e8:	b085      	sub	sp, #20
 80067ea:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 80067ee:	f99d b040 	ldrsb.w	fp, [sp, #64]	; 0x40
 80067f2:	fb13 f304 	smulbb	r3, r3, r4
 80067f6:	fb13 f500 	smulbb	r5, r3, r0
 80067fa:	460c      	mov	r4, r1
 80067fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067fe:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006800:	2a00      	cmp	r2, #0
 8006802:	d073      	beq.n	80068ec <st_sssa8_ch_convolve_rank1upd+0x108>
 8006804:	b2ad      	uxth	r5, r5
 8006806:	ea4f 0895 	mov.w	r8, r5, lsr #2
 800680a:	f1a3 0904 	sub.w	r9, r3, #4
 800680e:	f1a8 0381 	sub.w	r3, r8, #129	; 0x81
 8006812:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8006816:	ebc3 2043 	rsb	r0, r3, r3, lsl #9
 800681a:	f1a8 0780 	sub.w	r7, r8, #128	; 0x80
 800681e:	eb07 17c0 	add.w	r7, r7, r0, lsl #7
 8006822:	0258      	lsls	r0, r3, #9
 8006824:	3301      	adds	r3, #1
 8006826:	025b      	lsls	r3, r3, #9
 8006828:	f005 0503 	and.w	r5, r5, #3
 800682c:	9301      	str	r3, [sp, #4]
 800682e:	f500 6380 	add.w	r3, r0, #1024	; 0x400
 8006832:	9303      	str	r3, [sp, #12]
 8006834:	1e6b      	subs	r3, r5, #1
 8006836:	b29b      	uxth	r3, r3
 8006838:	9300      	str	r3, [sp, #0]
 800683a:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 800683e:	b2bf      	uxth	r7, r7
 8006840:	eb01 0a82 	add.w	sl, r1, r2, lsl #2
 8006844:	9302      	str	r3, [sp, #8]
 8006846:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 800684a:	d954      	bls.n	80068f6 <st_sssa8_ch_convolve_rank1upd+0x112>
 800684c:	9b03      	ldr	r3, [sp, #12]
 800684e:	f504 7000 	add.w	r0, r4, #512	; 0x200
 8006852:	eb04 0c03 	add.w	ip, r4, r3
 8006856:	2600      	movs	r6, #0
 8006858:	f5a0 7100 	sub.w	r1, r0, #512	; 0x200
 800685c:	2200      	movs	r2, #0
 800685e:	f851 3b04 	ldr.w	r3, [r1], #4
 8006862:	fa2f fe83 	sxtb16	lr, r3
 8006866:	4281      	cmp	r1, r0
 8006868:	ea4f 2333 	mov.w	r3, r3, ror #8
 800686c:	fa92 f21e 	qadd16	r2, r2, lr
 8006870:	fa2f f383 	sxtb16	r3, r3
 8006874:	fa92 f213 	qadd16	r2, r2, r3
 8006878:	d1f1      	bne.n	800685e <st_sssa8_ch_convolve_rank1upd+0x7a>
 800687a:	f501 7000 	add.w	r0, r1, #512	; 0x200
 800687e:	b213      	sxth	r3, r2
 8006880:	eb03 4222 	add.w	r2, r3, r2, asr #16
 8006884:	4560      	cmp	r0, ip
 8006886:	4416      	add	r6, r2
 8006888:	d1e6      	bne.n	8006858 <st_sssa8_ch_convolve_rank1upd+0x74>
 800688a:	9b01      	ldr	r3, [sp, #4]
 800688c:	18e1      	adds	r1, r4, r3
 800688e:	463c      	mov	r4, r7
 8006890:	b37c      	cbz	r4, 80068f2 <st_sssa8_ch_convolve_rank1upd+0x10e>
 8006892:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8006896:	2200      	movs	r2, #0
 8006898:	f851 3b04 	ldr.w	r3, [r1], #4
 800689c:	fa2f f083 	sxtb16	r0, r3
 80068a0:	428c      	cmp	r4, r1
 80068a2:	ea4f 2333 	mov.w	r3, r3, ror #8
 80068a6:	fa92 f210 	qadd16	r2, r2, r0
 80068aa:	fa2f f383 	sxtb16	r3, r3
 80068ae:	fa92 f213 	qadd16	r2, r2, r3
 80068b2:	d1f1      	bne.n	8006898 <st_sssa8_ch_convolve_rank1upd+0xb4>
 80068b4:	b213      	sxth	r3, r2
 80068b6:	eb03 4322 	add.w	r3, r3, r2, asr #16
 80068ba:	441e      	add	r6, r3
 80068bc:	b16d      	cbz	r5, 80068da <st_sssa8_ch_convolve_rank1upd+0xf6>
 80068be:	f994 3000 	ldrsb.w	r3, [r4]
 80068c2:	441e      	add	r6, r3
 80068c4:	9b00      	ldr	r3, [sp, #0]
 80068c6:	b13b      	cbz	r3, 80068d8 <st_sssa8_ch_convolve_rank1upd+0xf4>
 80068c8:	f994 3001 	ldrsb.w	r3, [r4, #1]
 80068cc:	2d02      	cmp	r5, #2
 80068ce:	441e      	add	r6, r3
 80068d0:	bf1c      	itt	ne
 80068d2:	f994 3002 	ldrsbne.w	r3, [r4, #2]
 80068d6:	18f6      	addne	r6, r6, r3
 80068d8:	442c      	add	r4, r5
 80068da:	f859 3f04 	ldr.w	r3, [r9, #4]!
 80068de:	fb0b 3616 	mls	r6, fp, r6, r3
 80068e2:	f84a 6b04 	str.w	r6, [sl], #4
 80068e6:	9b02      	ldr	r3, [sp, #8]
 80068e8:	459a      	cmp	sl, r3
 80068ea:	d1ac      	bne.n	8006846 <st_sssa8_ch_convolve_rank1upd+0x62>
 80068ec:	b005      	add	sp, #20
 80068ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068f2:	460c      	mov	r4, r1
 80068f4:	e7e2      	b.n	80068bc <st_sssa8_ch_convolve_rank1upd+0xd8>
 80068f6:	4621      	mov	r1, r4
 80068f8:	2600      	movs	r6, #0
 80068fa:	4644      	mov	r4, r8
 80068fc:	e7c8      	b.n	8006890 <st_sssa8_ch_convolve_rank1upd+0xac>
 80068fe:	bf00      	nop

08006900 <st_sssa8_fully_connected>:
 8006900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006904:	b097      	sub	sp, #92	; 0x5c
 8006906:	460d      	mov	r5, r1
 8006908:	9313      	str	r3, [sp, #76]	; 0x4c
 800690a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800690c:	9204      	str	r2, [sp, #16]
 800690e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006912:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8006914:	f99d 6088 	ldrsb.w	r6, [sp, #136]	; 0x88
 8006918:	6824      	ldr	r4, [r4, #0]
 800691a:	9408      	str	r4, [sp, #32]
 800691c:	1e4b      	subs	r3, r1, #1
 800691e:	b29a      	uxth	r2, r3
 8006920:	2a14      	cmp	r2, #20
 8006922:	930d      	str	r3, [sp, #52]	; 0x34
 8006924:	f99d 308c 	ldrsb.w	r3, [sp, #140]	; 0x8c
 8006928:	9105      	str	r1, [sp, #20]
 800692a:	bf9f      	itttt	ls
 800692c:	2201      	movls	r2, #1
 800692e:	408b      	lslls	r3, r1
 8006930:	408a      	lslls	r2, r1
 8006932:	eb03 0352 	addls.w	r3, r3, r2, lsr #1
 8006936:	9309      	str	r3, [sp, #36]	; 0x24
 8006938:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800693a:	4683      	mov	fp, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	f000 81e4 	beq.w	8006d0a <st_sssa8_fully_connected+0x40a>
 8006942:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006944:	9600      	str	r6, [sp, #0]
 8006946:	b2b3      	uxth	r3, r6
 8006948:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800694c:	9e04      	ldr	r6, [sp, #16]
 800694e:	0851      	lsrs	r1, r2, #1
 8006950:	460c      	mov	r4, r1
 8006952:	9115      	str	r1, [sp, #84]	; 0x54
 8006954:	4632      	mov	r2, r6
 8006956:	9926      	ldr	r1, [sp, #152]	; 0x98
 8006958:	f000 fb52 	bl	8007000 <st_int8_reordered_no_shift_zero>
 800695c:	4621      	mov	r1, r4
 800695e:	2c00      	cmp	r4, #0
 8006960:	f000 8149 	beq.w	8006bf6 <st_sssa8_fully_connected+0x2f6>
 8006964:	4634      	mov	r4, r6
 8006966:	f1a6 0310 	sub.w	r3, r6, #16
 800696a:	9e05      	ldr	r6, [sp, #20]
 800696c:	1e4a      	subs	r2, r1, #1
 800696e:	2001      	movs	r0, #1
 8006970:	1eb1      	subs	r1, r6, #2
 8006972:	fa00 f101 	lsl.w	r1, r0, r1
 8006976:	9112      	str	r1, [sp, #72]	; 0x48
 8006978:	9924      	ldr	r1, [sp, #144]	; 0x90
 800697a:	b292      	uxth	r2, r2
 800697c:	3110      	adds	r1, #16
 800697e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8006982:	920e      	str	r2, [sp, #56]	; 0x38
 8006984:	1ee2      	subs	r2, r4, #3
 8006986:	920f      	str	r2, [sp, #60]	; 0x3c
 8006988:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800698a:	3208      	adds	r2, #8
 800698c:	9206      	str	r2, [sp, #24]
 800698e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8006990:	091b      	lsrs	r3, r3, #4
 8006992:	3301      	adds	r3, #1
 8006994:	3202      	adds	r2, #2
 8006996:	9207      	str	r2, [sp, #28]
 8006998:	011a      	lsls	r2, r3, #4
 800699a:	920a      	str	r2, [sp, #40]	; 0x28
 800699c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800699e:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80069a2:	9310      	str	r3, [sp, #64]	; 0x40
 80069a4:	1f23      	subs	r3, r4, #4
 80069a6:	9311      	str	r3, [sp, #68]	; 0x44
 80069a8:	1b83      	subs	r3, r0, r6
 80069aa:	9314      	str	r3, [sp, #80]	; 0x50
 80069ac:	9a06      	ldr	r2, [sp, #24]
 80069ae:	e952 3102 	ldrd	r3, r1, [r2, #-8]
 80069b2:	9a04      	ldr	r2, [sp, #16]
 80069b4:	18ac      	adds	r4, r5, r2
 80069b6:	2a0f      	cmp	r2, #15
 80069b8:	9403      	str	r4, [sp, #12]
 80069ba:	f340 81a0 	ble.w	8006cfe <st_sssa8_fully_connected+0x3fe>
 80069be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069c0:	18ae      	adds	r6, r5, r2
 80069c2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80069c4:	460f      	mov	r7, r1
 80069c6:	f8d4 e000 	ldr.w	lr, [r4]
 80069ca:	6828      	ldr	r0, [r5, #0]
 80069cc:	fa2f fc8e 	sxtb16	ip, lr
 80069d0:	ea4f 2130 	mov.w	r1, r0, ror #8
 80069d4:	ea4f 283e 	mov.w	r8, lr, ror #8
 80069d8:	fa2f f080 	sxtb16	r0, r0
 80069dc:	f8d2 e000 	ldr.w	lr, [r2]
 80069e0:	fa2f f181 	sxtb16	r1, r1
 80069e4:	fa2f f888 	sxtb16	r8, r8
 80069e8:	fb2e 3300 	smlad	r3, lr, r0, r3
 80069ec:	fb2e 7e0c 	smlad	lr, lr, ip, r7
 80069f0:	f8d2 c004 	ldr.w	ip, [r2, #4]
 80069f4:	fb2c 3301 	smlad	r3, ip, r1, r3
 80069f8:	fb2c e808 	smlad	r8, ip, r8, lr
 80069fc:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8006a00:	686f      	ldr	r7, [r5, #4]
 8006a02:	fa2f f08c 	sxtb16	r0, ip
 8006a06:	ea4f 2137 	mov.w	r1, r7, ror #8
 8006a0a:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 8006a0e:	fa2f f787 	sxtb16	r7, r7
 8006a12:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8006a16:	fa2f f181 	sxtb16	r1, r1
 8006a1a:	fa2f fe8e 	sxtb16	lr, lr
 8006a1e:	fb2c 3707 	smlad	r7, ip, r7, r3
 8006a22:	fb2c 8c00 	smlad	ip, ip, r0, r8
 8006a26:	68d0      	ldr	r0, [r2, #12]
 8006a28:	fb20 7701 	smlad	r7, r0, r1, r7
 8006a2c:	fb20 ce0e 	smlad	lr, r0, lr, ip
 8006a30:	68a0      	ldr	r0, [r4, #8]
 8006a32:	68a9      	ldr	r1, [r5, #8]
 8006a34:	fa2f fc80 	sxtb16	ip, r0
 8006a38:	ea4f 2331 	mov.w	r3, r1, ror #8
 8006a3c:	ea4f 2a30 	mov.w	sl, r0, ror #8
 8006a40:	fa2f f181 	sxtb16	r1, r1
 8006a44:	6910      	ldr	r0, [r2, #16]
 8006a46:	fa2f f383 	sxtb16	r3, r3
 8006a4a:	fa2f fa8a 	sxtb16	sl, sl
 8006a4e:	fb20 7101 	smlad	r1, r0, r1, r7
 8006a52:	fb20 e00c 	smlad	r0, r0, ip, lr
 8006a56:	6957      	ldr	r7, [r2, #20]
 8006a58:	fb27 1103 	smlad	r1, r7, r3, r1
 8006a5c:	fb27 0a0a 	smlad	sl, r7, sl, r0
 8006a60:	68e7      	ldr	r7, [r4, #12]
 8006a62:	68e8      	ldr	r0, [r5, #12]
 8006a64:	fa2f fc87 	sxtb16	ip, r7
 8006a68:	ea4f 2930 	mov.w	r9, r0, ror #8
 8006a6c:	ea4f 2837 	mov.w	r8, r7, ror #8
 8006a70:	3510      	adds	r5, #16
 8006a72:	6997      	ldr	r7, [r2, #24]
 8006a74:	fa2f f380 	sxtb16	r3, r0
 8006a78:	3410      	adds	r4, #16
 8006a7a:	fa2f f989 	sxtb16	r9, r9
 8006a7e:	fa2f f888 	sxtb16	r8, r8
 8006a82:	fb27 1303 	smlad	r3, r7, r3, r1
 8006a86:	fb27 a70c 	smlad	r7, r7, ip, sl
 8006a8a:	f8d2 e01c 	ldr.w	lr, [r2, #28]
 8006a8e:	3220      	adds	r2, #32
 8006a90:	fb2e 3309 	smlad	r3, lr, r9, r3
 8006a94:	fb2e 7708 	smlad	r7, lr, r8, r7
 8006a98:	42b5      	cmp	r5, r6
 8006a9a:	d194      	bne.n	80069c6 <st_sssa8_fully_connected+0xc6>
 8006a9c:	9a03      	ldr	r2, [sp, #12]
 8006a9e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006aa0:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8006aa4:	4402      	add	r2, r0
 8006aa6:	4639      	mov	r1, r7
 8006aa8:	9203      	str	r2, [sp, #12]
 8006aaa:	4681      	mov	r9, r0
 8006aac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006aae:	4591      	cmp	r9, r2
 8006ab0:	f280 8123 	bge.w	8006cfa <st_sssa8_fully_connected+0x3fa>
 8006ab4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006ab6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006aba:	eba2 0a09 	sub.w	sl, r2, r9
 8006abe:	ea4f 029a 	mov.w	r2, sl, lsr #2
 8006ac2:	f102 0a01 	add.w	sl, r2, #1
 8006ac6:	920c      	str	r2, [sp, #48]	; 0x30
 8006ac8:	ea4f 028a 	mov.w	r2, sl, lsl #2
 8006acc:	920b      	str	r2, [sp, #44]	; 0x2c
 8006ace:	eb06 048a 	add.w	r4, r6, sl, lsl #2
 8006ad2:	465f      	mov	r7, fp
 8006ad4:	f858 2b04 	ldr.w	r2, [r8], #4
 8006ad8:	f856 eb04 	ldr.w	lr, [r6], #4
 8006adc:	fa2f f082 	sxtb16	r0, r2
 8006ae0:	ea4f 2c3e 	mov.w	ip, lr, ror #8
 8006ae4:	ea4f 2532 	mov.w	r5, r2, ror #8
 8006ae8:	fa2f fe8e 	sxtb16	lr, lr
 8006aec:	683a      	ldr	r2, [r7, #0]
 8006aee:	fa2f fc8c 	sxtb16	ip, ip
 8006af2:	fa2f f585 	sxtb16	r5, r5
 8006af6:	fb22 330e 	smlad	r3, r2, lr, r3
 8006afa:	fb22 1200 	smlad	r2, r2, r0, r1
 8006afe:	6879      	ldr	r1, [r7, #4]
 8006b00:	3708      	adds	r7, #8
 8006b02:	fb21 330c 	smlad	r3, r1, ip, r3
 8006b06:	fb21 2105 	smlad	r1, r1, r5, r2
 8006b0a:	42a6      	cmp	r6, r4
 8006b0c:	d1e2      	bne.n	8006ad4 <st_sssa8_fully_connected+0x1d4>
 8006b0e:	9a03      	ldr	r2, [sp, #12]
 8006b10:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006b12:	4402      	add	r2, r0
 8006b14:	9203      	str	r2, [sp, #12]
 8006b16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b18:	f109 0904 	add.w	r9, r9, #4
 8006b1c:	eb0b 0bca 	add.w	fp, fp, sl, lsl #3
 8006b20:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 8006b24:	9d04      	ldr	r5, [sp, #16]
 8006b26:	454d      	cmp	r5, r9
 8006b28:	dd38      	ble.n	8006b9c <st_sssa8_fully_connected+0x29c>
 8006b2a:	f9bb 2000 	ldrsh.w	r2, [fp]
 8006b2e:	f994 0000 	ldrsb.w	r0, [r4]
 8006b32:	9e03      	ldr	r6, [sp, #12]
 8006b34:	fb12 3300 	smlabb	r3, r2, r0, r3
 8006b38:	f996 0000 	ldrsb.w	r0, [r6]
 8006b3c:	fb12 1100 	smlabb	r1, r2, r0, r1
 8006b40:	f109 0201 	add.w	r2, r9, #1
 8006b44:	42aa      	cmp	r2, r5
 8006b46:	da25      	bge.n	8006b94 <st_sssa8_fully_connected+0x294>
 8006b48:	f9bb 2002 	ldrsh.w	r2, [fp, #2]
 8006b4c:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8006b50:	fb12 3300 	smlabb	r3, r2, r0, r3
 8006b54:	f996 0001 	ldrsb.w	r0, [r6, #1]
 8006b58:	fb12 1100 	smlabb	r1, r2, r0, r1
 8006b5c:	f109 0202 	add.w	r2, r9, #2
 8006b60:	42aa      	cmp	r2, r5
 8006b62:	da17      	bge.n	8006b94 <st_sssa8_fully_connected+0x294>
 8006b64:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
 8006b68:	f994 0002 	ldrsb.w	r0, [r4, #2]
 8006b6c:	fb12 3300 	smlabb	r3, r2, r0, r3
 8006b70:	f996 0002 	ldrsb.w	r0, [r6, #2]
 8006b74:	fb12 1100 	smlabb	r1, r2, r0, r1
 8006b78:	f109 0203 	add.w	r2, r9, #3
 8006b7c:	4295      	cmp	r5, r2
 8006b7e:	dd09      	ble.n	8006b94 <st_sssa8_fully_connected+0x294>
 8006b80:	f9bb 2006 	ldrsh.w	r2, [fp, #6]
 8006b84:	f996 0003 	ldrsb.w	r0, [r6, #3]
 8006b88:	fb12 1100 	smlabb	r1, r2, r0, r1
 8006b8c:	f994 0003 	ldrsb.w	r0, [r4, #3]
 8006b90:	fb12 3300 	smlabb	r3, r2, r0, r3
 8006b94:	9a04      	ldr	r2, [sp, #16]
 8006b96:	eba2 0909 	sub.w	r9, r2, r9
 8006b9a:	444c      	add	r4, r9
 8006b9c:	9a05      	ldr	r2, [sp, #20]
 8006b9e:	2a15      	cmp	r2, #21
 8006ba0:	dd7b      	ble.n	8006c9a <st_sssa8_fully_connected+0x39a>
 8006ba2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006ba4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006ba6:	9a08      	ldr	r2, [sp, #32]
 8006ba8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006baa:	fb53 0302 	smmla	r3, r3, r2, r0
 8006bae:	412b      	asrs	r3, r5
 8006bb0:	4433      	add	r3, r6
 8006bb2:	fb51 0102 	smmla	r1, r1, r2, r0
 8006bb6:	f303 0307 	ssat	r3, #8, r3
 8006bba:	9a07      	ldr	r2, [sp, #28]
 8006bbc:	4129      	asrs	r1, r5
 8006bbe:	f802 3c02 	strb.w	r3, [r2, #-2]
 8006bc2:	198b      	adds	r3, r1, r6
 8006bc4:	f303 0307 	ssat	r3, #8, r3
 8006bc8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006bcc:	9a04      	ldr	r2, [sp, #16]
 8006bce:	9b06      	ldr	r3, [sp, #24]
 8006bd0:	18a5      	adds	r5, r4, r2
 8006bd2:	9a07      	ldr	r2, [sp, #28]
 8006bd4:	3202      	adds	r2, #2
 8006bd6:	9207      	str	r2, [sp, #28]
 8006bd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006bda:	3308      	adds	r3, #8
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	9306      	str	r3, [sp, #24]
 8006be0:	f47f aee4 	bne.w	80069ac <st_sssa8_fully_connected+0xac>
 8006be4:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8006be6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006be8:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8006bec:	9225      	str	r2, [sp, #148]	; 0x94
 8006bee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006bf0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006bf4:	9324      	str	r3, [sp, #144]	; 0x90
 8006bf6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006bf8:	07db      	lsls	r3, r3, #31
 8006bfa:	d54a      	bpl.n	8006c92 <st_sssa8_fully_connected+0x392>
 8006bfc:	9a04      	ldr	r2, [sp, #16]
 8006bfe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006c00:	0897      	lsrs	r7, r2, #2
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f000 8173 	beq.w	8006eee <st_sssa8_fully_connected+0x5ee>
 8006c08:	9826      	ldr	r0, [sp, #152]	; 0x98
 8006c0a:	eb05 0687 	add.w	r6, r5, r7, lsl #2
 8006c0e:	f855 2b04 	ldr.w	r2, [r5], #4
 8006c12:	6804      	ldr	r4, [r0, #0]
 8006c14:	ea4f 2132 	mov.w	r1, r2, ror #8
 8006c18:	fa2f f282 	sxtb16	r2, r2
 8006c1c:	fa2f f181 	sxtb16	r1, r1
 8006c20:	fb24 3202 	smlad	r2, r4, r2, r3
 8006c24:	6843      	ldr	r3, [r0, #4]
 8006c26:	3008      	adds	r0, #8
 8006c28:	fb23 2301 	smlad	r3, r3, r1, r2
 8006c2c:	42b5      	cmp	r5, r6
 8006c2e:	d1ee      	bne.n	8006c0e <st_sssa8_fully_connected+0x30e>
 8006c30:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006c32:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 8006c36:	9226      	str	r2, [sp, #152]	; 0x98
 8006c38:	9a04      	ldr	r2, [sp, #16]
 8006c3a:	f012 0203 	ands.w	r2, r2, #3
 8006c3e:	d016      	beq.n	8006c6e <st_sssa8_fully_connected+0x36e>
 8006c40:	9826      	ldr	r0, [sp, #152]	; 0x98
 8006c42:	f996 1000 	ldrsb.w	r1, [r6]
 8006c46:	8800      	ldrh	r0, [r0, #0]
 8006c48:	3a01      	subs	r2, #1
 8006c4a:	b292      	uxth	r2, r2
 8006c4c:	fb10 3301 	smlabb	r3, r0, r1, r3
 8006c50:	b16a      	cbz	r2, 8006c6e <st_sssa8_fully_connected+0x36e>
 8006c52:	9826      	ldr	r0, [sp, #152]	; 0x98
 8006c54:	f996 1001 	ldrsb.w	r1, [r6, #1]
 8006c58:	8840      	ldrh	r0, [r0, #2]
 8006c5a:	2a01      	cmp	r2, #1
 8006c5c:	fb10 3301 	smlabb	r3, r0, r1, r3
 8006c60:	d005      	beq.n	8006c6e <st_sssa8_fully_connected+0x36e>
 8006c62:	9926      	ldr	r1, [sp, #152]	; 0x98
 8006c64:	f996 2002 	ldrsb.w	r2, [r6, #2]
 8006c68:	8889      	ldrh	r1, [r1, #4]
 8006c6a:	fb11 3302 	smlabb	r3, r1, r2, r3
 8006c6e:	9a05      	ldr	r2, [sp, #20]
 8006c70:	2a15      	cmp	r2, #21
 8006c72:	f340 811a 	ble.w	8006eaa <st_sssa8_fully_connected+0x5aa>
 8006c76:	1e91      	subs	r1, r2, #2
 8006c78:	2201      	movs	r2, #1
 8006c7a:	408a      	lsls	r2, r1
 8006c7c:	9908      	ldr	r1, [sp, #32]
 8006c7e:	fb53 2301 	smmla	r3, r3, r1, r2
 8006c82:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006c84:	4113      	asrs	r3, r2
 8006c86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c88:	4413      	add	r3, r2
 8006c8a:	f303 0307 	ssat	r3, #8, r3
 8006c8e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8006c90:	7013      	strb	r3, [r2, #0]
 8006c92:	2000      	movs	r0, #0
 8006c94:	b017      	add	sp, #92	; 0x5c
 8006c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c9a:	2a00      	cmp	r2, #0
 8006c9c:	dd13      	ble.n	8006cc6 <st_sssa8_fully_connected+0x3c6>
 8006c9e:	e9dd 0508 	ldrd	r0, r5, [sp, #32]
 8006ca2:	005b      	lsls	r3, r3, #1
 8006ca4:	0049      	lsls	r1, r1, #1
 8006ca6:	fb53 5300 	smmla	r3, r3, r0, r5
 8006caa:	fb51 5100 	smmla	r1, r1, r0, r5
 8006cae:	4113      	asrs	r3, r2
 8006cb0:	f303 0307 	ssat	r3, #8, r3
 8006cb4:	9807      	ldr	r0, [sp, #28]
 8006cb6:	4111      	asrs	r1, r2
 8006cb8:	f800 3c02 	strb.w	r3, [r0, #-2]
 8006cbc:	f301 0107 	ssat	r1, #8, r1
 8006cc0:	f800 1c01 	strb.w	r1, [r0, #-1]
 8006cc4:	e782      	b.n	8006bcc <st_sssa8_fully_connected+0x2cc>
 8006cc6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006cc8:	4093      	lsls	r3, r2
 8006cca:	f303 031f 	ssat	r3, #32, r3
 8006cce:	9808      	ldr	r0, [sp, #32]
 8006cd0:	fb53 f310 	smmulr	r3, r3, r0
 8006cd4:	fa01 f202 	lsl.w	r2, r1, r2
 8006cd8:	f302 021f 	ssat	r2, #32, r2
 8006cdc:	fb52 f210 	smmulr	r2, r2, r0
 8006ce0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ce2:	440b      	add	r3, r1
 8006ce4:	f303 0307 	ssat	r3, #8, r3
 8006ce8:	9807      	ldr	r0, [sp, #28]
 8006cea:	440a      	add	r2, r1
 8006cec:	f800 3c02 	strb.w	r3, [r0, #-2]
 8006cf0:	f302 0207 	ssat	r2, #8, r2
 8006cf4:	f800 2c01 	strb.w	r2, [r0, #-1]
 8006cf8:	e768      	b.n	8006bcc <st_sssa8_fully_connected+0x2cc>
 8006cfa:	4634      	mov	r4, r6
 8006cfc:	e712      	b.n	8006b24 <st_sssa8_fully_connected+0x224>
 8006cfe:	f8dd b098 	ldr.w	fp, [sp, #152]	; 0x98
 8006d02:	462e      	mov	r6, r5
 8006d04:	f04f 0900 	mov.w	r9, #0
 8006d08:	e6d0      	b.n	8006aac <st_sssa8_fully_connected+0x1ac>
 8006d0a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006d0c:	4274      	negs	r4, r6
 8006d0e:	eac4 4404 	pkhbt	r4, r4, r4, lsl #16
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d0bd      	beq.n	8006c92 <st_sssa8_fully_connected+0x392>
 8006d16:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8006d18:	9904      	ldr	r1, [sp, #16]
 8006d1a:	9805      	ldr	r0, [sp, #20]
 8006d1c:	f8dd a090 	ldr.w	sl, [sp, #144]	; 0x90
 8006d20:	f8cd b010 	str.w	fp, [sp, #16]
 8006d24:	3301      	adds	r3, #1
 8006d26:	18d3      	adds	r3, r2, r3
 8006d28:	f1a1 0810 	sub.w	r8, r1, #16
 8006d2c:	9303      	str	r3, [sp, #12]
 8006d2e:	f102 0e01 	add.w	lr, r2, #1
 8006d32:	f028 080f 	bic.w	r8, r8, #15
 8006d36:	2201      	movs	r2, #1
 8006d38:	1e83      	subs	r3, r0, #2
 8006d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d3e:	f108 0810 	add.w	r8, r8, #16
 8006d42:	9307      	str	r3, [sp, #28]
 8006d44:	4689      	mov	r9, r1
 8006d46:	eb0b 0308 	add.w	r3, fp, r8
 8006d4a:	9306      	str	r3, [sp, #24]
 8006d4c:	f1b9 0f0f 	cmp.w	r9, #15
 8006d50:	eba2 0300 	sub.w	r3, r2, r0
 8006d54:	930a      	str	r3, [sp, #40]	; 0x28
 8006d56:	b236      	sxth	r6, r6
 8006d58:	f85a 3b04 	ldr.w	r3, [sl], #4
 8006d5c:	f340 8081 	ble.w	8006e62 <st_sssa8_fully_connected+0x562>
 8006d60:	9804      	ldr	r0, [sp, #16]
 8006d62:	eb05 0c08 	add.w	ip, r5, r8
 8006d66:	462a      	mov	r2, r5
 8006d68:	f8d2 b000 	ldr.w	fp, [r2]
 8006d6c:	6801      	ldr	r1, [r0, #0]
 8006d6e:	ea4f 273b 	mov.w	r7, fp, ror #8
 8006d72:	ea4f 2531 	mov.w	r5, r1, ror #8
 8006d76:	fa2f fb8b 	sxtb16	fp, fp
 8006d7a:	fa2f f787 	sxtb16	r7, r7
 8006d7e:	fa24 f181 	sxtab16	r1, r4, r1
 8006d82:	fa24 f585 	sxtab16	r5, r4, r5
 8006d86:	fb21 330b 	smlad	r3, r1, fp, r3
 8006d8a:	fb25 3107 	smlad	r1, r5, r7, r3
 8006d8e:	f8d2 b004 	ldr.w	fp, [r2, #4]
 8006d92:	6843      	ldr	r3, [r0, #4]
 8006d94:	ea4f 273b 	mov.w	r7, fp, ror #8
 8006d98:	ea4f 2533 	mov.w	r5, r3, ror #8
 8006d9c:	fa2f fb8b 	sxtb16	fp, fp
 8006da0:	fa2f f787 	sxtb16	r7, r7
 8006da4:	fa24 f383 	sxtab16	r3, r4, r3
 8006da8:	fa24 f585 	sxtab16	r5, r4, r5
 8006dac:	fb23 110b 	smlad	r1, r3, fp, r1
 8006db0:	fb25 1307 	smlad	r3, r5, r7, r1
 8006db4:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8006db8:	6885      	ldr	r5, [r0, #8]
 8006dba:	ea4f 273b 	mov.w	r7, fp, ror #8
 8006dbe:	ea4f 2135 	mov.w	r1, r5, ror #8
 8006dc2:	fa2f fb8b 	sxtb16	fp, fp
 8006dc6:	fa2f f787 	sxtb16	r7, r7
 8006dca:	fa24 f585 	sxtab16	r5, r4, r5
 8006dce:	fa24 f181 	sxtab16	r1, r4, r1
 8006dd2:	fb25 330b 	smlad	r3, r5, fp, r3
 8006dd6:	fb21 3507 	smlad	r5, r1, r7, r3
 8006dda:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8006dde:	68c3      	ldr	r3, [r0, #12]
 8006de0:	ea4f 273b 	mov.w	r7, fp, ror #8
 8006de4:	ea4f 2133 	mov.w	r1, r3, ror #8
 8006de8:	3210      	adds	r2, #16
 8006dea:	3010      	adds	r0, #16
 8006dec:	fa2f fb8b 	sxtb16	fp, fp
 8006df0:	fa2f f787 	sxtb16	r7, r7
 8006df4:	fa24 f383 	sxtab16	r3, r4, r3
 8006df8:	fa24 f181 	sxtab16	r1, r4, r1
 8006dfc:	fb23 530b 	smlad	r3, r3, fp, r5
 8006e00:	fb21 3307 	smlad	r3, r1, r7, r3
 8006e04:	4594      	cmp	ip, r2
 8006e06:	d1af      	bne.n	8006d68 <st_sssa8_fully_connected+0x468>
 8006e08:	4645      	mov	r5, r8
 8006e0a:	45a9      	cmp	r9, r5
 8006e0c:	9f06      	ldr	r7, [sp, #24]
 8006e0e:	dd2d      	ble.n	8006e6c <st_sssa8_fully_connected+0x56c>
 8006e10:	eba9 0505 	sub.w	r5, r9, r5
 8006e14:	4415      	add	r5, r2
 8006e16:	4611      	mov	r1, r2
 8006e18:	f917 0b01 	ldrsb.w	r0, [r7], #1
 8006e1c:	7809      	ldrb	r1, [r1, #0]
 8006e1e:	3201      	adds	r2, #1
 8006e20:	b249      	sxtb	r1, r1
 8006e22:	1b80      	subs	r0, r0, r6
 8006e24:	42aa      	cmp	r2, r5
 8006e26:	fb10 3301 	smlabb	r3, r0, r1, r3
 8006e2a:	d1f4      	bne.n	8006e16 <st_sssa8_fully_connected+0x516>
 8006e2c:	9a05      	ldr	r2, [sp, #20]
 8006e2e:	2a15      	cmp	r2, #21
 8006e30:	dd20      	ble.n	8006e74 <st_sssa8_fully_connected+0x574>
 8006e32:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8006e36:	fb53 1302 	smmla	r3, r3, r2, r1
 8006e3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006e3c:	4113      	asrs	r3, r2
 8006e3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e40:	4413      	add	r3, r2
 8006e42:	f303 0307 	ssat	r3, #8, r3
 8006e46:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8006e4a:	9b03      	ldr	r3, [sp, #12]
 8006e4c:	f10e 0e01 	add.w	lr, lr, #1
 8006e50:	459e      	cmp	lr, r3
 8006e52:	f43f af1e 	beq.w	8006c92 <st_sssa8_fully_connected+0x392>
 8006e56:	f1b9 0f0f 	cmp.w	r9, #15
 8006e5a:	f85a 3b04 	ldr.w	r3, [sl], #4
 8006e5e:	f73f af7f 	bgt.w	8006d60 <st_sssa8_fully_connected+0x460>
 8006e62:	462a      	mov	r2, r5
 8006e64:	2500      	movs	r5, #0
 8006e66:	45a9      	cmp	r9, r5
 8006e68:	9f04      	ldr	r7, [sp, #16]
 8006e6a:	dcd1      	bgt.n	8006e10 <st_sssa8_fully_connected+0x510>
 8006e6c:	4615      	mov	r5, r2
 8006e6e:	9a05      	ldr	r2, [sp, #20]
 8006e70:	2a15      	cmp	r2, #21
 8006e72:	dcde      	bgt.n	8006e32 <st_sssa8_fully_connected+0x532>
 8006e74:	2a00      	cmp	r2, #0
 8006e76:	dd0a      	ble.n	8006e8e <st_sssa8_fully_connected+0x58e>
 8006e78:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 8006e7c:	005b      	lsls	r3, r3, #1
 8006e7e:	fb53 0301 	smmla	r3, r3, r1, r0
 8006e82:	4113      	asrs	r3, r2
 8006e84:	f303 0307 	ssat	r3, #8, r3
 8006e88:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8006e8c:	e7dd      	b.n	8006e4a <st_sssa8_fully_connected+0x54a>
 8006e8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e90:	4093      	lsls	r3, r2
 8006e92:	f303 031f 	ssat	r3, #32, r3
 8006e96:	9a08      	ldr	r2, [sp, #32]
 8006e98:	fb53 f312 	smmulr	r3, r3, r2
 8006e9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e9e:	4413      	add	r3, r2
 8006ea0:	f303 0307 	ssat	r3, #8, r3
 8006ea4:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8006ea8:	e7cf      	b.n	8006e4a <st_sssa8_fully_connected+0x54a>
 8006eaa:	2a00      	cmp	r2, #0
 8006eac:	dd0d      	ble.n	8006eca <st_sssa8_fully_connected+0x5ca>
 8006eae:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 8006eb2:	005b      	lsls	r3, r3, #1
 8006eb4:	fb53 0301 	smmla	r3, r3, r1, r0
 8006eb8:	4113      	asrs	r3, r2
 8006eba:	f303 0307 	ssat	r3, #8, r3
 8006ebe:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8006ec0:	2000      	movs	r0, #0
 8006ec2:	7013      	strb	r3, [r2, #0]
 8006ec4:	b017      	add	sp, #92	; 0x5c
 8006ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eca:	f1c2 0201 	rsb	r2, r2, #1
 8006ece:	4093      	lsls	r3, r2
 8006ed0:	f303 031f 	ssat	r3, #32, r3
 8006ed4:	9a08      	ldr	r2, [sp, #32]
 8006ed6:	fb53 f312 	smmulr	r3, r3, r2
 8006eda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006edc:	441a      	add	r2, r3
 8006ede:	f302 0307 	ssat	r3, #8, r2
 8006ee2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8006ee4:	2000      	movs	r0, #0
 8006ee6:	7013      	strb	r3, [r2, #0]
 8006ee8:	b017      	add	sp, #92	; 0x5c
 8006eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eee:	462e      	mov	r6, r5
 8006ef0:	e6a2      	b.n	8006c38 <st_sssa8_fully_connected+0x338>
 8006ef2:	bf00      	nop

08006ef4 <st_int8_copy>:
 8006ef4:	4288      	cmp	r0, r1
 8006ef6:	d057      	beq.n	8006fa8 <st_int8_copy+0xb4>
 8006ef8:	2a00      	cmp	r2, #0
 8006efa:	d055      	beq.n	8006fa8 <st_int8_copy+0xb4>
 8006efc:	4288      	cmp	r0, r1
 8006efe:	d354      	bcc.n	8006faa <st_int8_copy+0xb6>
 8006f00:	078b      	lsls	r3, r1, #30
 8006f02:	d102      	bne.n	8006f0a <st_int8_copy+0x16>
 8006f04:	e009      	b.n	8006f1a <st_int8_copy+0x26>
 8006f06:	2a00      	cmp	r2, #0
 8006f08:	d05c      	beq.n	8006fc4 <st_int8_copy+0xd0>
 8006f0a:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8006f0e:	f801 3b01 	strb.w	r3, [r1], #1
 8006f12:	078b      	lsls	r3, r1, #30
 8006f14:	f102 32ff 	add.w	r2, r2, #4294967295
 8006f18:	d1f5      	bne.n	8006f06 <st_int8_copy+0x12>
 8006f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f1e:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8006f22:	d069      	beq.n	8006ff8 <st_int8_copy+0x104>
 8006f24:	ea41 0300 	orr.w	r3, r1, r0
 8006f28:	075b      	lsls	r3, r3, #29
 8006f2a:	d14c      	bne.n	8006fc6 <st_int8_copy+0xd2>
 8006f2c:	f10e 33ff 	add.w	r3, lr, #4294967295
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d948      	bls.n	8006fc6 <st_int8_copy+0xd2>
 8006f34:	f100 0310 	add.w	r3, r0, #16
 8006f38:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8006f3c:	f101 0c10 	add.w	ip, r1, #16
 8006f40:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8006f44:	ed13 6b04 	vldr	d6, [r3, #-16]
 8006f48:	ed13 7b02 	vldr	d7, [r3, #-8]
 8006f4c:	3310      	adds	r3, #16
 8006f4e:	4573      	cmp	r3, lr
 8006f50:	ed0c 6b04 	vstr	d6, [ip, #-16]
 8006f54:	ed0c 7b02 	vstr	d7, [ip, #-8]
 8006f58:	f10c 0c10 	add.w	ip, ip, #16
 8006f5c:	d1f2      	bne.n	8006f44 <st_int8_copy+0x50>
 8006f5e:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8006f62:	4421      	add	r1, r4
 8006f64:	4420      	add	r0, r4
 8006f66:	f002 0203 	and.w	r2, r2, #3
 8006f6a:	b16b      	cbz	r3, 8006f88 <st_int8_copy+0x94>
 8006f6c:	6804      	ldr	r4, [r0, #0]
 8006f6e:	600c      	str	r4, [r1, #0]
 8006f70:	1e5c      	subs	r4, r3, #1
 8006f72:	d005      	beq.n	8006f80 <st_int8_copy+0x8c>
 8006f74:	6845      	ldr	r5, [r0, #4]
 8006f76:	604d      	str	r5, [r1, #4]
 8006f78:	2c01      	cmp	r4, #1
 8006f7a:	bf1c      	itt	ne
 8006f7c:	6884      	ldrne	r4, [r0, #8]
 8006f7e:	608c      	strne	r4, [r1, #8]
 8006f80:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8006f84:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8006f88:	b162      	cbz	r2, 8006fa4 <st_int8_copy+0xb0>
 8006f8a:	f990 3000 	ldrsb.w	r3, [r0]
 8006f8e:	700b      	strb	r3, [r1, #0]
 8006f90:	3a01      	subs	r2, #1
 8006f92:	d007      	beq.n	8006fa4 <st_int8_copy+0xb0>
 8006f94:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8006f98:	704b      	strb	r3, [r1, #1]
 8006f9a:	2a01      	cmp	r2, #1
 8006f9c:	bf1c      	itt	ne
 8006f9e:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 8006fa2:	708b      	strbne	r3, [r1, #2]
 8006fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fa8:	4770      	bx	lr
 8006faa:	1883      	adds	r3, r0, r2
 8006fac:	428b      	cmp	r3, r1
 8006fae:	d9a7      	bls.n	8006f00 <st_int8_copy+0xc>
 8006fb0:	4283      	cmp	r3, r0
 8006fb2:	440a      	add	r2, r1
 8006fb4:	d9f8      	bls.n	8006fa8 <st_int8_copy+0xb4>
 8006fb6:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8006fba:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8006fbe:	4283      	cmp	r3, r0
 8006fc0:	d1f9      	bne.n	8006fb6 <st_int8_copy+0xc2>
 8006fc2:	4770      	bx	lr
 8006fc4:	4770      	bx	lr
 8006fc6:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8006fca:	460b      	mov	r3, r1
 8006fcc:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8006fd0:	4684      	mov	ip, r0
 8006fd2:	f8dc 7000 	ldr.w	r7, [ip]
 8006fd6:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8006fda:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8006fde:	f8dc 800c 	ldr.w	r8, [ip, #12]
 8006fe2:	f8c3 800c 	str.w	r8, [r3, #12]
 8006fe6:	601f      	str	r7, [r3, #0]
 8006fe8:	605e      	str	r6, [r3, #4]
 8006fea:	609d      	str	r5, [r3, #8]
 8006fec:	3310      	adds	r3, #16
 8006fee:	459e      	cmp	lr, r3
 8006ff0:	f10c 0c10 	add.w	ip, ip, #16
 8006ff4:	d1ed      	bne.n	8006fd2 <st_int8_copy+0xde>
 8006ff6:	e7b2      	b.n	8006f5e <st_int8_copy+0x6a>
 8006ff8:	0893      	lsrs	r3, r2, #2
 8006ffa:	f002 0203 	and.w	r2, r2, #3
 8006ffe:	e7b4      	b.n	8006f6a <st_int8_copy+0x76>

08007000 <st_int8_reordered_no_shift_zero>:
 8007000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007002:	0897      	lsrs	r7, r2, #2
 8007004:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 8007008:	d02e      	beq.n	8007068 <st_int8_reordered_no_shift_zero+0x68>
 800700a:	eb00 0587 	add.w	r5, r0, r7, lsl #2
 800700e:	460c      	mov	r4, r1
 8007010:	f850 cb04 	ldr.w	ip, [r0], #4
 8007014:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 8007018:	fa2f fe8e 	sxtb16	lr, lr
 800701c:	fade fe03 	ssub16	lr, lr, r3
 8007020:	fa2f fc8c 	sxtb16	ip, ip
 8007024:	fadc fc03 	ssub16	ip, ip, r3
 8007028:	42a8      	cmp	r0, r5
 800702a:	f8c4 c000 	str.w	ip, [r4]
 800702e:	f8c4 e004 	str.w	lr, [r4, #4]
 8007032:	f104 0408 	add.w	r4, r4, #8
 8007036:	d1eb      	bne.n	8007010 <st_int8_reordered_no_shift_zero+0x10>
 8007038:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800703c:	f012 0203 	ands.w	r2, r2, #3
 8007040:	d011      	beq.n	8007066 <st_int8_reordered_no_shift_zero+0x66>
 8007042:	f995 3000 	ldrsb.w	r3, [r5]
 8007046:	b276      	sxtb	r6, r6
 8007048:	1b9b      	subs	r3, r3, r6
 800704a:	3a01      	subs	r2, #1
 800704c:	800b      	strh	r3, [r1, #0]
 800704e:	d00a      	beq.n	8007066 <st_int8_reordered_no_shift_zero+0x66>
 8007050:	f995 3001 	ldrsb.w	r3, [r5, #1]
 8007054:	2a01      	cmp	r2, #1
 8007056:	eba3 0306 	sub.w	r3, r3, r6
 800705a:	804b      	strh	r3, [r1, #2]
 800705c:	d003      	beq.n	8007066 <st_int8_reordered_no_shift_zero+0x66>
 800705e:	f995 3002 	ldrsb.w	r3, [r5, #2]
 8007062:	1b9e      	subs	r6, r3, r6
 8007064:	808e      	strh	r6, [r1, #4]
 8007066:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007068:	4605      	mov	r5, r0
 800706a:	e7e7      	b.n	800703c <st_int8_reordered_no_shift_zero+0x3c>

0800706c <st_int8_to16_no_shift>:
 800706c:	b570      	push	{r4, r5, r6, lr}
 800706e:	f1b2 0410 	subs.w	r4, r2, #16
 8007072:	f04f 0e00 	mov.w	lr, #0
 8007076:	d437      	bmi.n	80070e8 <st_int8_to16_no_shift+0x7c>
 8007078:	f8d0 c000 	ldr.w	ip, [r0]
 800707c:	6843      	ldr	r3, [r0, #4]
 800707e:	fa2f f59c 	sxtb16	r5, ip, ror #8
 8007082:	fa2f fc8c 	sxtb16	ip, ip
 8007086:	eac5 462c 	pkhtb	r6, r5, ip, asr #16
 800708a:	eacc 4c05 	pkhbt	ip, ip, r5, lsl #16
 800708e:	fa2f f593 	sxtb16	r5, r3, ror #8
 8007092:	604e      	str	r6, [r1, #4]
 8007094:	f8c1 c000 	str.w	ip, [r1]
 8007098:	fa2f f383 	sxtb16	r3, r3
 800709c:	eac5 4623 	pkhtb	r6, r5, r3, asr #16
 80070a0:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 80070a4:	60ce      	str	r6, [r1, #12]
 80070a6:	608b      	str	r3, [r1, #8]
 80070a8:	f8d0 c008 	ldr.w	ip, [r0, #8]
 80070ac:	68c3      	ldr	r3, [r0, #12]
 80070ae:	3010      	adds	r0, #16
 80070b0:	fa2f f59c 	sxtb16	r5, ip, ror #8
 80070b4:	fa2f fc8c 	sxtb16	ip, ip
 80070b8:	eac5 462c 	pkhtb	r6, r5, ip, asr #16
 80070bc:	eacc 4c05 	pkhbt	ip, ip, r5, lsl #16
 80070c0:	fa2f f593 	sxtb16	r5, r3, ror #8
 80070c4:	f8c1 c010 	str.w	ip, [r1, #16]
 80070c8:	614e      	str	r6, [r1, #20]
 80070ca:	f10e 0e10 	add.w	lr, lr, #16
 80070ce:	3120      	adds	r1, #32
 80070d0:	45a6      	cmp	lr, r4
 80070d2:	fa2f f383 	sxtb16	r3, r3
 80070d6:	eac5 4c23 	pkhtb	ip, r5, r3, asr #16
 80070da:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 80070de:	f841 cc04 	str.w	ip, [r1, #-4]
 80070e2:	f841 3c08 	str.w	r3, [r1, #-8]
 80070e6:	ddc7      	ble.n	8007078 <st_int8_to16_no_shift+0xc>
 80070e8:	1f16      	subs	r6, r2, #4
 80070ea:	4576      	cmp	r6, lr
 80070ec:	db12      	blt.n	8007114 <st_int8_to16_no_shift+0xa8>
 80070ee:	f850 3b04 	ldr.w	r3, [r0], #4
 80070f2:	fa2f f493 	sxtb16	r4, r3, ror #8
 80070f6:	3108      	adds	r1, #8
 80070f8:	f10e 0e04 	add.w	lr, lr, #4
 80070fc:	45b6      	cmp	lr, r6
 80070fe:	fa2f f383 	sxtb16	r3, r3
 8007102:	eac4 4523 	pkhtb	r5, r4, r3, asr #16
 8007106:	eac3 4304 	pkhbt	r3, r3, r4, lsl #16
 800710a:	f841 5c04 	str.w	r5, [r1, #-4]
 800710e:	f841 3c08 	str.w	r3, [r1, #-8]
 8007112:	ddec      	ble.n	80070ee <st_int8_to16_no_shift+0x82>
 8007114:	4572      	cmp	r2, lr
 8007116:	dd08      	ble.n	800712a <st_int8_to16_no_shift+0xbe>
 8007118:	eba2 020e 	sub.w	r2, r2, lr
 800711c:	4402      	add	r2, r0
 800711e:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8007122:	f821 3b02 	strh.w	r3, [r1], #2
 8007126:	4290      	cmp	r0, r2
 8007128:	d1f9      	bne.n	800711e <st_int8_to16_no_shift+0xb2>
 800712a:	bd70      	pop	{r4, r5, r6, pc}

0800712c <st_int8_to16_no_shift_interleaved>:
 800712c:	b570      	push	{r4, r5, r6, lr}
 800712e:	f1b2 0510 	subs.w	r5, r2, #16
 8007132:	f04f 0e00 	mov.w	lr, #0
 8007136:	d426      	bmi.n	8007186 <st_int8_to16_no_shift_interleaved+0x5a>
 8007138:	f8d0 c000 	ldr.w	ip, [r0]
 800713c:	6843      	ldr	r3, [r0, #4]
 800713e:	fa2f f69c 	sxtb16	r6, ip, ror #8
 8007142:	fa2f fc8c 	sxtb16	ip, ip
 8007146:	fa2f f493 	sxtb16	r4, r3, ror #8
 800714a:	600e      	str	r6, [r1, #0]
 800714c:	f8c1 c004 	str.w	ip, [r1, #4]
 8007150:	608c      	str	r4, [r1, #8]
 8007152:	fa2f f383 	sxtb16	r3, r3
 8007156:	60cb      	str	r3, [r1, #12]
 8007158:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800715c:	68c3      	ldr	r3, [r0, #12]
 800715e:	3010      	adds	r0, #16
 8007160:	fa2f f69c 	sxtb16	r6, ip, ror #8
 8007164:	fa2f fc8c 	sxtb16	ip, ip
 8007168:	fa2f f493 	sxtb16	r4, r3, ror #8
 800716c:	610e      	str	r6, [r1, #16]
 800716e:	f8c1 c014 	str.w	ip, [r1, #20]
 8007172:	618c      	str	r4, [r1, #24]
 8007174:	f10e 0e10 	add.w	lr, lr, #16
 8007178:	3120      	adds	r1, #32
 800717a:	45ae      	cmp	lr, r5
 800717c:	fa2f f383 	sxtb16	r3, r3
 8007180:	f841 3c04 	str.w	r3, [r1, #-4]
 8007184:	ddd8      	ble.n	8007138 <st_int8_to16_no_shift_interleaved+0xc>
 8007186:	1f14      	subs	r4, r2, #4
 8007188:	4574      	cmp	r4, lr
 800718a:	db10      	blt.n	80071ae <st_int8_to16_no_shift_interleaved+0x82>
 800718c:	ebae 0e00 	sub.w	lr, lr, r0
 8007190:	f850 3b04 	ldr.w	r3, [r0], #4
 8007194:	fa2f fc93 	sxtb16	ip, r3, ror #8
 8007198:	f8c1 c000 	str.w	ip, [r1]
 800719c:	eb00 020e 	add.w	r2, r0, lr
 80071a0:	3108      	adds	r1, #8
 80071a2:	4294      	cmp	r4, r2
 80071a4:	fa2f f383 	sxtb16	r3, r3
 80071a8:	f841 3c04 	str.w	r3, [r1, #-4]
 80071ac:	daf0      	bge.n	8007190 <st_int8_to16_no_shift_interleaved+0x64>
 80071ae:	bd70      	pop	{r4, r5, r6, pc}

080071b0 <st_int8_to16_dual>:
 80071b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071b4:	4698      	mov	r8, r3
 80071b6:	085b      	lsrs	r3, r3, #1
 80071b8:	eb00 0c02 	add.w	ip, r0, r2
 80071bc:	f000 80ba 	beq.w	8007334 <st_int8_to16_dual+0x184>
 80071c0:	f1a2 0710 	sub.w	r7, r2, #16
 80071c4:	1f16      	subs	r6, r2, #4
 80071c6:	2f00      	cmp	r7, #0
 80071c8:	f04f 0500 	mov.w	r5, #0
 80071cc:	db73      	blt.n	80072b6 <st_int8_to16_dual+0x106>
 80071ce:	f8d0 e000 	ldr.w	lr, [r0]
 80071d2:	f8dc 4000 	ldr.w	r4, [ip]
 80071d6:	fa2f f99e 	sxtb16	r9, lr, ror #8
 80071da:	fa2f fe8e 	sxtb16	lr, lr
 80071de:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 80071e2:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 80071e6:	fa2f f994 	sxtb16	r9, r4, ror #8
 80071ea:	f8c1 e000 	str.w	lr, [r1]
 80071ee:	f8c1 a008 	str.w	sl, [r1, #8]
 80071f2:	fa2f f484 	sxtb16	r4, r4
 80071f6:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 80071fa:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 80071fe:	f8c1 e00c 	str.w	lr, [r1, #12]
 8007202:	604c      	str	r4, [r1, #4]
 8007204:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8007208:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800720c:	fa2f f99e 	sxtb16	r9, lr, ror #8
 8007210:	fa2f fe8e 	sxtb16	lr, lr
 8007214:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 8007218:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800721c:	fa2f f994 	sxtb16	r9, r4, ror #8
 8007220:	f8c1 e010 	str.w	lr, [r1, #16]
 8007224:	f8c1 a018 	str.w	sl, [r1, #24]
 8007228:	fa2f f484 	sxtb16	r4, r4
 800722c:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 8007230:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 8007234:	f8c1 e01c 	str.w	lr, [r1, #28]
 8007238:	614c      	str	r4, [r1, #20]
 800723a:	f8d0 e008 	ldr.w	lr, [r0, #8]
 800723e:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8007242:	fa2f f99e 	sxtb16	r9, lr, ror #8
 8007246:	fa2f fe8e 	sxtb16	lr, lr
 800724a:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 800724e:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 8007252:	fa2f f994 	sxtb16	r9, r4, ror #8
 8007256:	3010      	adds	r0, #16
 8007258:	f8c1 e020 	str.w	lr, [r1, #32]
 800725c:	f8c1 a028 	str.w	sl, [r1, #40]	; 0x28
 8007260:	fa2f f484 	sxtb16	r4, r4
 8007264:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 8007268:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 800726c:	f8c1 e02c 	str.w	lr, [r1, #44]	; 0x2c
 8007270:	624c      	str	r4, [r1, #36]	; 0x24
 8007272:	f8dc 400c 	ldr.w	r4, [ip, #12]
 8007276:	f850 ec04 	ldr.w	lr, [r0, #-4]
 800727a:	f10c 0c10 	add.w	ip, ip, #16
 800727e:	fa2f f99e 	sxtb16	r9, lr, ror #8
 8007282:	fa2f fe8e 	sxtb16	lr, lr
 8007286:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 800728a:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800728e:	fa2f f994 	sxtb16	r9, r4, ror #8
 8007292:	f8c1 e030 	str.w	lr, [r1, #48]	; 0x30
 8007296:	f8c1 a038 	str.w	sl, [r1, #56]	; 0x38
 800729a:	3510      	adds	r5, #16
 800729c:	3140      	adds	r1, #64	; 0x40
 800729e:	42bd      	cmp	r5, r7
 80072a0:	fa2f f484 	sxtb16	r4, r4
 80072a4:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 80072a8:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 80072ac:	f841 ec04 	str.w	lr, [r1, #-4]
 80072b0:	f841 4c0c 	str.w	r4, [r1, #-12]
 80072b4:	dd8b      	ble.n	80071ce <st_int8_to16_dual+0x1e>
 80072b6:	42ae      	cmp	r6, r5
 80072b8:	db1e      	blt.n	80072f8 <st_int8_to16_dual+0x148>
 80072ba:	f850 4b04 	ldr.w	r4, [r0], #4
 80072be:	f85c eb04 	ldr.w	lr, [ip], #4
 80072c2:	fa2f f994 	sxtb16	r9, r4, ror #8
 80072c6:	fa2f f484 	sxtb16	r4, r4
 80072ca:	eac9 4a24 	pkhtb	sl, r9, r4, asr #16
 80072ce:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 80072d2:	fa2f f99e 	sxtb16	r9, lr, ror #8
 80072d6:	600c      	str	r4, [r1, #0]
 80072d8:	f8c1 a008 	str.w	sl, [r1, #8]
 80072dc:	3504      	adds	r5, #4
 80072de:	3110      	adds	r1, #16
 80072e0:	42b5      	cmp	r5, r6
 80072e2:	fa2f fe8e 	sxtb16	lr, lr
 80072e6:	eac9 442e 	pkhtb	r4, r9, lr, asr #16
 80072ea:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 80072ee:	f841 4c04 	str.w	r4, [r1, #-4]
 80072f2:	f841 ec0c 	str.w	lr, [r1, #-12]
 80072f6:	dde0      	ble.n	80072ba <st_int8_to16_dual+0x10a>
 80072f8:	42aa      	cmp	r2, r5
 80072fa:	dd41      	ble.n	8007380 <st_int8_to16_dual+0x1d0>
 80072fc:	1b55      	subs	r5, r2, r5
 80072fe:	1d0c      	adds	r4, r1, #4
 8007300:	eb00 0a05 	add.w	sl, r0, r5
 8007304:	46e6      	mov	lr, ip
 8007306:	f910 9b01 	ldrsb.w	r9, [r0], #1
 800730a:	f824 9c04 	strh.w	r9, [r4, #-4]
 800730e:	f91e 9b01 	ldrsb.w	r9, [lr], #1
 8007312:	f824 9c02 	strh.w	r9, [r4, #-2]
 8007316:	4550      	cmp	r0, sl
 8007318:	f104 0404 	add.w	r4, r4, #4
 800731c:	d1f3      	bne.n	8007306 <st_int8_to16_dual+0x156>
 800731e:	44ac      	add	ip, r5
 8007320:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8007324:	3b01      	subs	r3, #1
 8007326:	b29b      	uxth	r3, r3
 8007328:	eb0a 0002 	add.w	r0, sl, r2
 800732c:	4494      	add	ip, r2
 800732e:	2b00      	cmp	r3, #0
 8007330:	f47f af49 	bne.w	80071c6 <st_int8_to16_dual+0x16>
 8007334:	f018 0f01 	tst.w	r8, #1
 8007338:	d020      	beq.n	800737c <st_int8_to16_dual+0x1cc>
 800733a:	1f17      	subs	r7, r2, #4
 800733c:	f04f 0400 	mov.w	r4, #0
 8007340:	d411      	bmi.n	8007366 <st_int8_to16_dual+0x1b6>
 8007342:	f850 3b04 	ldr.w	r3, [r0], #4
 8007346:	fa2f f593 	sxtb16	r5, r3, ror #8
 800734a:	3108      	adds	r1, #8
 800734c:	3404      	adds	r4, #4
 800734e:	42a7      	cmp	r7, r4
 8007350:	fa2f f383 	sxtb16	r3, r3
 8007354:	eac5 4623 	pkhtb	r6, r5, r3, asr #16
 8007358:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 800735c:	f841 6c04 	str.w	r6, [r1, #-4]
 8007360:	f841 3c08 	str.w	r3, [r1, #-8]
 8007364:	daed      	bge.n	8007342 <st_int8_to16_dual+0x192>
 8007366:	42a2      	cmp	r2, r4
 8007368:	dd08      	ble.n	800737c <st_int8_to16_dual+0x1cc>
 800736a:	1b13      	subs	r3, r2, r4
 800736c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8007370:	f910 2b01 	ldrsb.w	r2, [r0], #1
 8007374:	f821 2b02 	strh.w	r2, [r1], #2
 8007378:	428b      	cmp	r3, r1
 800737a:	d1f9      	bne.n	8007370 <st_int8_to16_dual+0x1c0>
 800737c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007380:	4682      	mov	sl, r0
 8007382:	e7cf      	b.n	8007324 <st_int8_to16_dual+0x174>

08007384 <st_int8_to16_dual_interleaved>:
 8007384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007388:	4698      	mov	r8, r3
 800738a:	085b      	lsrs	r3, r3, #1
 800738c:	eb00 0c02 	add.w	ip, r0, r2
 8007390:	f000 808d 	beq.w	80074ae <st_int8_to16_dual_interleaved+0x12a>
 8007394:	f1a2 0710 	sub.w	r7, r2, #16
 8007398:	1f16      	subs	r6, r2, #4
 800739a:	2f00      	cmp	r7, #0
 800739c:	f04f 0e00 	mov.w	lr, #0
 80073a0:	db4c      	blt.n	800743c <st_int8_to16_dual_interleaved+0xb8>
 80073a2:	6805      	ldr	r5, [r0, #0]
 80073a4:	f8dc 4000 	ldr.w	r4, [ip]
 80073a8:	fa2f fa95 	sxtb16	sl, r5, ror #8
 80073ac:	fa2f f585 	sxtb16	r5, r5
 80073b0:	fa2f f994 	sxtb16	r9, r4, ror #8
 80073b4:	f8c1 a000 	str.w	sl, [r1]
 80073b8:	f8c1 9004 	str.w	r9, [r1, #4]
 80073bc:	608d      	str	r5, [r1, #8]
 80073be:	fa2f f484 	sxtb16	r4, r4
 80073c2:	60cc      	str	r4, [r1, #12]
 80073c4:	6845      	ldr	r5, [r0, #4]
 80073c6:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80073ca:	fa2f fa95 	sxtb16	sl, r5, ror #8
 80073ce:	fa2f f585 	sxtb16	r5, r5
 80073d2:	fa2f f994 	sxtb16	r9, r4, ror #8
 80073d6:	f8c1 a010 	str.w	sl, [r1, #16]
 80073da:	f8c1 9014 	str.w	r9, [r1, #20]
 80073de:	618d      	str	r5, [r1, #24]
 80073e0:	fa2f f484 	sxtb16	r4, r4
 80073e4:	61cc      	str	r4, [r1, #28]
 80073e6:	6885      	ldr	r5, [r0, #8]
 80073e8:	f8dc 4008 	ldr.w	r4, [ip, #8]
 80073ec:	fa2f fa95 	sxtb16	sl, r5, ror #8
 80073f0:	fa2f f585 	sxtb16	r5, r5
 80073f4:	fa2f f994 	sxtb16	r9, r4, ror #8
 80073f8:	f8c1 a020 	str.w	sl, [r1, #32]
 80073fc:	f8c1 9024 	str.w	r9, [r1, #36]	; 0x24
 8007400:	628d      	str	r5, [r1, #40]	; 0x28
 8007402:	fa2f f484 	sxtb16	r4, r4
 8007406:	62cc      	str	r4, [r1, #44]	; 0x2c
 8007408:	68c5      	ldr	r5, [r0, #12]
 800740a:	f8dc 400c 	ldr.w	r4, [ip, #12]
 800740e:	3010      	adds	r0, #16
 8007410:	f10c 0c10 	add.w	ip, ip, #16
 8007414:	fa2f fa95 	sxtb16	sl, r5, ror #8
 8007418:	fa2f f585 	sxtb16	r5, r5
 800741c:	fa2f f994 	sxtb16	r9, r4, ror #8
 8007420:	f8c1 a030 	str.w	sl, [r1, #48]	; 0x30
 8007424:	f8c1 9034 	str.w	r9, [r1, #52]	; 0x34
 8007428:	638d      	str	r5, [r1, #56]	; 0x38
 800742a:	f10e 0e10 	add.w	lr, lr, #16
 800742e:	3140      	adds	r1, #64	; 0x40
 8007430:	45be      	cmp	lr, r7
 8007432:	fa2f f484 	sxtb16	r4, r4
 8007436:	f841 4c04 	str.w	r4, [r1, #-4]
 800743a:	ddb2      	ble.n	80073a2 <st_int8_to16_dual_interleaved+0x1e>
 800743c:	4576      	cmp	r6, lr
 800743e:	db17      	blt.n	8007470 <st_int8_to16_dual_interleaved+0xec>
 8007440:	f850 5b04 	ldr.w	r5, [r0], #4
 8007444:	f85c 4b04 	ldr.w	r4, [ip], #4
 8007448:	fa2f fa95 	sxtb16	sl, r5, ror #8
 800744c:	fa2f f585 	sxtb16	r5, r5
 8007450:	fa2f f994 	sxtb16	r9, r4, ror #8
 8007454:	f8c1 a000 	str.w	sl, [r1]
 8007458:	f8c1 9004 	str.w	r9, [r1, #4]
 800745c:	608d      	str	r5, [r1, #8]
 800745e:	f10e 0e04 	add.w	lr, lr, #4
 8007462:	3110      	adds	r1, #16
 8007464:	45b6      	cmp	lr, r6
 8007466:	fa2f f484 	sxtb16	r4, r4
 800746a:	f841 4c04 	str.w	r4, [r1, #-4]
 800746e:	dde7      	ble.n	8007440 <st_int8_to16_dual_interleaved+0xbc>
 8007470:	4572      	cmp	r2, lr
 8007472:	dd3d      	ble.n	80074f0 <st_int8_to16_dual_interleaved+0x16c>
 8007474:	eba2 0e0e 	sub.w	lr, r2, lr
 8007478:	1d0c      	adds	r4, r1, #4
 800747a:	eb00 0a0e 	add.w	sl, r0, lr
 800747e:	4665      	mov	r5, ip
 8007480:	f910 9b01 	ldrsb.w	r9, [r0], #1
 8007484:	f824 9c04 	strh.w	r9, [r4, #-4]
 8007488:	f915 9b01 	ldrsb.w	r9, [r5], #1
 800748c:	f824 9c02 	strh.w	r9, [r4, #-2]
 8007490:	4550      	cmp	r0, sl
 8007492:	f104 0404 	add.w	r4, r4, #4
 8007496:	d1f3      	bne.n	8007480 <st_int8_to16_dual_interleaved+0xfc>
 8007498:	44f4      	add	ip, lr
 800749a:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 800749e:	3b01      	subs	r3, #1
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	eb0a 0002 	add.w	r0, sl, r2
 80074a6:	4494      	add	ip, r2
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	f47f af76 	bne.w	800739a <st_int8_to16_dual_interleaved+0x16>
 80074ae:	f018 0f01 	tst.w	r8, #1
 80074b2:	d01b      	beq.n	80074ec <st_int8_to16_dual_interleaved+0x168>
 80074b4:	1f16      	subs	r6, r2, #4
 80074b6:	f04f 0400 	mov.w	r4, #0
 80074ba:	d40c      	bmi.n	80074d6 <st_int8_to16_dual_interleaved+0x152>
 80074bc:	f850 3b04 	ldr.w	r3, [r0], #4
 80074c0:	fa2f f593 	sxtb16	r5, r3, ror #8
 80074c4:	600d      	str	r5, [r1, #0]
 80074c6:	3404      	adds	r4, #4
 80074c8:	3108      	adds	r1, #8
 80074ca:	42a6      	cmp	r6, r4
 80074cc:	fa2f f383 	sxtb16	r3, r3
 80074d0:	f841 3c04 	str.w	r3, [r1, #-4]
 80074d4:	daf2      	bge.n	80074bc <st_int8_to16_dual_interleaved+0x138>
 80074d6:	42a2      	cmp	r2, r4
 80074d8:	dd08      	ble.n	80074ec <st_int8_to16_dual_interleaved+0x168>
 80074da:	1b13      	subs	r3, r2, r4
 80074dc:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80074e0:	f910 2b01 	ldrsb.w	r2, [r0], #1
 80074e4:	f821 2b02 	strh.w	r2, [r1], #2
 80074e8:	428b      	cmp	r3, r1
 80074ea:	d1f9      	bne.n	80074e0 <st_int8_to16_dual_interleaved+0x15c>
 80074ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074f0:	4682      	mov	sl, r0
 80074f2:	e7d4      	b.n	800749e <st_int8_to16_dual_interleaved+0x11a>

080074f4 <ai_padding_opt_init>:
 80074f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80074f8:	2700      	movs	r7, #0
 80074fa:	e9c0 7700 	strd	r7, r7, [r0]
 80074fe:	6087      	str	r7, [r0, #8]
 8007500:	690d      	ldr	r5, [r1, #16]
 8007502:	9c07      	ldr	r4, [sp, #28]
 8007504:	f1c5 0c00 	rsb	ip, r5, #0
 8007508:	689d      	ldr	r5, [r3, #8]
 800750a:	42bd      	cmp	r5, r7
 800750c:	46b9      	mov	r9, r7
 800750e:	dd1b      	ble.n	8007548 <ai_padding_opt_init+0x54>
 8007510:	463e      	mov	r6, r7
 8007512:	46be      	mov	lr, r7
 8007514:	e012      	b.n	800753c <ai_padding_opt_init+0x48>
 8007516:	6895      	ldr	r5, [r2, #8]
 8007518:	eba5 080c 	sub.w	r8, r5, ip
 800751c:	68a5      	ldr	r5, [r4, #8]
 800751e:	45a8      	cmp	r8, r5
 8007520:	bfb5      	itete	lt
 8007522:	f109 0901 	addlt.w	r9, r9, #1
 8007526:	3701      	addge	r7, #1
 8007528:	f8c0 9008 	strlt.w	r9, [r0, #8]
 800752c:	6047      	strge	r7, [r0, #4]
 800752e:	688d      	ldr	r5, [r1, #8]
 8007530:	44ac      	add	ip, r5
 8007532:	689d      	ldr	r5, [r3, #8]
 8007534:	f10e 0e01 	add.w	lr, lr, #1
 8007538:	4575      	cmp	r5, lr
 800753a:	dd06      	ble.n	800754a <ai_padding_opt_init+0x56>
 800753c:	f1bc 0f00 	cmp.w	ip, #0
 8007540:	dae9      	bge.n	8007516 <ai_padding_opt_init+0x22>
 8007542:	3601      	adds	r6, #1
 8007544:	6006      	str	r6, [r0, #0]
 8007546:	e7f2      	b.n	800752e <ai_padding_opt_init+0x3a>
 8007548:	463e      	mov	r6, r7
 800754a:	2500      	movs	r5, #0
 800754c:	e9c0 6703 	strd	r6, r7, [r0, #12]
 8007550:	e9c0 5506 	strd	r5, r5, [r0, #24]
 8007554:	f8c0 9014 	str.w	r9, [r0, #20]
 8007558:	6205      	str	r5, [r0, #32]
 800755a:	694e      	ldr	r6, [r1, #20]
 800755c:	f1c6 0c00 	rsb	ip, r6, #0
 8007560:	685e      	ldr	r6, [r3, #4]
 8007562:	42ae      	cmp	r6, r5
 8007564:	dd1c      	ble.n	80075a0 <ai_padding_opt_init+0xac>
 8007566:	46ae      	mov	lr, r5
 8007568:	e00f      	b.n	800758a <ai_padding_opt_init+0x96>
 800756a:	6855      	ldr	r5, [r2, #4]
 800756c:	6866      	ldr	r6, [r4, #4]
 800756e:	eba5 050c 	sub.w	r5, r5, ip
 8007572:	42b5      	cmp	r5, r6
 8007574:	da10      	bge.n	8007598 <ai_padding_opt_init+0xa4>
 8007576:	6a05      	ldr	r5, [r0, #32]
 8007578:	3501      	adds	r5, #1
 800757a:	6205      	str	r5, [r0, #32]
 800757c:	68cd      	ldr	r5, [r1, #12]
 800757e:	44ac      	add	ip, r5
 8007580:	685d      	ldr	r5, [r3, #4]
 8007582:	f10e 0e01 	add.w	lr, lr, #1
 8007586:	4575      	cmp	r5, lr
 8007588:	dd0a      	ble.n	80075a0 <ai_padding_opt_init+0xac>
 800758a:	f1bc 0f00 	cmp.w	ip, #0
 800758e:	daec      	bge.n	800756a <ai_padding_opt_init+0x76>
 8007590:	6985      	ldr	r5, [r0, #24]
 8007592:	3501      	adds	r5, #1
 8007594:	6185      	str	r5, [r0, #24]
 8007596:	e7f1      	b.n	800757c <ai_padding_opt_init+0x88>
 8007598:	69c5      	ldr	r5, [r0, #28]
 800759a:	3501      	adds	r5, #1
 800759c:	61c5      	str	r5, [r0, #28]
 800759e:	e7ed      	b.n	800757c <ai_padding_opt_init+0x88>
 80075a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080075a4 <ai_padding_opt_phase1>:
 80075a4:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 80075a8:	b923      	cbnz	r3, 80075b4 <ai_padding_opt_phase1+0x10>
 80075aa:	b17a      	cbz	r2, 80075cc <ai_padding_opt_phase1+0x28>
 80075ac:	3a01      	subs	r2, #1
 80075ae:	8483      	strh	r3, [r0, #36]	; 0x24
 80075b0:	61c2      	str	r2, [r0, #28]
 80075b2:	e004      	b.n	80075be <ai_padding_opt_phase1+0x1a>
 80075b4:	b152      	cbz	r2, 80075cc <ai_padding_opt_phase1+0x28>
 80075b6:	2201      	movs	r2, #1
 80075b8:	3b01      	subs	r3, #1
 80075ba:	8482      	strh	r2, [r0, #36]	; 0x24
 80075bc:	6183      	str	r3, [r0, #24]
 80075be:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 80075c2:	68c1      	ldr	r1, [r0, #12]
 80075c4:	6083      	str	r3, [r0, #8]
 80075c6:	e9c0 1200 	strd	r1, r2, [r0]
 80075ca:	4770      	bx	lr
 80075cc:	6a03      	ldr	r3, [r0, #32]
 80075ce:	2201      	movs	r2, #1
 80075d0:	3b01      	subs	r3, #1
 80075d2:	8482      	strh	r2, [r0, #36]	; 0x24
 80075d4:	6203      	str	r3, [r0, #32]
 80075d6:	e7f2      	b.n	80075be <ai_padding_opt_phase1+0x1a>

080075d8 <st_sssa8_ch_nn_mat_mult_kernel_opt>:
 80075d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075dc:	b09b      	sub	sp, #108	; 0x6c
 80075de:	4683      	mov	fp, r0
 80075e0:	f89d 00ac 	ldrb.w	r0, [sp, #172]	; 0xac
 80075e4:	900b      	str	r0, [sp, #44]	; 0x2c
 80075e6:	2800      	cmp	r0, #0
 80075e8:	9825      	ldr	r0, [sp, #148]	; 0x94
 80075ea:	9317      	str	r3, [sp, #92]	; 0x5c
 80075ec:	bf18      	it	ne
 80075ee:	2301      	movne	r3, #1
 80075f0:	fb00 3303 	mla	r3, r0, r3, r3
 80075f4:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80075f6:	910c      	str	r1, [sp, #48]	; 0x30
 80075f8:	18c3      	adds	r3, r0, r3
 80075fa:	9302      	str	r3, [sp, #8]
 80075fc:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 8007600:	f8bd 009c 	ldrh.w	r0, [sp, #156]	; 0x9c
 8007604:	9205      	str	r2, [sp, #20]
 8007606:	085c      	lsrs	r4, r3, #1
 8007608:	9314      	str	r3, [sp, #80]	; 0x50
 800760a:	9006      	str	r0, [sp, #24]
 800760c:	9415      	str	r4, [sp, #84]	; 0x54
 800760e:	f000 81c5 	beq.w	800799c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3c4>
 8007612:	460d      	mov	r5, r1
 8007614:	4601      	mov	r1, r0
 8007616:	1ece      	subs	r6, r1, #3
 8007618:	960d      	str	r6, [sp, #52]	; 0x34
 800761a:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 800761c:	3604      	adds	r6, #4
 800761e:	f1a0 0310 	sub.w	r3, r0, #16
 8007622:	9601      	str	r6, [sp, #4]
 8007624:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8007626:	091b      	lsrs	r3, r3, #4
 8007628:	3301      	adds	r3, #1
 800762a:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 800762e:	3608      	adds	r6, #8
 8007630:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8007634:	9604      	str	r6, [sp, #16]
 8007636:	920e      	str	r2, [sp, #56]	; 0x38
 8007638:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 800763a:	900f      	str	r0, [sp, #60]	; 0x3c
 800763c:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 8007640:	9207      	str	r2, [sp, #28]
 8007642:	011a      	lsls	r2, r3, #4
 8007644:	3608      	adds	r6, #8
 8007646:	9212      	str	r2, [sp, #72]	; 0x48
 8007648:	019a      	lsls	r2, r3, #6
 800764a:	eb05 1343 	add.w	r3, r5, r3, lsl #5
 800764e:	9603      	str	r6, [sp, #12]
 8007650:	9311      	str	r3, [sp, #68]	; 0x44
 8007652:	00e6      	lsls	r6, r4, #3
 8007654:	1f0b      	subs	r3, r1, #4
 8007656:	9616      	str	r6, [sp, #88]	; 0x58
 8007658:	9210      	str	r2, [sp, #64]	; 0x40
 800765a:	9313      	str	r3, [sp, #76]	; 0x4c
 800765c:	46d9      	mov	r9, fp
 800765e:	9905      	ldr	r1, [sp, #20]
 8007660:	9c06      	ldr	r4, [sp, #24]
 8007662:	680b      	ldr	r3, [r1, #0]
 8007664:	9319      	str	r3, [sp, #100]	; 0x64
 8007666:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007668:	9819      	ldr	r0, [sp, #100]	; 0x64
 800766a:	684a      	ldr	r2, [r1, #4]
 800766c:	9219      	str	r2, [sp, #100]	; 0x64
 800766e:	3108      	adds	r1, #8
 8007670:	2c0f      	cmp	r4, #15
 8007672:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007674:	9105      	str	r1, [sp, #20]
 8007676:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007678:	9919      	ldr	r1, [sp, #100]	; 0x64
 800767a:	f340 82cd 	ble.w	8007c18 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x640>
 800767e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8007680:	9e07      	ldr	r6, [sp, #28]
 8007682:	464c      	mov	r4, r9
 8007684:	f8d7 e000 	ldr.w	lr, [r7]
 8007688:	f8d5 a000 	ldr.w	sl, [r5]
 800768c:	f8d4 c000 	ldr.w	ip, [r4]
 8007690:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8007694:	fb2c 330e 	smlad	r3, ip, lr, r3
 8007698:	fb2c 000a 	smlad	r0, ip, sl, r0
 800769c:	fb28 2e0e 	smlad	lr, r8, lr, r2
 80076a0:	fb28 110a 	smlad	r1, r8, sl, r1
 80076a4:	f8d7 c004 	ldr.w	ip, [r7, #4]
 80076a8:	f8d5 8004 	ldr.w	r8, [r5, #4]
 80076ac:	68a2      	ldr	r2, [r4, #8]
 80076ae:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 80076b2:	fb22 330c 	smlad	r3, r2, ip, r3
 80076b6:	fb22 0008 	smlad	r0, r2, r8, r0
 80076ba:	fb2b ee0c 	smlad	lr, fp, ip, lr
 80076be:	fb2b 1808 	smlad	r8, fp, r8, r1
 80076c2:	f8d7 c008 	ldr.w	ip, [r7, #8]
 80076c6:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80076ca:	6922      	ldr	r2, [r4, #16]
 80076cc:	f8d4 a014 	ldr.w	sl, [r4, #20]
 80076d0:	fb22 330c 	smlad	r3, r2, ip, r3
 80076d4:	fb22 000b 	smlad	r0, r2, fp, r0
 80076d8:	fb2a ee0c 	smlad	lr, sl, ip, lr
 80076dc:	fb2a 8b0b 	smlad	fp, sl, fp, r8
 80076e0:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 80076e4:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 80076e8:	f8d4 8018 	ldr.w	r8, [r4, #24]
 80076ec:	69e1      	ldr	r1, [r4, #28]
 80076ee:	fb28 330c 	smlad	r3, r8, ip, r3
 80076f2:	fb28 000a 	smlad	r0, r8, sl, r0
 80076f6:	fb21 ec0c 	smlad	ip, r1, ip, lr
 80076fa:	fb21 ba0a 	smlad	sl, r1, sl, fp
 80076fe:	f8d7 e010 	ldr.w	lr, [r7, #16]
 8007702:	6929      	ldr	r1, [r5, #16]
 8007704:	f8d4 8020 	ldr.w	r8, [r4, #32]
 8007708:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800770a:	fb28 330e 	smlad	r3, r8, lr, r3
 800770e:	fb28 0001 	smlad	r0, r8, r1, r0
 8007712:	fb22 cc0e 	smlad	ip, r2, lr, ip
 8007716:	fb22 a101 	smlad	r1, r2, r1, sl
 800771a:	f8d7 e014 	ldr.w	lr, [r7, #20]
 800771e:	f8d5 a014 	ldr.w	sl, [r5, #20]
 8007722:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
 8007726:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007728:	fb28 330e 	smlad	r3, r8, lr, r3
 800772c:	fb28 000a 	smlad	r0, r8, sl, r0
 8007730:	fb22 cc0e 	smlad	ip, r2, lr, ip
 8007734:	fb22 120a 	smlad	r2, r2, sl, r1
 8007738:	f8d7 e018 	ldr.w	lr, [r7, #24]
 800773c:	f8d5 b018 	ldr.w	fp, [r5, #24]
 8007740:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8007744:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007746:	fb28 330e 	smlad	r3, r8, lr, r3
 800774a:	fb28 080b 	smlad	r8, r8, fp, r0
 800774e:	fb21 ce0e 	smlad	lr, r1, lr, ip
 8007752:	fb21 210b 	smlad	r1, r1, fp, r2
 8007756:	69fa      	ldr	r2, [r7, #28]
 8007758:	f8d5 b01c 	ldr.w	fp, [r5, #28]
 800775c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800775e:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
 8007762:	3720      	adds	r7, #32
 8007764:	3520      	adds	r5, #32
 8007766:	3440      	adds	r4, #64	; 0x40
 8007768:	fb20 3302 	smlad	r3, r0, r2, r3
 800776c:	fb20 800b 	smlad	r0, r0, fp, r8
 8007770:	fb2c e202 	smlad	r2, ip, r2, lr
 8007774:	fb2c 110b 	smlad	r1, ip, fp, r1
 8007778:	42b5      	cmp	r5, r6
 800777a:	d183      	bne.n	8007684 <st_sssa8_ch_nn_mat_mult_kernel_opt+0xac>
 800777c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800777e:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 8007782:	9d07      	ldr	r5, [sp, #28]
 8007784:	44a1      	add	r9, r4
 8007786:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8007788:	9400      	str	r4, [sp, #0]
 800778a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800778c:	45a3      	cmp	fp, r4
 800778e:	f280 824b 	bge.w	8007c28 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x650>
 8007792:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8007794:	f8dd c000 	ldr.w	ip, [sp]
 8007798:	eba4 040b 	sub.w	r4, r4, fp
 800779c:	08a4      	lsrs	r4, r4, #2
 800779e:	940a      	str	r4, [sp, #40]	; 0x28
 80077a0:	3401      	adds	r4, #1
 80077a2:	00e6      	lsls	r6, r4, #3
 80077a4:	9409      	str	r4, [sp, #36]	; 0x24
 80077a6:	eb05 08c4 	add.w	r8, r5, r4, lsl #3
 80077aa:	9608      	str	r6, [sp, #32]
 80077ac:	464c      	mov	r4, r9
 80077ae:	f8dc e000 	ldr.w	lr, [ip]
 80077b2:	682f      	ldr	r7, [r5, #0]
 80077b4:	f8d4 a000 	ldr.w	sl, [r4]
 80077b8:	6866      	ldr	r6, [r4, #4]
 80077ba:	fb2a 330e 	smlad	r3, sl, lr, r3
 80077be:	fb2a 0007 	smlad	r0, sl, r7, r0
 80077c2:	fb26 220e 	smlad	r2, r6, lr, r2
 80077c6:	fb26 1107 	smlad	r1, r6, r7, r1
 80077ca:	f8dc 7004 	ldr.w	r7, [ip, #4]
 80077ce:	f8d5 a004 	ldr.w	sl, [r5, #4]
 80077d2:	68a6      	ldr	r6, [r4, #8]
 80077d4:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 80077d8:	f10c 0c08 	add.w	ip, ip, #8
 80077dc:	3508      	adds	r5, #8
 80077de:	3410      	adds	r4, #16
 80077e0:	fb26 3307 	smlad	r3, r6, r7, r3
 80077e4:	fb26 000a 	smlad	r0, r6, sl, r0
 80077e8:	fb2e 2207 	smlad	r2, lr, r7, r2
 80077ec:	fb2e 110a 	smlad	r1, lr, sl, r1
 80077f0:	4545      	cmp	r5, r8
 80077f2:	d1dc      	bne.n	80077ae <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1d6>
 80077f4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80077f6:	9d08      	ldr	r5, [sp, #32]
 80077f8:	eb09 1904 	add.w	r9, r9, r4, lsl #4
 80077fc:	9c00      	ldr	r4, [sp, #0]
 80077fe:	442c      	add	r4, r5
 8007800:	9400      	str	r4, [sp, #0]
 8007802:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007804:	f10b 0b04 	add.w	fp, fp, #4
 8007808:	eb0b 0b84 	add.w	fp, fp, r4, lsl #2
 800780c:	9f06      	ldr	r7, [sp, #24]
 800780e:	455f      	cmp	r7, fp
 8007810:	dd54      	ble.n	80078bc <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2e4>
 8007812:	9c00      	ldr	r4, [sp, #0]
 8007814:	f9b9 6000 	ldrsh.w	r6, [r9]
 8007818:	f9b4 4000 	ldrsh.w	r4, [r4]
 800781c:	f9b9 5002 	ldrsh.w	r5, [r9, #2]
 8007820:	fb04 3306 	mla	r3, r4, r6, r3
 8007824:	fb05 2204 	mla	r2, r5, r4, r2
 8007828:	f9b8 4000 	ldrsh.w	r4, [r8]
 800782c:	fb04 0006 	mla	r0, r4, r6, r0
 8007830:	fb05 1104 	mla	r1, r5, r4, r1
 8007834:	f10b 0401 	add.w	r4, fp, #1
 8007838:	42bc      	cmp	r4, r7
 800783a:	da3a      	bge.n	80078b2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2da>
 800783c:	9c00      	ldr	r4, [sp, #0]
 800783e:	f9b9 6004 	ldrsh.w	r6, [r9, #4]
 8007842:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
 8007846:	f9b9 4006 	ldrsh.w	r4, [r9, #6]
 800784a:	fb05 3306 	mla	r3, r5, r6, r3
 800784e:	fb05 2204 	mla	r2, r5, r4, r2
 8007852:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 8007856:	fb05 1104 	mla	r1, r5, r4, r1
 800785a:	f10b 0402 	add.w	r4, fp, #2
 800785e:	42a7      	cmp	r7, r4
 8007860:	fb06 0005 	mla	r0, r6, r5, r0
 8007864:	dd25      	ble.n	80078b2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2da>
 8007866:	9c00      	ldr	r4, [sp, #0]
 8007868:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 800786c:	f9b4 5004 	ldrsh.w	r5, [r4, #4]
 8007870:	f9b9 400a 	ldrsh.w	r4, [r9, #10]
 8007874:	fb06 3305 	mla	r3, r6, r5, r3
 8007878:	fb05 2204 	mla	r2, r5, r4, r2
 800787c:	f9b8 5004 	ldrsh.w	r5, [r8, #4]
 8007880:	fb05 1104 	mla	r1, r5, r4, r1
 8007884:	f10b 0403 	add.w	r4, fp, #3
 8007888:	42a7      	cmp	r7, r4
 800788a:	fb06 0005 	mla	r0, r6, r5, r0
 800788e:	dd10      	ble.n	80078b2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2da>
 8007890:	9c00      	ldr	r4, [sp, #0]
 8007892:	f9b8 6006 	ldrsh.w	r6, [r8, #6]
 8007896:	f9b4 5006 	ldrsh.w	r5, [r4, #6]
 800789a:	f9b9 400c 	ldrsh.w	r4, [r9, #12]
 800789e:	fb04 3305 	mla	r3, r4, r5, r3
 80078a2:	fb04 0006 	mla	r0, r4, r6, r0
 80078a6:	f9b9 400e 	ldrsh.w	r4, [r9, #14]
 80078aa:	fb05 2204 	mla	r2, r5, r4, r2
 80078ae:	fb06 1104 	mla	r1, r6, r4, r1
 80078b2:	9c06      	ldr	r4, [sp, #24]
 80078b4:	eba4 0b0b 	sub.w	fp, r4, fp
 80078b8:	eb09 098b 	add.w	r9, r9, fp, lsl #2
 80078bc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80078be:	2c00      	cmp	r4, #0
 80078c0:	f000 80f2 	beq.w	8007aa8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4d0>
 80078c4:	9c01      	ldr	r4, [sp, #4]
 80078c6:	f934 4c04 	ldrsh.w	r4, [r4, #-4]
 80078ca:	2c15      	cmp	r4, #21
 80078cc:	f340 814e 	ble.w	8007b6c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x594>
 80078d0:	9d03      	ldr	r5, [sp, #12]
 80078d2:	f855 6c08 	ldr.w	r6, [r5, #-8]
 80078d6:	9d04      	ldr	r5, [sp, #16]
 80078d8:	1ea7      	subs	r7, r4, #2
 80078da:	f04f 0c01 	mov.w	ip, #1
 80078de:	f855 5c08 	ldr.w	r5, [r5, #-8]
 80078e2:	fa0c f707 	lsl.w	r7, ip, r7
 80078e6:	3c01      	subs	r4, #1
 80078e8:	fb53 7305 	smmla	r3, r3, r5, r7
 80078ec:	fb50 7005 	smmla	r0, r0, r5, r7
 80078f0:	9d04      	ldr	r5, [sp, #16]
 80078f2:	9f03      	ldr	r7, [sp, #12]
 80078f4:	4123      	asrs	r3, r4
 80078f6:	4433      	add	r3, r6
 80078f8:	3d04      	subs	r5, #4
 80078fa:	3f04      	subs	r7, #4
 80078fc:	f303 0307 	ssat	r3, #8, r3
 8007900:	4120      	asrs	r0, r4
 8007902:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8007904:	4430      	add	r0, r6
 8007906:	7023      	strb	r3, [r4, #0]
 8007908:	f300 0007 	ssat	r0, #8, r0
 800790c:	9b02      	ldr	r3, [sp, #8]
 800790e:	7018      	strb	r0, [r3, #0]
 8007910:	4620      	mov	r0, r4
 8007912:	9b01      	ldr	r3, [sp, #4]
 8007914:	9c24      	ldr	r4, [sp, #144]	; 0x90
 8007916:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 800791a:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800791c:	1904      	adds	r4, r0, r4
 800791e:	9802      	ldr	r0, [sp, #8]
 8007920:	2b15      	cmp	r3, #21
 8007922:	4430      	add	r0, r6
 8007924:	f340 810e 	ble.w	8007b44 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x56c>
 8007928:	682e      	ldr	r6, [r5, #0]
 800792a:	683f      	ldr	r7, [r7, #0]
 800792c:	1e9d      	subs	r5, r3, #2
 800792e:	f04f 0c01 	mov.w	ip, #1
 8007932:	3b01      	subs	r3, #1
 8007934:	fa0c f505 	lsl.w	r5, ip, r5
 8007938:	fb52 5206 	smmla	r2, r2, r6, r5
 800793c:	411a      	asrs	r2, r3
 800793e:	fb51 5106 	smmla	r1, r1, r6, r5
 8007942:	443a      	add	r2, r7
 8007944:	f302 0207 	ssat	r2, #8, r2
 8007948:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
 800794a:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800794c:	4119      	asrs	r1, r3
 800794e:	55aa      	strb	r2, [r5, r6]
 8007950:	4439      	add	r1, r7
 8007952:	f301 0107 	ssat	r1, #8, r1
 8007956:	9b02      	ldr	r3, [sp, #8]
 8007958:	5599      	strb	r1, [r3, r6]
 800795a:	4633      	mov	r3, r6
 800795c:	18e3      	adds	r3, r4, r3
 800795e:	932c      	str	r3, [sp, #176]	; 0xb0
 8007960:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007962:	18c3      	adds	r3, r0, r3
 8007964:	9302      	str	r3, [sp, #8]
 8007966:	9b01      	ldr	r3, [sp, #4]
 8007968:	9a05      	ldr	r2, [sp, #20]
 800796a:	3304      	adds	r3, #4
 800796c:	9301      	str	r3, [sp, #4]
 800796e:	9b04      	ldr	r3, [sp, #16]
 8007970:	3308      	adds	r3, #8
 8007972:	9304      	str	r3, [sp, #16]
 8007974:	9b03      	ldr	r3, [sp, #12]
 8007976:	3308      	adds	r3, #8
 8007978:	9303      	str	r3, [sp, #12]
 800797a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800797c:	4293      	cmp	r3, r2
 800797e:	f47f ae6e 	bne.w	800765e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x86>
 8007982:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007984:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007986:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800798a:	9328      	str	r3, [sp, #160]	; 0xa0
 800798c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800798e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007990:	4413      	add	r3, r2
 8007992:	9329      	str	r3, [sp, #164]	; 0xa4
 8007994:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8007996:	4413      	add	r3, r2
 8007998:	46cb      	mov	fp, r9
 800799a:	932a      	str	r3, [sp, #168]	; 0xa8
 800799c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800799e:	07db      	lsls	r3, r3, #31
 80079a0:	f140 81c4 	bpl.w	8007d2c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x754>
 80079a4:	9a06      	ldr	r2, [sp, #24]
 80079a6:	9b05      	ldr	r3, [sp, #20]
 80079a8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	0896      	lsrs	r6, r2, #2
 80079ae:	eb01 0e42 	add.w	lr, r1, r2, lsl #1
 80079b2:	f000 8209 	beq.w	8007dc8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x7f0>
 80079b6:	00f7      	lsls	r7, r6, #3
 80079b8:	4674      	mov	r4, lr
 80079ba:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 80079be:	4658      	mov	r0, fp
 80079c0:	461a      	mov	r2, r3
 80079c2:	f8d0 c000 	ldr.w	ip, [r0]
 80079c6:	6845      	ldr	r5, [r0, #4]
 80079c8:	f8d1 8000 	ldr.w	r8, [r1]
 80079cc:	3008      	adds	r0, #8
 80079ce:	fb2c 3308 	smlad	r3, ip, r8, r3
 80079d2:	f8d4 8000 	ldr.w	r8, [r4]
 80079d6:	fb2c 2208 	smlad	r2, ip, r8, r2
 80079da:	f8d1 8004 	ldr.w	r8, [r1, #4]
 80079de:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80079e2:	3108      	adds	r1, #8
 80079e4:	3408      	adds	r4, #8
 80079e6:	fb25 3308 	smlad	r3, r5, r8, r3
 80079ea:	fb25 220c 	smlad	r2, r5, ip, r2
 80079ee:	42b1      	cmp	r1, r6
 80079f0:	d1e7      	bne.n	80079c2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3ea>
 80079f2:	44bb      	add	fp, r7
 80079f4:	44be      	add	lr, r7
 80079f6:	9906      	ldr	r1, [sp, #24]
 80079f8:	f011 0103 	ands.w	r1, r1, #3
 80079fc:	d01f      	beq.n	8007a3e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x466>
 80079fe:	f9bb 0000 	ldrsh.w	r0, [fp]
 8007a02:	8834      	ldrh	r4, [r6, #0]
 8007a04:	3901      	subs	r1, #1
 8007a06:	fb14 3300 	smlabb	r3, r4, r0, r3
 8007a0a:	f8be 4000 	ldrh.w	r4, [lr]
 8007a0e:	b289      	uxth	r1, r1
 8007a10:	fb14 2200 	smlabb	r2, r4, r0, r2
 8007a14:	b199      	cbz	r1, 8007a3e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x466>
 8007a16:	f9bb 0002 	ldrsh.w	r0, [fp, #2]
 8007a1a:	8874      	ldrh	r4, [r6, #2]
 8007a1c:	fb14 3300 	smlabb	r3, r4, r0, r3
 8007a20:	f8be 4002 	ldrh.w	r4, [lr, #2]
 8007a24:	2901      	cmp	r1, #1
 8007a26:	fb14 2200 	smlabb	r2, r4, r0, r2
 8007a2a:	d008      	beq.n	8007a3e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x466>
 8007a2c:	f9bb 1004 	ldrsh.w	r1, [fp, #4]
 8007a30:	88b0      	ldrh	r0, [r6, #4]
 8007a32:	fb11 3300 	smlabb	r3, r1, r0, r3
 8007a36:	f8be 0004 	ldrh.w	r0, [lr, #4]
 8007a3a:	fb11 2200 	smlabb	r2, r1, r0, r2
 8007a3e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8007a40:	f9b1 0000 	ldrsh.w	r0, [r1]
 8007a44:	2815      	cmp	r0, #21
 8007a46:	f340 8180 	ble.w	8007d4a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x772>
 8007a4a:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8007a4c:	680c      	ldr	r4, [r1, #0]
 8007a4e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8007a50:	1e85      	subs	r5, r0, #2
 8007a52:	2601      	movs	r6, #1
 8007a54:	3801      	subs	r0, #1
 8007a56:	6809      	ldr	r1, [r1, #0]
 8007a58:	40ae      	lsls	r6, r5
 8007a5a:	fb53 6501 	smmla	r5, r3, r1, r6
 8007a5e:	fb52 6301 	smmla	r3, r2, r1, r6
 8007a62:	fa45 f200 	asr.w	r2, r5, r0
 8007a66:	4422      	add	r2, r4
 8007a68:	f302 0207 	ssat	r2, #8, r2
 8007a6c:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8007a6e:	4103      	asrs	r3, r0
 8007a70:	4423      	add	r3, r4
 8007a72:	f801 2b01 	strb.w	r2, [r1], #1
 8007a76:	f303 0307 	ssat	r3, #8, r3
 8007a7a:	9a02      	ldr	r2, [sp, #8]
 8007a7c:	912c      	str	r1, [sp, #176]	; 0xb0
 8007a7e:	7013      	strb	r3, [r2, #0]
 8007a80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	f000 8156 	beq.w	8007d34 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x75c>
 8007a88:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007a8a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8007a8c:	3b01      	subs	r3, #1
 8007a8e:	441a      	add	r2, r3
 8007a90:	922c      	str	r2, [sp, #176]	; 0xb0
 8007a92:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8007a94:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007a96:	1c98      	adds	r0, r3, #2
 8007a98:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007a9a:	fb02 0013 	mls	r0, r2, r3, r0
 8007a9e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8007aa0:	4418      	add	r0, r3
 8007aa2:	b01b      	add	sp, #108	; 0x6c
 8007aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aa8:	9c01      	ldr	r4, [sp, #4]
 8007aaa:	f934 4c04 	ldrsh.w	r4, [r4, #-4]
 8007aae:	2c15      	cmp	r4, #21
 8007ab0:	f340 8094 	ble.w	8007bdc <st_sssa8_ch_nn_mat_mult_kernel_opt+0x604>
 8007ab4:	9d03      	ldr	r5, [sp, #12]
 8007ab6:	f855 6c08 	ldr.w	r6, [r5, #-8]
 8007aba:	9d04      	ldr	r5, [sp, #16]
 8007abc:	1ea7      	subs	r7, r4, #2
 8007abe:	f04f 0c01 	mov.w	ip, #1
 8007ac2:	f855 5c08 	ldr.w	r5, [r5, #-8]
 8007ac6:	fa0c f707 	lsl.w	r7, ip, r7
 8007aca:	3c01      	subs	r4, #1
 8007acc:	fb53 7305 	smmla	r3, r3, r5, r7
 8007ad0:	fb50 7005 	smmla	r0, r0, r5, r7
 8007ad4:	9f04      	ldr	r7, [sp, #16]
 8007ad6:	9d03      	ldr	r5, [sp, #12]
 8007ad8:	4123      	asrs	r3, r4
 8007ada:	4433      	add	r3, r6
 8007adc:	f1a7 0c04 	sub.w	ip, r7, #4
 8007ae0:	f1a5 0804 	sub.w	r8, r5, #4
 8007ae4:	f303 0307 	ssat	r3, #8, r3
 8007ae8:	4120      	asrs	r0, r4
 8007aea:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8007aec:	4430      	add	r0, r6
 8007aee:	7023      	strb	r3, [r4, #0]
 8007af0:	f300 0007 	ssat	r0, #8, r0
 8007af4:	9b02      	ldr	r3, [sp, #8]
 8007af6:	7018      	strb	r0, [r3, #0]
 8007af8:	9b01      	ldr	r3, [sp, #4]
 8007afa:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 8007afe:	2b15      	cmp	r3, #21
 8007b00:	dd52      	ble.n	8007ba8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5d0>
 8007b02:	f8d8 4000 	ldr.w	r4, [r8]
 8007b06:	f8dc 5000 	ldr.w	r5, [ip]
 8007b0a:	1e98      	subs	r0, r3, #2
 8007b0c:	2601      	movs	r6, #1
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	fa06 f000 	lsl.w	r0, r6, r0
 8007b14:	fb52 0205 	smmla	r2, r2, r5, r0
 8007b18:	411a      	asrs	r2, r3
 8007b1a:	fb51 0105 	smmla	r1, r1, r5, r0
 8007b1e:	4422      	add	r2, r4
 8007b20:	f302 0207 	ssat	r2, #8, r2
 8007b24:	fa41 f303 	asr.w	r3, r1, r3
 8007b28:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8007b2a:	4423      	add	r3, r4
 8007b2c:	704a      	strb	r2, [r1, #1]
 8007b2e:	f303 0307 	ssat	r3, #8, r3
 8007b32:	9a02      	ldr	r2, [sp, #8]
 8007b34:	7053      	strb	r3, [r2, #1]
 8007b36:	460b      	mov	r3, r1
 8007b38:	3302      	adds	r3, #2
 8007b3a:	932c      	str	r3, [sp, #176]	; 0xb0
 8007b3c:	9b02      	ldr	r3, [sp, #8]
 8007b3e:	3302      	adds	r3, #2
 8007b40:	9302      	str	r3, [sp, #8]
 8007b42:	e710      	b.n	8007966 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x38e>
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	dd71      	ble.n	8007c2c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x654>
 8007b48:	682d      	ldr	r5, [r5, #0]
 8007b4a:	683f      	ldr	r7, [r7, #0]
 8007b4c:	0052      	lsls	r2, r2, #1
 8007b4e:	0049      	lsls	r1, r1, #1
 8007b50:	fb52 7205 	smmla	r2, r2, r5, r7
 8007b54:	fb51 7105 	smmla	r1, r1, r5, r7
 8007b58:	411a      	asrs	r2, r3
 8007b5a:	f302 0207 	ssat	r2, #8, r2
 8007b5e:	7022      	strb	r2, [r4, #0]
 8007b60:	4119      	asrs	r1, r3
 8007b62:	f301 0107 	ssat	r1, #8, r1
 8007b66:	7001      	strb	r1, [r0, #0]
 8007b68:	4633      	mov	r3, r6
 8007b6a:	e6f7      	b.n	800795c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x384>
 8007b6c:	2c00      	cmp	r4, #0
 8007b6e:	f340 809b 	ble.w	8007ca8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x6d0>
 8007b72:	9f04      	ldr	r7, [sp, #16]
 8007b74:	9e03      	ldr	r6, [sp, #12]
 8007b76:	f857 5c08 	ldr.w	r5, [r7, #-8]
 8007b7a:	f856 6c08 	ldr.w	r6, [r6, #-8]
 8007b7e:	005b      	lsls	r3, r3, #1
 8007b80:	0040      	lsls	r0, r0, #1
 8007b82:	fb53 6305 	smmla	r3, r3, r5, r6
 8007b86:	fb50 6005 	smmla	r0, r0, r5, r6
 8007b8a:	9e03      	ldr	r6, [sp, #12]
 8007b8c:	1f3d      	subs	r5, r7, #4
 8007b8e:	4123      	asrs	r3, r4
 8007b90:	1f37      	subs	r7, r6, #4
 8007b92:	f303 0307 	ssat	r3, #8, r3
 8007b96:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 8007b98:	4120      	asrs	r0, r4
 8007b9a:	7033      	strb	r3, [r6, #0]
 8007b9c:	f300 0007 	ssat	r0, #8, r0
 8007ba0:	9b02      	ldr	r3, [sp, #8]
 8007ba2:	7018      	strb	r0, [r3, #0]
 8007ba4:	4630      	mov	r0, r6
 8007ba6:	e6b4      	b.n	8007912 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x33a>
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f340 80a0 	ble.w	8007cee <st_sssa8_ch_nn_mat_mult_kernel_opt+0x716>
 8007bae:	f8dc 0000 	ldr.w	r0, [ip]
 8007bb2:	f8d8 4000 	ldr.w	r4, [r8]
 8007bb6:	0052      	lsls	r2, r2, #1
 8007bb8:	0049      	lsls	r1, r1, #1
 8007bba:	fb52 4200 	smmla	r2, r2, r0, r4
 8007bbe:	fb51 4100 	smmla	r1, r1, r0, r4
 8007bc2:	411a      	asrs	r2, r3
 8007bc4:	f302 0207 	ssat	r2, #8, r2
 8007bc8:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8007bca:	fa41 f303 	asr.w	r3, r1, r3
 8007bce:	7042      	strb	r2, [r0, #1]
 8007bd0:	f303 0307 	ssat	r3, #8, r3
 8007bd4:	9a02      	ldr	r2, [sp, #8]
 8007bd6:	7053      	strb	r3, [r2, #1]
 8007bd8:	4603      	mov	r3, r0
 8007bda:	e7ad      	b.n	8007b38 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x560>
 8007bdc:	2c00      	cmp	r4, #0
 8007bde:	dd3f      	ble.n	8007c60 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x688>
 8007be0:	9f04      	ldr	r7, [sp, #16]
 8007be2:	9e03      	ldr	r6, [sp, #12]
 8007be4:	f857 5c08 	ldr.w	r5, [r7, #-8]
 8007be8:	f856 6c08 	ldr.w	r6, [r6, #-8]
 8007bec:	005b      	lsls	r3, r3, #1
 8007bee:	0040      	lsls	r0, r0, #1
 8007bf0:	fb53 6305 	smmla	r3, r3, r5, r6
 8007bf4:	fb50 6005 	smmla	r0, r0, r5, r6
 8007bf8:	9e03      	ldr	r6, [sp, #12]
 8007bfa:	4123      	asrs	r3, r4
 8007bfc:	f1a7 0c04 	sub.w	ip, r7, #4
 8007c00:	f1a6 0804 	sub.w	r8, r6, #4
 8007c04:	f303 0307 	ssat	r3, #8, r3
 8007c08:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
 8007c0a:	4120      	asrs	r0, r4
 8007c0c:	702b      	strb	r3, [r5, #0]
 8007c0e:	f300 0007 	ssat	r0, #8, r0
 8007c12:	9b02      	ldr	r3, [sp, #8]
 8007c14:	7018      	strb	r0, [r3, #0]
 8007c16:	e76f      	b.n	8007af8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x520>
 8007c18:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8007c1a:	9400      	str	r4, [sp, #0]
 8007c1c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8007c1e:	f04f 0b00 	mov.w	fp, #0
 8007c22:	45a3      	cmp	fp, r4
 8007c24:	f6ff adb5 	blt.w	8007792 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1ba>
 8007c28:	46a8      	mov	r8, r5
 8007c2a:	e5ef      	b.n	800780c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x234>
 8007c2c:	f1c3 0301 	rsb	r3, r3, #1
 8007c30:	409a      	lsls	r2, r3
 8007c32:	f302 021f 	ssat	r2, #32, r2
 8007c36:	682d      	ldr	r5, [r5, #0]
 8007c38:	fb52 f215 	smmulr	r2, r2, r5
 8007c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c40:	f303 031f 	ssat	r3, #32, r3
 8007c44:	fb53 f515 	smmulr	r5, r3, r5
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	f303 0307 	ssat	r3, #8, r3
 8007c50:	7023      	strb	r3, [r4, #0]
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	442b      	add	r3, r5
 8007c56:	f303 0307 	ssat	r3, #8, r3
 8007c5a:	7003      	strb	r3, [r0, #0]
 8007c5c:	4633      	mov	r3, r6
 8007c5e:	e67d      	b.n	800795c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x384>
 8007c60:	f1c4 0401 	rsb	r4, r4, #1
 8007c64:	fa03 f504 	lsl.w	r5, r3, r4
 8007c68:	f305 051f 	ssat	r5, #32, r5
 8007c6c:	9e04      	ldr	r6, [sp, #16]
 8007c6e:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8007c72:	fb55 f513 	smmulr	r5, r5, r3
 8007c76:	40a0      	lsls	r0, r4
 8007c78:	f300 001f 	ssat	r0, #32, r0
 8007c7c:	f1a6 0c04 	sub.w	ip, r6, #4
 8007c80:	fb50 f013 	smmulr	r0, r0, r3
 8007c84:	9c03      	ldr	r4, [sp, #12]
 8007c86:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8007c8a:	442b      	add	r3, r5
 8007c8c:	f303 0307 	ssat	r3, #8, r3
 8007c90:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
 8007c92:	702b      	strb	r3, [r5, #0]
 8007c94:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8007c98:	f1a4 0804 	sub.w	r8, r4, #4
 8007c9c:	4403      	add	r3, r0
 8007c9e:	f303 0307 	ssat	r3, #8, r3
 8007ca2:	9802      	ldr	r0, [sp, #8]
 8007ca4:	7003      	strb	r3, [r0, #0]
 8007ca6:	e727      	b.n	8007af8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x520>
 8007ca8:	f1c4 0401 	rsb	r4, r4, #1
 8007cac:	fa03 f604 	lsl.w	r6, r3, r4
 8007cb0:	f306 061f 	ssat	r6, #32, r6
 8007cb4:	9d04      	ldr	r5, [sp, #16]
 8007cb6:	f855 3c08 	ldr.w	r3, [r5, #-8]
 8007cba:	fb56 f613 	smmulr	r6, r6, r3
 8007cbe:	40a0      	lsls	r0, r4
 8007cc0:	f300 001f 	ssat	r0, #32, r0
 8007cc4:	3d04      	subs	r5, #4
 8007cc6:	fb50 f013 	smmulr	r0, r0, r3
 8007cca:	9c03      	ldr	r4, [sp, #12]
 8007ccc:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8007cd0:	4433      	add	r3, r6
 8007cd2:	f303 0307 	ssat	r3, #8, r3
 8007cd6:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 8007cd8:	7033      	strb	r3, [r6, #0]
 8007cda:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8007cde:	1f27      	subs	r7, r4, #4
 8007ce0:	4403      	add	r3, r0
 8007ce2:	f303 0307 	ssat	r3, #8, r3
 8007ce6:	9802      	ldr	r0, [sp, #8]
 8007ce8:	7003      	strb	r3, [r0, #0]
 8007cea:	4630      	mov	r0, r6
 8007cec:	e611      	b.n	8007912 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x33a>
 8007cee:	f1c3 0301 	rsb	r3, r3, #1
 8007cf2:	409a      	lsls	r2, r3
 8007cf4:	f302 021f 	ssat	r2, #32, r2
 8007cf8:	f8dc 0000 	ldr.w	r0, [ip]
 8007cfc:	fb52 f210 	smmulr	r2, r2, r0
 8007d00:	fa01 f303 	lsl.w	r3, r1, r3
 8007d04:	f303 031f 	ssat	r3, #32, r3
 8007d08:	fb53 f010 	smmulr	r0, r3, r0
 8007d0c:	f8d8 3000 	ldr.w	r3, [r8]
 8007d10:	4413      	add	r3, r2
 8007d12:	f303 0307 	ssat	r3, #8, r3
 8007d16:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8007d18:	7053      	strb	r3, [r2, #1]
 8007d1a:	f8d8 3000 	ldr.w	r3, [r8]
 8007d1e:	4403      	add	r3, r0
 8007d20:	f303 0307 	ssat	r3, #8, r3
 8007d24:	9a02      	ldr	r2, [sp, #8]
 8007d26:	7053      	strb	r3, [r2, #1]
 8007d28:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8007d2a:	e705      	b.n	8007b38 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x560>
 8007d2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	f47f aeaf 	bne.w	8007a92 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4ba>
 8007d34:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8007d36:	9914      	ldr	r1, [sp, #80]	; 0x50
 8007d38:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8007d3a:	1a50      	subs	r0, r2, r1
 8007d3c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007d3e:	3302      	adds	r3, #2
 8007d40:	fb02 0003 	mla	r0, r2, r3, r0
 8007d44:	b01b      	add	sp, #108	; 0x6c
 8007d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d4a:	2800      	cmp	r0, #0
 8007d4c:	dd1b      	ble.n	8007d86 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x7ae>
 8007d4e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8007d50:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8007d52:	6809      	ldr	r1, [r1, #0]
 8007d54:	6824      	ldr	r4, [r4, #0]
 8007d56:	0052      	lsls	r2, r2, #1
 8007d58:	005b      	lsls	r3, r3, #1
 8007d5a:	fb53 4301 	smmla	r3, r3, r1, r4
 8007d5e:	fb52 4101 	smmla	r1, r2, r1, r4
 8007d62:	fa43 f000 	asr.w	r0, r3, r0
 8007d66:	f300 0307 	ssat	r3, #8, r0
 8007d6a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8007d6c:	f802 3b01 	strb.w	r3, [r2], #1
 8007d70:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007d72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d76:	fa41 f303 	asr.w	r3, r1, r3
 8007d7a:	f303 0307 	ssat	r3, #8, r3
 8007d7e:	9902      	ldr	r1, [sp, #8]
 8007d80:	922c      	str	r2, [sp, #176]	; 0xb0
 8007d82:	700b      	strb	r3, [r1, #0]
 8007d84:	e67c      	b.n	8007a80 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4a8>
 8007d86:	f1c0 0001 	rsb	r0, r0, #1
 8007d8a:	fa03 f100 	lsl.w	r1, r3, r0
 8007d8e:	f301 011f 	ssat	r1, #32, r1
 8007d92:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007d94:	681c      	ldr	r4, [r3, #0]
 8007d96:	fb51 f114 	smmulr	r1, r1, r4
 8007d9a:	fa02 f300 	lsl.w	r3, r2, r0
 8007d9e:	f303 031f 	ssat	r3, #32, r3
 8007da2:	fb53 f414 	smmulr	r4, r3, r4
 8007da6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	440b      	add	r3, r1
 8007dac:	f303 0307 	ssat	r3, #8, r3
 8007db0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8007db2:	f802 3b01 	strb.w	r3, [r2], #1
 8007db6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4423      	add	r3, r4
 8007dbc:	f303 0307 	ssat	r3, #8, r3
 8007dc0:	9902      	ldr	r1, [sp, #8]
 8007dc2:	922c      	str	r2, [sp, #176]	; 0xb0
 8007dc4:	700b      	strb	r3, [r1, #0]
 8007dc6:	e65b      	b.n	8007a80 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4a8>
 8007dc8:	460e      	mov	r6, r1
 8007dca:	461a      	mov	r2, r3
 8007dcc:	e613      	b.n	80079f6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x41e>
 8007dce:	bf00      	nop

08007dd0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>:
 8007dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd4:	b095      	sub	sp, #84	; 0x54
 8007dd6:	f8bd 407c 	ldrh.w	r4, [sp, #124]	; 0x7c
 8007dda:	920d      	str	r2, [sp, #52]	; 0x34
 8007ddc:	9311      	str	r3, [sp, #68]	; 0x44
 8007dde:	f8bd 2080 	ldrh.w	r2, [sp, #128]	; 0x80
 8007de2:	f89d 3090 	ldrb.w	r3, [sp, #144]	; 0x90
 8007de6:	9204      	str	r2, [sp, #16]
 8007de8:	0862      	lsrs	r2, r4, #1
 8007dea:	940f      	str	r4, [sp, #60]	; 0x3c
 8007dec:	9106      	str	r1, [sp, #24]
 8007dee:	9310      	str	r3, [sp, #64]	; 0x40
 8007df0:	920e      	str	r2, [sp, #56]	; 0x38
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	f000 81f8 	beq.w	80081e8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x418>
 8007df8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007dfa:	b29c      	uxth	r4, r3
 8007dfc:	2a00      	cmp	r2, #0
 8007dfe:	f000 8142 	beq.w	8008086 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2b6>
 8007e02:	1c61      	adds	r1, r4, #1
 8007e04:	0064      	lsls	r4, r4, #1
 8007e06:	9407      	str	r4, [sp, #28]
 8007e08:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8007e0a:	9d04      	ldr	r5, [sp, #16]
 8007e0c:	1861      	adds	r1, r4, r1
 8007e0e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8007e10:	9102      	str	r1, [sp, #8]
 8007e12:	3a01      	subs	r2, #1
 8007e14:	f104 0110 	add.w	r1, r4, #16
 8007e18:	b292      	uxth	r2, r2
 8007e1a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8007e1e:	1ee9      	subs	r1, r5, #3
 8007e20:	9108      	str	r1, [sp, #32]
 8007e22:	9921      	ldr	r1, [sp, #132]	; 0x84
 8007e24:	9209      	str	r2, [sp, #36]	; 0x24
 8007e26:	3104      	adds	r1, #4
 8007e28:	9100      	str	r1, [sp, #0]
 8007e2a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007e2c:	3108      	adds	r1, #8
 8007e2e:	9101      	str	r1, [sp, #4]
 8007e30:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8007e32:	f101 0b08 	add.w	fp, r1, #8
 8007e36:	9925      	ldr	r1, [sp, #148]	; 0x94
 8007e38:	f1a5 0310 	sub.w	r3, r5, #16
 8007e3c:	3101      	adds	r1, #1
 8007e3e:	091b      	lsrs	r3, r3, #4
 8007e40:	9103      	str	r1, [sp, #12]
 8007e42:	9906      	ldr	r1, [sp, #24]
 8007e44:	3301      	adds	r3, #1
 8007e46:	eb01 1743 	add.w	r7, r1, r3, lsl #5
 8007e4a:	0119      	lsls	r1, r3, #4
 8007e4c:	019b      	lsls	r3, r3, #6
 8007e4e:	930a      	str	r3, [sp, #40]	; 0x28
 8007e50:	1f2b      	subs	r3, r5, #4
 8007e52:	f104 0908 	add.w	r9, r4, #8
 8007e56:	910b      	str	r1, [sp, #44]	; 0x2c
 8007e58:	930c      	str	r3, [sp, #48]	; 0x30
 8007e5a:	f859 3c08 	ldr.w	r3, [r9, #-8]
 8007e5e:	9904      	ldr	r1, [sp, #16]
 8007e60:	9313      	str	r3, [sp, #76]	; 0x4c
 8007e62:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8007e66:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007e68:	9313      	str	r3, [sp, #76]	; 0x4c
 8007e6a:	290f      	cmp	r1, #15
 8007e6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007e6e:	9c06      	ldr	r4, [sp, #24]
 8007e70:	f340 81b7 	ble.w	80081e2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x412>
 8007e74:	4601      	mov	r1, r0
 8007e76:	f8d4 c000 	ldr.w	ip, [r4]
 8007e7a:	680e      	ldr	r6, [r1, #0]
 8007e7c:	fb26 220c 	smlad	r2, r6, ip, r2
 8007e80:	684d      	ldr	r5, [r1, #4]
 8007e82:	fb25 330c 	smlad	r3, r5, ip, r3
 8007e86:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8007e8a:	688e      	ldr	r6, [r1, #8]
 8007e8c:	fb26 260c 	smlad	r6, r6, ip, r2
 8007e90:	68cd      	ldr	r5, [r1, #12]
 8007e92:	fb25 350c 	smlad	r5, r5, ip, r3
 8007e96:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8007e9a:	690a      	ldr	r2, [r1, #16]
 8007e9c:	fb22 660c 	smlad	r6, r2, ip, r6
 8007ea0:	694b      	ldr	r3, [r1, #20]
 8007ea2:	fb23 550c 	smlad	r5, r3, ip, r5
 8007ea6:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8007eaa:	698a      	ldr	r2, [r1, #24]
 8007eac:	fb22 620c 	smlad	r2, r2, ip, r6
 8007eb0:	69cb      	ldr	r3, [r1, #28]
 8007eb2:	fb23 530c 	smlad	r3, r3, ip, r5
 8007eb6:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8007eba:	6a0e      	ldr	r6, [r1, #32]
 8007ebc:	fb26 220c 	smlad	r2, r6, ip, r2
 8007ec0:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8007ec2:	fb25 330c 	smlad	r3, r5, ip, r3
 8007ec6:	f8d4 c014 	ldr.w	ip, [r4, #20]
 8007eca:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 8007ecc:	fb26 260c 	smlad	r6, r6, ip, r2
 8007ed0:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 8007ed2:	fb25 350c 	smlad	r5, r5, ip, r3
 8007ed6:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8007eda:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8007edc:	fb22 660c 	smlad	r6, r2, ip, r6
 8007ee0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8007ee2:	fb23 550c 	smlad	r5, r3, ip, r5
 8007ee6:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 8007eea:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8007eec:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8007eee:	3420      	adds	r4, #32
 8007ef0:	3140      	adds	r1, #64	; 0x40
 8007ef2:	fb22 620c 	smlad	r2, r2, ip, r6
 8007ef6:	fb23 530c 	smlad	r3, r3, ip, r5
 8007efa:	42bc      	cmp	r4, r7
 8007efc:	d1bb      	bne.n	8007e76 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0xa6>
 8007efe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007f00:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 8007f04:	4408      	add	r0, r1
 8007f06:	463c      	mov	r4, r7
 8007f08:	9908      	ldr	r1, [sp, #32]
 8007f0a:	458e      	cmp	lr, r1
 8007f0c:	da24      	bge.n	8007f58 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x188>
 8007f0e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007f10:	eba1 0a0e 	sub.w	sl, r1, lr
 8007f14:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
 8007f18:	f10a 0101 	add.w	r1, sl, #1
 8007f1c:	9105      	str	r1, [sp, #20]
 8007f1e:	eb04 08c1 	add.w	r8, r4, r1, lsl #3
 8007f22:	4601      	mov	r1, r0
 8007f24:	6825      	ldr	r5, [r4, #0]
 8007f26:	680e      	ldr	r6, [r1, #0]
 8007f28:	fb26 2205 	smlad	r2, r6, r5, r2
 8007f2c:	684e      	ldr	r6, [r1, #4]
 8007f2e:	fb26 3505 	smlad	r5, r6, r5, r3
 8007f32:	6866      	ldr	r6, [r4, #4]
 8007f34:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8007f38:	68cb      	ldr	r3, [r1, #12]
 8007f3a:	3408      	adds	r4, #8
 8007f3c:	3110      	adds	r1, #16
 8007f3e:	fb2c 2206 	smlad	r2, ip, r6, r2
 8007f42:	fb23 5306 	smlad	r3, r3, r6, r5
 8007f46:	45a0      	cmp	r8, r4
 8007f48:	d1ec      	bne.n	8007f24 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x154>
 8007f4a:	9905      	ldr	r1, [sp, #20]
 8007f4c:	f10e 0e04 	add.w	lr, lr, #4
 8007f50:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 8007f54:	eb0e 0e8a 	add.w	lr, lr, sl, lsl #2
 8007f58:	9e04      	ldr	r6, [sp, #16]
 8007f5a:	4576      	cmp	r6, lr
 8007f5c:	dd30      	ble.n	8007fc0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1f0>
 8007f5e:	f9b4 1000 	ldrsh.w	r1, [r4]
 8007f62:	8805      	ldrh	r5, [r0, #0]
 8007f64:	fb15 2201 	smlabb	r2, r5, r1, r2
 8007f68:	8845      	ldrh	r5, [r0, #2]
 8007f6a:	fb11 3305 	smlabb	r3, r1, r5, r3
 8007f6e:	f10e 0101 	add.w	r1, lr, #1
 8007f72:	428e      	cmp	r6, r1
 8007f74:	dd1f      	ble.n	8007fb6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1e6>
 8007f76:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8007f7a:	8885      	ldrh	r5, [r0, #4]
 8007f7c:	fb15 2201 	smlabb	r2, r5, r1, r2
 8007f80:	88c5      	ldrh	r5, [r0, #6]
 8007f82:	fb11 3305 	smlabb	r3, r1, r5, r3
 8007f86:	f10e 0102 	add.w	r1, lr, #2
 8007f8a:	428e      	cmp	r6, r1
 8007f8c:	dd13      	ble.n	8007fb6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1e6>
 8007f8e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8007f92:	8905      	ldrh	r5, [r0, #8]
 8007f94:	fb15 2201 	smlabb	r2, r5, r1, r2
 8007f98:	8945      	ldrh	r5, [r0, #10]
 8007f9a:	fb11 3305 	smlabb	r3, r1, r5, r3
 8007f9e:	f10e 0103 	add.w	r1, lr, #3
 8007fa2:	428e      	cmp	r6, r1
 8007fa4:	dd07      	ble.n	8007fb6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1e6>
 8007fa6:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8007faa:	8984      	ldrh	r4, [r0, #12]
 8007fac:	fb14 2201 	smlabb	r2, r4, r1, r2
 8007fb0:	89c4      	ldrh	r4, [r0, #14]
 8007fb2:	fb11 3304 	smlabb	r3, r1, r4, r3
 8007fb6:	9904      	ldr	r1, [sp, #16]
 8007fb8:	eba1 0e0e 	sub.w	lr, r1, lr
 8007fbc:	eb00 008e 	add.w	r0, r0, lr, lsl #2
 8007fc0:	9900      	ldr	r1, [sp, #0]
 8007fc2:	f931 5c04 	ldrsh.w	r5, [r1, #-4]
 8007fc6:	2d15      	cmp	r5, #21
 8007fc8:	f340 80b4 	ble.w	8008134 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x364>
 8007fcc:	9901      	ldr	r1, [sp, #4]
 8007fce:	f85b 6c08 	ldr.w	r6, [fp, #-8]
 8007fd2:	f851 1c08 	ldr.w	r1, [r1, #-8]
 8007fd6:	1eac      	subs	r4, r5, #2
 8007fd8:	f04f 0c01 	mov.w	ip, #1
 8007fdc:	fa0c f404 	lsl.w	r4, ip, r4
 8007fe0:	3d01      	subs	r5, #1
 8007fe2:	fb52 4201 	smmla	r2, r2, r1, r4
 8007fe6:	9c01      	ldr	r4, [sp, #4]
 8007fe8:	9900      	ldr	r1, [sp, #0]
 8007fea:	412a      	asrs	r2, r5
 8007fec:	4432      	add	r2, r6
 8007fee:	f1a4 0e04 	sub.w	lr, r4, #4
 8007ff2:	f1a1 0c02 	sub.w	ip, r1, #2
 8007ff6:	f1ab 0604 	sub.w	r6, fp, #4
 8007ffa:	f302 0207 	ssat	r2, #8, r2
 8007ffe:	9903      	ldr	r1, [sp, #12]
 8008000:	f801 2c01 	strb.w	r2, [r1, #-1]
 8008004:	f9bc 2000 	ldrsh.w	r2, [ip]
 8008008:	2a15      	cmp	r2, #21
 800800a:	f340 80b0 	ble.w	800816e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x39e>
 800800e:	6834      	ldr	r4, [r6, #0]
 8008010:	f8de 1000 	ldr.w	r1, [lr]
 8008014:	1e95      	subs	r5, r2, #2
 8008016:	2601      	movs	r6, #1
 8008018:	3a01      	subs	r2, #1
 800801a:	fa06 f505 	lsl.w	r5, r6, r5
 800801e:	fb53 5501 	smmla	r5, r3, r1, r5
 8008022:	4115      	asrs	r5, r2
 8008024:	4425      	add	r5, r4
 8008026:	f305 0507 	ssat	r5, #8, r5
 800802a:	9b02      	ldr	r3, [sp, #8]
 800802c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008030:	9b00      	ldr	r3, [sp, #0]
 8008032:	9a07      	ldr	r2, [sp, #28]
 8008034:	3304      	adds	r3, #4
 8008036:	9300      	str	r3, [sp, #0]
 8008038:	9b01      	ldr	r3, [sp, #4]
 800803a:	3308      	adds	r3, #8
 800803c:	9301      	str	r3, [sp, #4]
 800803e:	9b02      	ldr	r3, [sp, #8]
 8008040:	4413      	add	r3, r2
 8008042:	9302      	str	r3, [sp, #8]
 8008044:	9b03      	ldr	r3, [sp, #12]
 8008046:	4413      	add	r3, r2
 8008048:	9303      	str	r3, [sp, #12]
 800804a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800804c:	f109 0908 	add.w	r9, r9, #8
 8008050:	4599      	cmp	r9, r3
 8008052:	f10b 0b08 	add.w	fp, fp, #8
 8008056:	f47f af00 	bne.w	8007e5a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x8a>
 800805a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800805c:	4611      	mov	r1, r2
 800805e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8008060:	fb03 2201 	mla	r2, r3, r1, r2
 8008064:	9225      	str	r2, [sp, #148]	; 0x94
 8008066:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008068:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800806c:	920d      	str	r2, [sp, #52]	; 0x34
 800806e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008070:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8008074:	9221      	str	r2, [sp, #132]	; 0x84
 8008076:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008078:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800807c:	9222      	str	r2, [sp, #136]	; 0x88
 800807e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8008080:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008084:	9323      	str	r3, [sp, #140]	; 0x8c
 8008086:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008088:	07db      	lsls	r3, r3, #31
 800808a:	d545      	bpl.n	8008118 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x348>
 800808c:	9a04      	ldr	r2, [sp, #16]
 800808e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008090:	0896      	lsrs	r6, r2, #2
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	d012      	beq.n	80080bc <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2ec>
 8008096:	9906      	ldr	r1, [sp, #24]
 8008098:	00f7      	lsls	r7, r6, #3
 800809a:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800809e:	6804      	ldr	r4, [r0, #0]
 80080a0:	6842      	ldr	r2, [r0, #4]
 80080a2:	680d      	ldr	r5, [r1, #0]
 80080a4:	3008      	adds	r0, #8
 80080a6:	fb24 3305 	smlad	r3, r4, r5, r3
 80080aa:	684c      	ldr	r4, [r1, #4]
 80080ac:	3108      	adds	r1, #8
 80080ae:	fb22 3304 	smlad	r3, r2, r4, r3
 80080b2:	4286      	cmp	r6, r0
 80080b4:	d1f3      	bne.n	800809e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2ce>
 80080b6:	9a06      	ldr	r2, [sp, #24]
 80080b8:	443a      	add	r2, r7
 80080ba:	9206      	str	r2, [sp, #24]
 80080bc:	9a04      	ldr	r2, [sp, #16]
 80080be:	f012 0203 	ands.w	r2, r2, #3
 80080c2:	d011      	beq.n	80080e8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x318>
 80080c4:	9d06      	ldr	r5, [sp, #24]
 80080c6:	8801      	ldrh	r1, [r0, #0]
 80080c8:	882c      	ldrh	r4, [r5, #0]
 80080ca:	3a01      	subs	r2, #1
 80080cc:	b292      	uxth	r2, r2
 80080ce:	fb14 3301 	smlabb	r3, r4, r1, r3
 80080d2:	b14a      	cbz	r2, 80080e8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x318>
 80080d4:	886c      	ldrh	r4, [r5, #2]
 80080d6:	8841      	ldrh	r1, [r0, #2]
 80080d8:	2a01      	cmp	r2, #1
 80080da:	fb14 3301 	smlabb	r3, r4, r1, r3
 80080de:	d003      	beq.n	80080e8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x318>
 80080e0:	8881      	ldrh	r1, [r0, #4]
 80080e2:	88aa      	ldrh	r2, [r5, #4]
 80080e4:	fb11 3302 	smlabb	r3, r1, r2, r3
 80080e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80080ea:	f9b2 2000 	ldrsh.w	r2, [r2]
 80080ee:	2a15      	cmp	r2, #21
 80080f0:	f340 8084 	ble.w	80081fc <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x42c>
 80080f4:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80080f6:	680c      	ldr	r4, [r1, #0]
 80080f8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80080fa:	1e95      	subs	r5, r2, #2
 80080fc:	2001      	movs	r0, #1
 80080fe:	3a01      	subs	r2, #1
 8008100:	6809      	ldr	r1, [r1, #0]
 8008102:	40a8      	lsls	r0, r5
 8008104:	fb53 0301 	smmla	r3, r3, r1, r0
 8008108:	4113      	asrs	r3, r2
 800810a:	4423      	add	r3, r4
 800810c:	f303 0307 	ssat	r3, #8, r3
 8008110:	9825      	ldr	r0, [sp, #148]	; 0x94
 8008112:	f800 3b01 	strb.w	r3, [r0], #1
 8008116:	9025      	str	r0, [sp, #148]	; 0x94
 8008118:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800811a:	2b00      	cmp	r3, #0
 800811c:	d066      	beq.n	80081ec <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x41c>
 800811e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008120:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008122:	fb03 f000 	mul.w	r0, r3, r0
 8008126:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8008128:	f1c0 0001 	rsb	r0, r0, #1
 800812c:	4418      	add	r0, r3
 800812e:	b015      	add	sp, #84	; 0x54
 8008130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008134:	2d00      	cmp	r5, #0
 8008136:	dd29      	ble.n	800818c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3bc>
 8008138:	9e01      	ldr	r6, [sp, #4]
 800813a:	f85b 4c08 	ldr.w	r4, [fp, #-8]
 800813e:	f856 1c08 	ldr.w	r1, [r6, #-8]
 8008142:	0052      	lsls	r2, r2, #1
 8008144:	fb52 4201 	smmla	r2, r2, r1, r4
 8008148:	fa42 f505 	asr.w	r5, r2, r5
 800814c:	9a00      	ldr	r2, [sp, #0]
 800814e:	f1a6 0e04 	sub.w	lr, r6, #4
 8008152:	f1a2 0c02 	sub.w	ip, r2, #2
 8008156:	f1ab 0604 	sub.w	r6, fp, #4
 800815a:	f305 0507 	ssat	r5, #8, r5
 800815e:	9a03      	ldr	r2, [sp, #12]
 8008160:	f802 5c01 	strb.w	r5, [r2, #-1]
 8008164:	f9bc 2000 	ldrsh.w	r2, [ip]
 8008168:	2a15      	cmp	r2, #21
 800816a:	f73f af50 	bgt.w	800800e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x23e>
 800816e:	2a00      	cmp	r2, #0
 8008170:	dd25      	ble.n	80081be <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3ee>
 8008172:	f8de 1000 	ldr.w	r1, [lr]
 8008176:	6834      	ldr	r4, [r6, #0]
 8008178:	005b      	lsls	r3, r3, #1
 800817a:	fb53 4301 	smmla	r3, r3, r1, r4
 800817e:	4113      	asrs	r3, r2
 8008180:	f303 0307 	ssat	r3, #8, r3
 8008184:	9a02      	ldr	r2, [sp, #8]
 8008186:	f802 3c01 	strb.w	r3, [r2, #-1]
 800818a:	e751      	b.n	8008030 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x260>
 800818c:	f1c5 0501 	rsb	r5, r5, #1
 8008190:	40aa      	lsls	r2, r5
 8008192:	f1a1 0c02 	sub.w	ip, r1, #2
 8008196:	f302 021f 	ssat	r2, #32, r2
 800819a:	9901      	ldr	r1, [sp, #4]
 800819c:	f1a1 0e04 	sub.w	lr, r1, #4
 80081a0:	f851 1c08 	ldr.w	r1, [r1, #-8]
 80081a4:	fb52 f111 	smmulr	r1, r2, r1
 80081a8:	f85b 2c08 	ldr.w	r2, [fp, #-8]
 80081ac:	f1ab 0604 	sub.w	r6, fp, #4
 80081b0:	440a      	add	r2, r1
 80081b2:	f302 0207 	ssat	r2, #8, r2
 80081b6:	9903      	ldr	r1, [sp, #12]
 80081b8:	f801 2c01 	strb.w	r2, [r1, #-1]
 80081bc:	e722      	b.n	8008004 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x234>
 80081be:	f1c2 0201 	rsb	r2, r2, #1
 80081c2:	fa03 f202 	lsl.w	r2, r3, r2
 80081c6:	f302 021f 	ssat	r2, #32, r2
 80081ca:	f8de 3000 	ldr.w	r3, [lr]
 80081ce:	fb52 f313 	smmulr	r3, r2, r3
 80081d2:	6832      	ldr	r2, [r6, #0]
 80081d4:	4413      	add	r3, r2
 80081d6:	f303 0307 	ssat	r3, #8, r3
 80081da:	9a02      	ldr	r2, [sp, #8]
 80081dc:	f802 3c01 	strb.w	r3, [r2, #-1]
 80081e0:	e726      	b.n	8008030 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x260>
 80081e2:	f04f 0e00 	mov.w	lr, #0
 80081e6:	e68f      	b.n	8007f08 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x138>
 80081e8:	2401      	movs	r4, #1
 80081ea:	e607      	b.n	8007dfc <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2c>
 80081ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80081f0:	1a98      	subs	r0, r3, r2
 80081f2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80081f4:	4418      	add	r0, r3
 80081f6:	b015      	add	sp, #84	; 0x54
 80081f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081fc:	2a00      	cmp	r2, #0
 80081fe:	dd0e      	ble.n	800821e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x44e>
 8008200:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008202:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8008204:	6809      	ldr	r1, [r1, #0]
 8008206:	6800      	ldr	r0, [r0, #0]
 8008208:	005b      	lsls	r3, r3, #1
 800820a:	fb53 0301 	smmla	r3, r3, r1, r0
 800820e:	4113      	asrs	r3, r2
 8008210:	f303 0307 	ssat	r3, #8, r3
 8008214:	9825      	ldr	r0, [sp, #148]	; 0x94
 8008216:	f800 3b01 	strb.w	r3, [r0], #1
 800821a:	9025      	str	r0, [sp, #148]	; 0x94
 800821c:	e77c      	b.n	8008118 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x348>
 800821e:	f1c2 0201 	rsb	r2, r2, #1
 8008222:	4093      	lsls	r3, r2
 8008224:	f303 031f 	ssat	r3, #32, r3
 8008228:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800822a:	6812      	ldr	r2, [r2, #0]
 800822c:	fb53 f312 	smmulr	r3, r3, r2
 8008230:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8008232:	6812      	ldr	r2, [r2, #0]
 8008234:	4413      	add	r3, r2
 8008236:	f303 0307 	ssat	r3, #8, r3
 800823a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800823c:	f802 3b01 	strb.w	r3, [r2], #1
 8008240:	9225      	str	r2, [sp, #148]	; 0x94
 8008242:	e769      	b.n	8008118 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x348>

08008244 <arm_fill_q15>:
 8008244:	b510      	push	{r4, lr}
 8008246:	eac0 4400 	pkhbt	r4, r0, r0, lsl #16
 800824a:	ea5f 0e92 	movs.w	lr, r2, lsr #2
 800824e:	d013      	beq.n	8008278 <arm_fill_q15+0x34>
 8008250:	f10e 33ff 	add.w	r3, lr, #4294967295
 8008254:	2b09      	cmp	r3, #9
 8008256:	460b      	mov	r3, r1
 8008258:	d919      	bls.n	800828e <arm_fill_q15+0x4a>
 800825a:	f011 0f07 	tst.w	r1, #7
 800825e:	d116      	bne.n	800828e <arm_fill_q15+0x4a>
 8008260:	f04f 0c00 	mov.w	ip, #0
 8008264:	f10c 0c01 	add.w	ip, ip, #1
 8008268:	45e6      	cmp	lr, ip
 800826a:	e9c3 4400 	strd	r4, r4, [r3]
 800826e:	f103 0308 	add.w	r3, r3, #8
 8008272:	d1f7      	bne.n	8008264 <arm_fill_q15+0x20>
 8008274:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
 8008278:	f012 0203 	ands.w	r2, r2, #3
 800827c:	d006      	beq.n	800828c <arm_fill_q15+0x48>
 800827e:	3a01      	subs	r2, #1
 8008280:	8008      	strh	r0, [r1, #0]
 8008282:	d003      	beq.n	800828c <arm_fill_q15+0x48>
 8008284:	2a01      	cmp	r2, #1
 8008286:	8048      	strh	r0, [r1, #2]
 8008288:	bf18      	it	ne
 800828a:	8088      	strhne	r0, [r1, #4]
 800828c:	bd10      	pop	{r4, pc}
 800828e:	46f4      	mov	ip, lr
 8008290:	f1bc 0c01 	subs.w	ip, ip, #1
 8008294:	601c      	str	r4, [r3, #0]
 8008296:	605c      	str	r4, [r3, #4]
 8008298:	f103 0308 	add.w	r3, r3, #8
 800829c:	d1f8      	bne.n	8008290 <arm_fill_q15+0x4c>
 800829e:	e7e9      	b.n	8008274 <arm_fill_q15+0x30>

080082a0 <ai_array_to_buffer_fmt>:
 80082a0:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80082a4:	2b02      	cmp	r3, #2
 80082a6:	d050      	beq.n	800834a <ai_array_to_buffer_fmt+0xaa>
 80082a8:	4b2a      	ldr	r3, [pc, #168]	; (8008354 <ai_array_to_buffer_fmt+0xb4>)
 80082aa:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d00b      	beq.n	80082ca <ai_array_to_buffer_fmt+0x2a>
 80082b2:	dc1c      	bgt.n	80082ee <ai_array_to_buffer_fmt+0x4e>
 80082b4:	4b28      	ldr	r3, [pc, #160]	; (8008358 <ai_array_to_buffer_fmt+0xb8>)
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d007      	beq.n	80082ca <ai_array_to_buffer_fmt+0x2a>
 80082ba:	dd0b      	ble.n	80082d4 <ai_array_to_buffer_fmt+0x34>
 80082bc:	4b27      	ldr	r3, [pc, #156]	; (800835c <ai_array_to_buffer_fmt+0xbc>)
 80082be:	429a      	cmp	r2, r3
 80082c0:	d003      	beq.n	80082ca <ai_array_to_buffer_fmt+0x2a>
 80082c2:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d131      	bne.n	800832e <ai_array_to_buffer_fmt+0x8e>
 80082ca:	4613      	mov	r3, r2
 80082cc:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80082d0:	4318      	orrs	r0, r3
 80082d2:	4770      	bx	lr
 80082d4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80082d8:	429a      	cmp	r2, r3
 80082da:	d0f6      	beq.n	80082ca <ai_array_to_buffer_fmt+0x2a>
 80082dc:	dd2c      	ble.n	8008338 <ai_array_to_buffer_fmt+0x98>
 80082de:	4b20      	ldr	r3, [pc, #128]	; (8008360 <ai_array_to_buffer_fmt+0xc0>)
 80082e0:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80082e4:	429a      	cmp	r2, r3
 80082e6:	bf18      	it	ne
 80082e8:	2340      	movne	r3, #64	; 0x40
 80082ea:	4318      	orrs	r0, r3
 80082ec:	4770      	bx	lr
 80082ee:	4b1d      	ldr	r3, [pc, #116]	; (8008364 <ai_array_to_buffer_fmt+0xc4>)
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d0ea      	beq.n	80082ca <ai_array_to_buffer_fmt+0x2a>
 80082f4:	dd0e      	ble.n	8008314 <ai_array_to_buffer_fmt+0x74>
 80082f6:	4b1c      	ldr	r3, [pc, #112]	; (8008368 <ai_array_to_buffer_fmt+0xc8>)
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d0e6      	beq.n	80082ca <ai_array_to_buffer_fmt+0x2a>
 80082fc:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8008300:	429a      	cmp	r2, r3
 8008302:	d0e2      	beq.n	80082ca <ai_array_to_buffer_fmt+0x2a>
 8008304:	4b19      	ldr	r3, [pc, #100]	; (800836c <ai_array_to_buffer_fmt+0xcc>)
 8008306:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800830a:	429a      	cmp	r2, r3
 800830c:	bf18      	it	ne
 800830e:	2340      	movne	r3, #64	; 0x40
 8008310:	4318      	orrs	r0, r3
 8008312:	4770      	bx	lr
 8008314:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8008318:	429a      	cmp	r2, r3
 800831a:	d0d6      	beq.n	80082ca <ai_array_to_buffer_fmt+0x2a>
 800831c:	3307      	adds	r3, #7
 800831e:	429a      	cmp	r2, r3
 8008320:	d0d3      	beq.n	80082ca <ai_array_to_buffer_fmt+0x2a>
 8008322:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 8008326:	429a      	cmp	r2, r3
 8008328:	bf18      	it	ne
 800832a:	2340      	movne	r3, #64	; 0x40
 800832c:	e7ce      	b.n	80082cc <ai_array_to_buffer_fmt+0x2c>
 800832e:	4b10      	ldr	r3, [pc, #64]	; (8008370 <ai_array_to_buffer_fmt+0xd0>)
 8008330:	429a      	cmp	r2, r3
 8008332:	bf18      	it	ne
 8008334:	2340      	movne	r3, #64	; 0x40
 8008336:	e7c9      	b.n	80082cc <ai_array_to_buffer_fmt+0x2c>
 8008338:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800833c:	429a      	cmp	r2, r3
 800833e:	d0c4      	beq.n	80082ca <ai_array_to_buffer_fmt+0x2a>
 8008340:	3380      	adds	r3, #128	; 0x80
 8008342:	429a      	cmp	r2, r3
 8008344:	bf18      	it	ne
 8008346:	2340      	movne	r3, #64	; 0x40
 8008348:	e7c0      	b.n	80082cc <ai_array_to_buffer_fmt+0x2c>
 800834a:	4b0a      	ldr	r3, [pc, #40]	; (8008374 <ai_array_to_buffer_fmt+0xd4>)
 800834c:	4003      	ands	r3, r0
 800834e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008352:	e7bb      	b.n	80082cc <ai_array_to_buffer_fmt+0x2c>
 8008354:	00840040 	.word	0x00840040
 8008358:	00040840 	.word	0x00040840
 800835c:	00041040 	.word	0x00041040
 8008360:	00040447 	.word	0x00040447
 8008364:	00840840 	.word	0x00840840
 8008368:	00841040 	.word	0x00841040
 800836c:	0084084f 	.word	0x0084084f
 8008370:	0004084f 	.word	0x0004084f
 8008374:	00803fff 	.word	0x00803fff

08008378 <ai_array_get_byte_size>:
 8008378:	b319      	cbz	r1, 80083c2 <ai_array_get_byte_size+0x4a>
 800837a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800837e:	fb03 f101 	mul.w	r1, r3, r1
 8008382:	3107      	adds	r1, #7
 8008384:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8008388:	f021 0307 	bic.w	r3, r1, #7
 800838c:	2a04      	cmp	r2, #4
 800838e:	f3c0 5141 	ubfx	r1, r0, #21, #2
 8008392:	fa23 f101 	lsr.w	r1, r3, r1
 8008396:	ea4f 10e0 	mov.w	r0, r0, asr #7
 800839a:	d00b      	beq.n	80083b4 <ai_array_get_byte_size+0x3c>
 800839c:	2a08      	cmp	r2, #8
 800839e:	d002      	beq.n	80083a6 <ai_array_get_byte_size+0x2e>
 80083a0:	3107      	adds	r1, #7
 80083a2:	08c8      	lsrs	r0, r1, #3
 80083a4:	4770      	bx	lr
 80083a6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80083aa:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 80083ae:	3107      	adds	r1, #7
 80083b0:	08c8      	lsrs	r0, r1, #3
 80083b2:	4770      	bx	lr
 80083b4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80083b8:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 80083bc:	3107      	adds	r1, #7
 80083be:	08c8      	lsrs	r0, r1, #3
 80083c0:	4770      	bx	lr
 80083c2:	4608      	mov	r0, r1
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop

080083c8 <ai_array_get_data_byte_size>:
 80083c8:	b169      	cbz	r1, 80083e6 <ai_array_get_data_byte_size+0x1e>
 80083ca:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 80083ce:	fb02 f101 	mul.w	r1, r2, r1
 80083d2:	1dcb      	adds	r3, r1, #7
 80083d4:	f023 0307 	bic.w	r3, r3, #7
 80083d8:	f3c0 5041 	ubfx	r0, r0, #21, #2
 80083dc:	fa23 f000 	lsr.w	r0, r3, r0
 80083e0:	3007      	adds	r0, #7
 80083e2:	08c0      	lsrs	r0, r0, #3
 80083e4:	4770      	bx	lr
 80083e6:	4608      	mov	r0, r1
 80083e8:	4770      	bx	lr
 80083ea:	bf00      	nop

080083ec <ai_version_get>:
 80083ec:	0212      	lsls	r2, r2, #8
 80083ee:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80083f2:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80083f6:	4770      	bx	lr

080083f8 <get_tensor_byte_size>:
 80083f8:	b410      	push	{r4}
 80083fa:	6983      	ldr	r3, [r0, #24]
 80083fc:	68c4      	ldr	r4, [r0, #12]
 80083fe:	6941      	ldr	r1, [r0, #20]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	68e0      	ldr	r0, [r4, #12]
 8008404:	4a07      	ldr	r2, [pc, #28]	; (8008424 <get_tensor_byte_size+0x2c>)
 8008406:	68c9      	ldr	r1, [r1, #12]
 8008408:	f85d 4b04 	ldr.w	r4, [sp], #4
 800840c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8008410:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008414:	fb01 f000 	mul.w	r0, r1, r0
 8008418:	4293      	cmp	r3, r2
 800841a:	bf04      	itt	eq
 800841c:	3007      	addeq	r0, #7
 800841e:	08c0      	lsreq	r0, r0, #3
 8008420:	4770      	bx	lr
 8008422:	bf00      	nop
 8008424:	000400c0 	.word	0x000400c0

08008428 <malloc>:
 8008428:	4b02      	ldr	r3, [pc, #8]	; (8008434 <malloc+0xc>)
 800842a:	4601      	mov	r1, r0
 800842c:	6818      	ldr	r0, [r3, #0]
 800842e:	f000 b823 	b.w	8008478 <_malloc_r>
 8008432:	bf00      	nop
 8008434:	20000738 	.word	0x20000738

08008438 <sbrk_aligned>:
 8008438:	b570      	push	{r4, r5, r6, lr}
 800843a:	4e0e      	ldr	r6, [pc, #56]	; (8008474 <sbrk_aligned+0x3c>)
 800843c:	460c      	mov	r4, r1
 800843e:	6831      	ldr	r1, [r6, #0]
 8008440:	4605      	mov	r5, r0
 8008442:	b911      	cbnz	r1, 800844a <sbrk_aligned+0x12>
 8008444:	f001 f8d4 	bl	80095f0 <_sbrk_r>
 8008448:	6030      	str	r0, [r6, #0]
 800844a:	4621      	mov	r1, r4
 800844c:	4628      	mov	r0, r5
 800844e:	f001 f8cf 	bl	80095f0 <_sbrk_r>
 8008452:	1c43      	adds	r3, r0, #1
 8008454:	d00a      	beq.n	800846c <sbrk_aligned+0x34>
 8008456:	1cc4      	adds	r4, r0, #3
 8008458:	f024 0403 	bic.w	r4, r4, #3
 800845c:	42a0      	cmp	r0, r4
 800845e:	d007      	beq.n	8008470 <sbrk_aligned+0x38>
 8008460:	1a21      	subs	r1, r4, r0
 8008462:	4628      	mov	r0, r5
 8008464:	f001 f8c4 	bl	80095f0 <_sbrk_r>
 8008468:	3001      	adds	r0, #1
 800846a:	d101      	bne.n	8008470 <sbrk_aligned+0x38>
 800846c:	f04f 34ff 	mov.w	r4, #4294967295
 8008470:	4620      	mov	r0, r4
 8008472:	bd70      	pop	{r4, r5, r6, pc}
 8008474:	2000269c 	.word	0x2000269c

08008478 <_malloc_r>:
 8008478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800847c:	1ccd      	adds	r5, r1, #3
 800847e:	f025 0503 	bic.w	r5, r5, #3
 8008482:	3508      	adds	r5, #8
 8008484:	2d0c      	cmp	r5, #12
 8008486:	bf38      	it	cc
 8008488:	250c      	movcc	r5, #12
 800848a:	2d00      	cmp	r5, #0
 800848c:	4607      	mov	r7, r0
 800848e:	db01      	blt.n	8008494 <_malloc_r+0x1c>
 8008490:	42a9      	cmp	r1, r5
 8008492:	d905      	bls.n	80084a0 <_malloc_r+0x28>
 8008494:	230c      	movs	r3, #12
 8008496:	603b      	str	r3, [r7, #0]
 8008498:	2600      	movs	r6, #0
 800849a:	4630      	mov	r0, r6
 800849c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008574 <_malloc_r+0xfc>
 80084a4:	f000 f868 	bl	8008578 <__malloc_lock>
 80084a8:	f8d8 3000 	ldr.w	r3, [r8]
 80084ac:	461c      	mov	r4, r3
 80084ae:	bb5c      	cbnz	r4, 8008508 <_malloc_r+0x90>
 80084b0:	4629      	mov	r1, r5
 80084b2:	4638      	mov	r0, r7
 80084b4:	f7ff ffc0 	bl	8008438 <sbrk_aligned>
 80084b8:	1c43      	adds	r3, r0, #1
 80084ba:	4604      	mov	r4, r0
 80084bc:	d155      	bne.n	800856a <_malloc_r+0xf2>
 80084be:	f8d8 4000 	ldr.w	r4, [r8]
 80084c2:	4626      	mov	r6, r4
 80084c4:	2e00      	cmp	r6, #0
 80084c6:	d145      	bne.n	8008554 <_malloc_r+0xdc>
 80084c8:	2c00      	cmp	r4, #0
 80084ca:	d048      	beq.n	800855e <_malloc_r+0xe6>
 80084cc:	6823      	ldr	r3, [r4, #0]
 80084ce:	4631      	mov	r1, r6
 80084d0:	4638      	mov	r0, r7
 80084d2:	eb04 0903 	add.w	r9, r4, r3
 80084d6:	f001 f88b 	bl	80095f0 <_sbrk_r>
 80084da:	4581      	cmp	r9, r0
 80084dc:	d13f      	bne.n	800855e <_malloc_r+0xe6>
 80084de:	6821      	ldr	r1, [r4, #0]
 80084e0:	1a6d      	subs	r5, r5, r1
 80084e2:	4629      	mov	r1, r5
 80084e4:	4638      	mov	r0, r7
 80084e6:	f7ff ffa7 	bl	8008438 <sbrk_aligned>
 80084ea:	3001      	adds	r0, #1
 80084ec:	d037      	beq.n	800855e <_malloc_r+0xe6>
 80084ee:	6823      	ldr	r3, [r4, #0]
 80084f0:	442b      	add	r3, r5
 80084f2:	6023      	str	r3, [r4, #0]
 80084f4:	f8d8 3000 	ldr.w	r3, [r8]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d038      	beq.n	800856e <_malloc_r+0xf6>
 80084fc:	685a      	ldr	r2, [r3, #4]
 80084fe:	42a2      	cmp	r2, r4
 8008500:	d12b      	bne.n	800855a <_malloc_r+0xe2>
 8008502:	2200      	movs	r2, #0
 8008504:	605a      	str	r2, [r3, #4]
 8008506:	e00f      	b.n	8008528 <_malloc_r+0xb0>
 8008508:	6822      	ldr	r2, [r4, #0]
 800850a:	1b52      	subs	r2, r2, r5
 800850c:	d41f      	bmi.n	800854e <_malloc_r+0xd6>
 800850e:	2a0b      	cmp	r2, #11
 8008510:	d917      	bls.n	8008542 <_malloc_r+0xca>
 8008512:	1961      	adds	r1, r4, r5
 8008514:	42a3      	cmp	r3, r4
 8008516:	6025      	str	r5, [r4, #0]
 8008518:	bf18      	it	ne
 800851a:	6059      	strne	r1, [r3, #4]
 800851c:	6863      	ldr	r3, [r4, #4]
 800851e:	bf08      	it	eq
 8008520:	f8c8 1000 	streq.w	r1, [r8]
 8008524:	5162      	str	r2, [r4, r5]
 8008526:	604b      	str	r3, [r1, #4]
 8008528:	4638      	mov	r0, r7
 800852a:	f104 060b 	add.w	r6, r4, #11
 800852e:	f000 f829 	bl	8008584 <__malloc_unlock>
 8008532:	f026 0607 	bic.w	r6, r6, #7
 8008536:	1d23      	adds	r3, r4, #4
 8008538:	1af2      	subs	r2, r6, r3
 800853a:	d0ae      	beq.n	800849a <_malloc_r+0x22>
 800853c:	1b9b      	subs	r3, r3, r6
 800853e:	50a3      	str	r3, [r4, r2]
 8008540:	e7ab      	b.n	800849a <_malloc_r+0x22>
 8008542:	42a3      	cmp	r3, r4
 8008544:	6862      	ldr	r2, [r4, #4]
 8008546:	d1dd      	bne.n	8008504 <_malloc_r+0x8c>
 8008548:	f8c8 2000 	str.w	r2, [r8]
 800854c:	e7ec      	b.n	8008528 <_malloc_r+0xb0>
 800854e:	4623      	mov	r3, r4
 8008550:	6864      	ldr	r4, [r4, #4]
 8008552:	e7ac      	b.n	80084ae <_malloc_r+0x36>
 8008554:	4634      	mov	r4, r6
 8008556:	6876      	ldr	r6, [r6, #4]
 8008558:	e7b4      	b.n	80084c4 <_malloc_r+0x4c>
 800855a:	4613      	mov	r3, r2
 800855c:	e7cc      	b.n	80084f8 <_malloc_r+0x80>
 800855e:	230c      	movs	r3, #12
 8008560:	603b      	str	r3, [r7, #0]
 8008562:	4638      	mov	r0, r7
 8008564:	f000 f80e 	bl	8008584 <__malloc_unlock>
 8008568:	e797      	b.n	800849a <_malloc_r+0x22>
 800856a:	6025      	str	r5, [r4, #0]
 800856c:	e7dc      	b.n	8008528 <_malloc_r+0xb0>
 800856e:	605b      	str	r3, [r3, #4]
 8008570:	deff      	udf	#255	; 0xff
 8008572:	bf00      	nop
 8008574:	20002698 	.word	0x20002698

08008578 <__malloc_lock>:
 8008578:	4801      	ldr	r0, [pc, #4]	; (8008580 <__malloc_lock+0x8>)
 800857a:	f001 b886 	b.w	800968a <__retarget_lock_acquire_recursive>
 800857e:	bf00      	nop
 8008580:	200027e0 	.word	0x200027e0

08008584 <__malloc_unlock>:
 8008584:	4801      	ldr	r0, [pc, #4]	; (800858c <__malloc_unlock+0x8>)
 8008586:	f001 b881 	b.w	800968c <__retarget_lock_release_recursive>
 800858a:	bf00      	nop
 800858c:	200027e0 	.word	0x200027e0

08008590 <_realloc_r>:
 8008590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008594:	4680      	mov	r8, r0
 8008596:	4614      	mov	r4, r2
 8008598:	460e      	mov	r6, r1
 800859a:	b921      	cbnz	r1, 80085a6 <_realloc_r+0x16>
 800859c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085a0:	4611      	mov	r1, r2
 80085a2:	f7ff bf69 	b.w	8008478 <_malloc_r>
 80085a6:	b92a      	cbnz	r2, 80085b4 <_realloc_r+0x24>
 80085a8:	f001 ff20 	bl	800a3ec <_free_r>
 80085ac:	4625      	mov	r5, r4
 80085ae:	4628      	mov	r0, r5
 80085b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085b4:	f002 fc13 	bl	800adde <_malloc_usable_size_r>
 80085b8:	4284      	cmp	r4, r0
 80085ba:	4607      	mov	r7, r0
 80085bc:	d802      	bhi.n	80085c4 <_realloc_r+0x34>
 80085be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80085c2:	d812      	bhi.n	80085ea <_realloc_r+0x5a>
 80085c4:	4621      	mov	r1, r4
 80085c6:	4640      	mov	r0, r8
 80085c8:	f7ff ff56 	bl	8008478 <_malloc_r>
 80085cc:	4605      	mov	r5, r0
 80085ce:	2800      	cmp	r0, #0
 80085d0:	d0ed      	beq.n	80085ae <_realloc_r+0x1e>
 80085d2:	42bc      	cmp	r4, r7
 80085d4:	4622      	mov	r2, r4
 80085d6:	4631      	mov	r1, r6
 80085d8:	bf28      	it	cs
 80085da:	463a      	movcs	r2, r7
 80085dc:	f001 f857 	bl	800968e <memcpy>
 80085e0:	4631      	mov	r1, r6
 80085e2:	4640      	mov	r0, r8
 80085e4:	f001 ff02 	bl	800a3ec <_free_r>
 80085e8:	e7e1      	b.n	80085ae <_realloc_r+0x1e>
 80085ea:	4635      	mov	r5, r6
 80085ec:	e7df      	b.n	80085ae <_realloc_r+0x1e>

080085ee <__cvt>:
 80085ee:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085f2:	ec55 4b10 	vmov	r4, r5, d0
 80085f6:	2d00      	cmp	r5, #0
 80085f8:	460e      	mov	r6, r1
 80085fa:	4619      	mov	r1, r3
 80085fc:	462b      	mov	r3, r5
 80085fe:	bfbb      	ittet	lt
 8008600:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008604:	461d      	movlt	r5, r3
 8008606:	2300      	movge	r3, #0
 8008608:	232d      	movlt	r3, #45	; 0x2d
 800860a:	700b      	strb	r3, [r1, #0]
 800860c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800860e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008612:	4691      	mov	r9, r2
 8008614:	f023 0820 	bic.w	r8, r3, #32
 8008618:	bfbc      	itt	lt
 800861a:	4622      	movlt	r2, r4
 800861c:	4614      	movlt	r4, r2
 800861e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008622:	d005      	beq.n	8008630 <__cvt+0x42>
 8008624:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008628:	d100      	bne.n	800862c <__cvt+0x3e>
 800862a:	3601      	adds	r6, #1
 800862c:	2102      	movs	r1, #2
 800862e:	e000      	b.n	8008632 <__cvt+0x44>
 8008630:	2103      	movs	r1, #3
 8008632:	ab03      	add	r3, sp, #12
 8008634:	9301      	str	r3, [sp, #4]
 8008636:	ab02      	add	r3, sp, #8
 8008638:	9300      	str	r3, [sp, #0]
 800863a:	ec45 4b10 	vmov	d0, r4, r5
 800863e:	4653      	mov	r3, sl
 8008640:	4632      	mov	r2, r6
 8008642:	f001 f8e1 	bl	8009808 <_dtoa_r>
 8008646:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800864a:	4607      	mov	r7, r0
 800864c:	d102      	bne.n	8008654 <__cvt+0x66>
 800864e:	f019 0f01 	tst.w	r9, #1
 8008652:	d022      	beq.n	800869a <__cvt+0xac>
 8008654:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008658:	eb07 0906 	add.w	r9, r7, r6
 800865c:	d110      	bne.n	8008680 <__cvt+0x92>
 800865e:	783b      	ldrb	r3, [r7, #0]
 8008660:	2b30      	cmp	r3, #48	; 0x30
 8008662:	d10a      	bne.n	800867a <__cvt+0x8c>
 8008664:	2200      	movs	r2, #0
 8008666:	2300      	movs	r3, #0
 8008668:	4620      	mov	r0, r4
 800866a:	4629      	mov	r1, r5
 800866c:	f7f8 fa2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008670:	b918      	cbnz	r0, 800867a <__cvt+0x8c>
 8008672:	f1c6 0601 	rsb	r6, r6, #1
 8008676:	f8ca 6000 	str.w	r6, [sl]
 800867a:	f8da 3000 	ldr.w	r3, [sl]
 800867e:	4499      	add	r9, r3
 8008680:	2200      	movs	r2, #0
 8008682:	2300      	movs	r3, #0
 8008684:	4620      	mov	r0, r4
 8008686:	4629      	mov	r1, r5
 8008688:	f7f8 fa1e 	bl	8000ac8 <__aeabi_dcmpeq>
 800868c:	b108      	cbz	r0, 8008692 <__cvt+0xa4>
 800868e:	f8cd 900c 	str.w	r9, [sp, #12]
 8008692:	2230      	movs	r2, #48	; 0x30
 8008694:	9b03      	ldr	r3, [sp, #12]
 8008696:	454b      	cmp	r3, r9
 8008698:	d307      	bcc.n	80086aa <__cvt+0xbc>
 800869a:	9b03      	ldr	r3, [sp, #12]
 800869c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800869e:	1bdb      	subs	r3, r3, r7
 80086a0:	4638      	mov	r0, r7
 80086a2:	6013      	str	r3, [r2, #0]
 80086a4:	b004      	add	sp, #16
 80086a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086aa:	1c59      	adds	r1, r3, #1
 80086ac:	9103      	str	r1, [sp, #12]
 80086ae:	701a      	strb	r2, [r3, #0]
 80086b0:	e7f0      	b.n	8008694 <__cvt+0xa6>

080086b2 <__exponent>:
 80086b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086b4:	4603      	mov	r3, r0
 80086b6:	2900      	cmp	r1, #0
 80086b8:	bfb8      	it	lt
 80086ba:	4249      	neglt	r1, r1
 80086bc:	f803 2b02 	strb.w	r2, [r3], #2
 80086c0:	bfb4      	ite	lt
 80086c2:	222d      	movlt	r2, #45	; 0x2d
 80086c4:	222b      	movge	r2, #43	; 0x2b
 80086c6:	2909      	cmp	r1, #9
 80086c8:	7042      	strb	r2, [r0, #1]
 80086ca:	dd2a      	ble.n	8008722 <__exponent+0x70>
 80086cc:	f10d 0207 	add.w	r2, sp, #7
 80086d0:	4617      	mov	r7, r2
 80086d2:	260a      	movs	r6, #10
 80086d4:	4694      	mov	ip, r2
 80086d6:	fb91 f5f6 	sdiv	r5, r1, r6
 80086da:	fb06 1415 	mls	r4, r6, r5, r1
 80086de:	3430      	adds	r4, #48	; 0x30
 80086e0:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80086e4:	460c      	mov	r4, r1
 80086e6:	2c63      	cmp	r4, #99	; 0x63
 80086e8:	f102 32ff 	add.w	r2, r2, #4294967295
 80086ec:	4629      	mov	r1, r5
 80086ee:	dcf1      	bgt.n	80086d4 <__exponent+0x22>
 80086f0:	3130      	adds	r1, #48	; 0x30
 80086f2:	f1ac 0402 	sub.w	r4, ip, #2
 80086f6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80086fa:	1c41      	adds	r1, r0, #1
 80086fc:	4622      	mov	r2, r4
 80086fe:	42ba      	cmp	r2, r7
 8008700:	d30a      	bcc.n	8008718 <__exponent+0x66>
 8008702:	f10d 0209 	add.w	r2, sp, #9
 8008706:	eba2 020c 	sub.w	r2, r2, ip
 800870a:	42bc      	cmp	r4, r7
 800870c:	bf88      	it	hi
 800870e:	2200      	movhi	r2, #0
 8008710:	4413      	add	r3, r2
 8008712:	1a18      	subs	r0, r3, r0
 8008714:	b003      	add	sp, #12
 8008716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008718:	f812 5b01 	ldrb.w	r5, [r2], #1
 800871c:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008720:	e7ed      	b.n	80086fe <__exponent+0x4c>
 8008722:	2330      	movs	r3, #48	; 0x30
 8008724:	3130      	adds	r1, #48	; 0x30
 8008726:	7083      	strb	r3, [r0, #2]
 8008728:	70c1      	strb	r1, [r0, #3]
 800872a:	1d03      	adds	r3, r0, #4
 800872c:	e7f1      	b.n	8008712 <__exponent+0x60>
	...

08008730 <_printf_float>:
 8008730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008734:	ed2d 8b02 	vpush	{d8}
 8008738:	b08d      	sub	sp, #52	; 0x34
 800873a:	460c      	mov	r4, r1
 800873c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008740:	4616      	mov	r6, r2
 8008742:	461f      	mov	r7, r3
 8008744:	4605      	mov	r5, r0
 8008746:	f000 ff1b 	bl	8009580 <_localeconv_r>
 800874a:	f8d0 a000 	ldr.w	sl, [r0]
 800874e:	4650      	mov	r0, sl
 8008750:	f7f7 fd8e 	bl	8000270 <strlen>
 8008754:	2300      	movs	r3, #0
 8008756:	930a      	str	r3, [sp, #40]	; 0x28
 8008758:	6823      	ldr	r3, [r4, #0]
 800875a:	9305      	str	r3, [sp, #20]
 800875c:	f8d8 3000 	ldr.w	r3, [r8]
 8008760:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008764:	3307      	adds	r3, #7
 8008766:	f023 0307 	bic.w	r3, r3, #7
 800876a:	f103 0208 	add.w	r2, r3, #8
 800876e:	f8c8 2000 	str.w	r2, [r8]
 8008772:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008776:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800877a:	9307      	str	r3, [sp, #28]
 800877c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008780:	ee08 0a10 	vmov	s16, r0
 8008784:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008788:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800878c:	4b9e      	ldr	r3, [pc, #632]	; (8008a08 <_printf_float+0x2d8>)
 800878e:	f04f 32ff 	mov.w	r2, #4294967295
 8008792:	f7f8 f9cb 	bl	8000b2c <__aeabi_dcmpun>
 8008796:	bb88      	cbnz	r0, 80087fc <_printf_float+0xcc>
 8008798:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800879c:	4b9a      	ldr	r3, [pc, #616]	; (8008a08 <_printf_float+0x2d8>)
 800879e:	f04f 32ff 	mov.w	r2, #4294967295
 80087a2:	f7f8 f9a5 	bl	8000af0 <__aeabi_dcmple>
 80087a6:	bb48      	cbnz	r0, 80087fc <_printf_float+0xcc>
 80087a8:	2200      	movs	r2, #0
 80087aa:	2300      	movs	r3, #0
 80087ac:	4640      	mov	r0, r8
 80087ae:	4649      	mov	r1, r9
 80087b0:	f7f8 f994 	bl	8000adc <__aeabi_dcmplt>
 80087b4:	b110      	cbz	r0, 80087bc <_printf_float+0x8c>
 80087b6:	232d      	movs	r3, #45	; 0x2d
 80087b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087bc:	4a93      	ldr	r2, [pc, #588]	; (8008a0c <_printf_float+0x2dc>)
 80087be:	4b94      	ldr	r3, [pc, #592]	; (8008a10 <_printf_float+0x2e0>)
 80087c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80087c4:	bf94      	ite	ls
 80087c6:	4690      	movls	r8, r2
 80087c8:	4698      	movhi	r8, r3
 80087ca:	2303      	movs	r3, #3
 80087cc:	6123      	str	r3, [r4, #16]
 80087ce:	9b05      	ldr	r3, [sp, #20]
 80087d0:	f023 0304 	bic.w	r3, r3, #4
 80087d4:	6023      	str	r3, [r4, #0]
 80087d6:	f04f 0900 	mov.w	r9, #0
 80087da:	9700      	str	r7, [sp, #0]
 80087dc:	4633      	mov	r3, r6
 80087de:	aa0b      	add	r2, sp, #44	; 0x2c
 80087e0:	4621      	mov	r1, r4
 80087e2:	4628      	mov	r0, r5
 80087e4:	f000 f9da 	bl	8008b9c <_printf_common>
 80087e8:	3001      	adds	r0, #1
 80087ea:	f040 8090 	bne.w	800890e <_printf_float+0x1de>
 80087ee:	f04f 30ff 	mov.w	r0, #4294967295
 80087f2:	b00d      	add	sp, #52	; 0x34
 80087f4:	ecbd 8b02 	vpop	{d8}
 80087f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087fc:	4642      	mov	r2, r8
 80087fe:	464b      	mov	r3, r9
 8008800:	4640      	mov	r0, r8
 8008802:	4649      	mov	r1, r9
 8008804:	f7f8 f992 	bl	8000b2c <__aeabi_dcmpun>
 8008808:	b140      	cbz	r0, 800881c <_printf_float+0xec>
 800880a:	464b      	mov	r3, r9
 800880c:	2b00      	cmp	r3, #0
 800880e:	bfbc      	itt	lt
 8008810:	232d      	movlt	r3, #45	; 0x2d
 8008812:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008816:	4a7f      	ldr	r2, [pc, #508]	; (8008a14 <_printf_float+0x2e4>)
 8008818:	4b7f      	ldr	r3, [pc, #508]	; (8008a18 <_printf_float+0x2e8>)
 800881a:	e7d1      	b.n	80087c0 <_printf_float+0x90>
 800881c:	6863      	ldr	r3, [r4, #4]
 800881e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008822:	9206      	str	r2, [sp, #24]
 8008824:	1c5a      	adds	r2, r3, #1
 8008826:	d13f      	bne.n	80088a8 <_printf_float+0x178>
 8008828:	2306      	movs	r3, #6
 800882a:	6063      	str	r3, [r4, #4]
 800882c:	9b05      	ldr	r3, [sp, #20]
 800882e:	6861      	ldr	r1, [r4, #4]
 8008830:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008834:	2300      	movs	r3, #0
 8008836:	9303      	str	r3, [sp, #12]
 8008838:	ab0a      	add	r3, sp, #40	; 0x28
 800883a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800883e:	ab09      	add	r3, sp, #36	; 0x24
 8008840:	ec49 8b10 	vmov	d0, r8, r9
 8008844:	9300      	str	r3, [sp, #0]
 8008846:	6022      	str	r2, [r4, #0]
 8008848:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800884c:	4628      	mov	r0, r5
 800884e:	f7ff fece 	bl	80085ee <__cvt>
 8008852:	9b06      	ldr	r3, [sp, #24]
 8008854:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008856:	2b47      	cmp	r3, #71	; 0x47
 8008858:	4680      	mov	r8, r0
 800885a:	d108      	bne.n	800886e <_printf_float+0x13e>
 800885c:	1cc8      	adds	r0, r1, #3
 800885e:	db02      	blt.n	8008866 <_printf_float+0x136>
 8008860:	6863      	ldr	r3, [r4, #4]
 8008862:	4299      	cmp	r1, r3
 8008864:	dd41      	ble.n	80088ea <_printf_float+0x1ba>
 8008866:	f1ab 0302 	sub.w	r3, fp, #2
 800886a:	fa5f fb83 	uxtb.w	fp, r3
 800886e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008872:	d820      	bhi.n	80088b6 <_printf_float+0x186>
 8008874:	3901      	subs	r1, #1
 8008876:	465a      	mov	r2, fp
 8008878:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800887c:	9109      	str	r1, [sp, #36]	; 0x24
 800887e:	f7ff ff18 	bl	80086b2 <__exponent>
 8008882:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008884:	1813      	adds	r3, r2, r0
 8008886:	2a01      	cmp	r2, #1
 8008888:	4681      	mov	r9, r0
 800888a:	6123      	str	r3, [r4, #16]
 800888c:	dc02      	bgt.n	8008894 <_printf_float+0x164>
 800888e:	6822      	ldr	r2, [r4, #0]
 8008890:	07d2      	lsls	r2, r2, #31
 8008892:	d501      	bpl.n	8008898 <_printf_float+0x168>
 8008894:	3301      	adds	r3, #1
 8008896:	6123      	str	r3, [r4, #16]
 8008898:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800889c:	2b00      	cmp	r3, #0
 800889e:	d09c      	beq.n	80087da <_printf_float+0xaa>
 80088a0:	232d      	movs	r3, #45	; 0x2d
 80088a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088a6:	e798      	b.n	80087da <_printf_float+0xaa>
 80088a8:	9a06      	ldr	r2, [sp, #24]
 80088aa:	2a47      	cmp	r2, #71	; 0x47
 80088ac:	d1be      	bne.n	800882c <_printf_float+0xfc>
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d1bc      	bne.n	800882c <_printf_float+0xfc>
 80088b2:	2301      	movs	r3, #1
 80088b4:	e7b9      	b.n	800882a <_printf_float+0xfa>
 80088b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80088ba:	d118      	bne.n	80088ee <_printf_float+0x1be>
 80088bc:	2900      	cmp	r1, #0
 80088be:	6863      	ldr	r3, [r4, #4]
 80088c0:	dd0b      	ble.n	80088da <_printf_float+0x1aa>
 80088c2:	6121      	str	r1, [r4, #16]
 80088c4:	b913      	cbnz	r3, 80088cc <_printf_float+0x19c>
 80088c6:	6822      	ldr	r2, [r4, #0]
 80088c8:	07d0      	lsls	r0, r2, #31
 80088ca:	d502      	bpl.n	80088d2 <_printf_float+0x1a2>
 80088cc:	3301      	adds	r3, #1
 80088ce:	440b      	add	r3, r1
 80088d0:	6123      	str	r3, [r4, #16]
 80088d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80088d4:	f04f 0900 	mov.w	r9, #0
 80088d8:	e7de      	b.n	8008898 <_printf_float+0x168>
 80088da:	b913      	cbnz	r3, 80088e2 <_printf_float+0x1b2>
 80088dc:	6822      	ldr	r2, [r4, #0]
 80088de:	07d2      	lsls	r2, r2, #31
 80088e0:	d501      	bpl.n	80088e6 <_printf_float+0x1b6>
 80088e2:	3302      	adds	r3, #2
 80088e4:	e7f4      	b.n	80088d0 <_printf_float+0x1a0>
 80088e6:	2301      	movs	r3, #1
 80088e8:	e7f2      	b.n	80088d0 <_printf_float+0x1a0>
 80088ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80088ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088f0:	4299      	cmp	r1, r3
 80088f2:	db05      	blt.n	8008900 <_printf_float+0x1d0>
 80088f4:	6823      	ldr	r3, [r4, #0]
 80088f6:	6121      	str	r1, [r4, #16]
 80088f8:	07d8      	lsls	r0, r3, #31
 80088fa:	d5ea      	bpl.n	80088d2 <_printf_float+0x1a2>
 80088fc:	1c4b      	adds	r3, r1, #1
 80088fe:	e7e7      	b.n	80088d0 <_printf_float+0x1a0>
 8008900:	2900      	cmp	r1, #0
 8008902:	bfd4      	ite	le
 8008904:	f1c1 0202 	rsble	r2, r1, #2
 8008908:	2201      	movgt	r2, #1
 800890a:	4413      	add	r3, r2
 800890c:	e7e0      	b.n	80088d0 <_printf_float+0x1a0>
 800890e:	6823      	ldr	r3, [r4, #0]
 8008910:	055a      	lsls	r2, r3, #21
 8008912:	d407      	bmi.n	8008924 <_printf_float+0x1f4>
 8008914:	6923      	ldr	r3, [r4, #16]
 8008916:	4642      	mov	r2, r8
 8008918:	4631      	mov	r1, r6
 800891a:	4628      	mov	r0, r5
 800891c:	47b8      	blx	r7
 800891e:	3001      	adds	r0, #1
 8008920:	d12c      	bne.n	800897c <_printf_float+0x24c>
 8008922:	e764      	b.n	80087ee <_printf_float+0xbe>
 8008924:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008928:	f240 80e0 	bls.w	8008aec <_printf_float+0x3bc>
 800892c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008930:	2200      	movs	r2, #0
 8008932:	2300      	movs	r3, #0
 8008934:	f7f8 f8c8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008938:	2800      	cmp	r0, #0
 800893a:	d034      	beq.n	80089a6 <_printf_float+0x276>
 800893c:	4a37      	ldr	r2, [pc, #220]	; (8008a1c <_printf_float+0x2ec>)
 800893e:	2301      	movs	r3, #1
 8008940:	4631      	mov	r1, r6
 8008942:	4628      	mov	r0, r5
 8008944:	47b8      	blx	r7
 8008946:	3001      	adds	r0, #1
 8008948:	f43f af51 	beq.w	80087ee <_printf_float+0xbe>
 800894c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008950:	429a      	cmp	r2, r3
 8008952:	db02      	blt.n	800895a <_printf_float+0x22a>
 8008954:	6823      	ldr	r3, [r4, #0]
 8008956:	07d8      	lsls	r0, r3, #31
 8008958:	d510      	bpl.n	800897c <_printf_float+0x24c>
 800895a:	ee18 3a10 	vmov	r3, s16
 800895e:	4652      	mov	r2, sl
 8008960:	4631      	mov	r1, r6
 8008962:	4628      	mov	r0, r5
 8008964:	47b8      	blx	r7
 8008966:	3001      	adds	r0, #1
 8008968:	f43f af41 	beq.w	80087ee <_printf_float+0xbe>
 800896c:	f04f 0800 	mov.w	r8, #0
 8008970:	f104 091a 	add.w	r9, r4, #26
 8008974:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008976:	3b01      	subs	r3, #1
 8008978:	4543      	cmp	r3, r8
 800897a:	dc09      	bgt.n	8008990 <_printf_float+0x260>
 800897c:	6823      	ldr	r3, [r4, #0]
 800897e:	079b      	lsls	r3, r3, #30
 8008980:	f100 8107 	bmi.w	8008b92 <_printf_float+0x462>
 8008984:	68e0      	ldr	r0, [r4, #12]
 8008986:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008988:	4298      	cmp	r0, r3
 800898a:	bfb8      	it	lt
 800898c:	4618      	movlt	r0, r3
 800898e:	e730      	b.n	80087f2 <_printf_float+0xc2>
 8008990:	2301      	movs	r3, #1
 8008992:	464a      	mov	r2, r9
 8008994:	4631      	mov	r1, r6
 8008996:	4628      	mov	r0, r5
 8008998:	47b8      	blx	r7
 800899a:	3001      	adds	r0, #1
 800899c:	f43f af27 	beq.w	80087ee <_printf_float+0xbe>
 80089a0:	f108 0801 	add.w	r8, r8, #1
 80089a4:	e7e6      	b.n	8008974 <_printf_float+0x244>
 80089a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	dc39      	bgt.n	8008a20 <_printf_float+0x2f0>
 80089ac:	4a1b      	ldr	r2, [pc, #108]	; (8008a1c <_printf_float+0x2ec>)
 80089ae:	2301      	movs	r3, #1
 80089b0:	4631      	mov	r1, r6
 80089b2:	4628      	mov	r0, r5
 80089b4:	47b8      	blx	r7
 80089b6:	3001      	adds	r0, #1
 80089b8:	f43f af19 	beq.w	80087ee <_printf_float+0xbe>
 80089bc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80089c0:	4313      	orrs	r3, r2
 80089c2:	d102      	bne.n	80089ca <_printf_float+0x29a>
 80089c4:	6823      	ldr	r3, [r4, #0]
 80089c6:	07d9      	lsls	r1, r3, #31
 80089c8:	d5d8      	bpl.n	800897c <_printf_float+0x24c>
 80089ca:	ee18 3a10 	vmov	r3, s16
 80089ce:	4652      	mov	r2, sl
 80089d0:	4631      	mov	r1, r6
 80089d2:	4628      	mov	r0, r5
 80089d4:	47b8      	blx	r7
 80089d6:	3001      	adds	r0, #1
 80089d8:	f43f af09 	beq.w	80087ee <_printf_float+0xbe>
 80089dc:	f04f 0900 	mov.w	r9, #0
 80089e0:	f104 0a1a 	add.w	sl, r4, #26
 80089e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089e6:	425b      	negs	r3, r3
 80089e8:	454b      	cmp	r3, r9
 80089ea:	dc01      	bgt.n	80089f0 <_printf_float+0x2c0>
 80089ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089ee:	e792      	b.n	8008916 <_printf_float+0x1e6>
 80089f0:	2301      	movs	r3, #1
 80089f2:	4652      	mov	r2, sl
 80089f4:	4631      	mov	r1, r6
 80089f6:	4628      	mov	r0, r5
 80089f8:	47b8      	blx	r7
 80089fa:	3001      	adds	r0, #1
 80089fc:	f43f aef7 	beq.w	80087ee <_printf_float+0xbe>
 8008a00:	f109 0901 	add.w	r9, r9, #1
 8008a04:	e7ee      	b.n	80089e4 <_printf_float+0x2b4>
 8008a06:	bf00      	nop
 8008a08:	7fefffff 	.word	0x7fefffff
 8008a0c:	0800dd38 	.word	0x0800dd38
 8008a10:	0800dd3c 	.word	0x0800dd3c
 8008a14:	0800dd40 	.word	0x0800dd40
 8008a18:	0800dd44 	.word	0x0800dd44
 8008a1c:	0800e110 	.word	0x0800e110
 8008a20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a24:	429a      	cmp	r2, r3
 8008a26:	bfa8      	it	ge
 8008a28:	461a      	movge	r2, r3
 8008a2a:	2a00      	cmp	r2, #0
 8008a2c:	4691      	mov	r9, r2
 8008a2e:	dc37      	bgt.n	8008aa0 <_printf_float+0x370>
 8008a30:	f04f 0b00 	mov.w	fp, #0
 8008a34:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a38:	f104 021a 	add.w	r2, r4, #26
 8008a3c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a3e:	9305      	str	r3, [sp, #20]
 8008a40:	eba3 0309 	sub.w	r3, r3, r9
 8008a44:	455b      	cmp	r3, fp
 8008a46:	dc33      	bgt.n	8008ab0 <_printf_float+0x380>
 8008a48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	db3b      	blt.n	8008ac8 <_printf_float+0x398>
 8008a50:	6823      	ldr	r3, [r4, #0]
 8008a52:	07da      	lsls	r2, r3, #31
 8008a54:	d438      	bmi.n	8008ac8 <_printf_float+0x398>
 8008a56:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008a5a:	eba2 0903 	sub.w	r9, r2, r3
 8008a5e:	9b05      	ldr	r3, [sp, #20]
 8008a60:	1ad2      	subs	r2, r2, r3
 8008a62:	4591      	cmp	r9, r2
 8008a64:	bfa8      	it	ge
 8008a66:	4691      	movge	r9, r2
 8008a68:	f1b9 0f00 	cmp.w	r9, #0
 8008a6c:	dc35      	bgt.n	8008ada <_printf_float+0x3aa>
 8008a6e:	f04f 0800 	mov.w	r8, #0
 8008a72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a76:	f104 0a1a 	add.w	sl, r4, #26
 8008a7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a7e:	1a9b      	subs	r3, r3, r2
 8008a80:	eba3 0309 	sub.w	r3, r3, r9
 8008a84:	4543      	cmp	r3, r8
 8008a86:	f77f af79 	ble.w	800897c <_printf_float+0x24c>
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	4652      	mov	r2, sl
 8008a8e:	4631      	mov	r1, r6
 8008a90:	4628      	mov	r0, r5
 8008a92:	47b8      	blx	r7
 8008a94:	3001      	adds	r0, #1
 8008a96:	f43f aeaa 	beq.w	80087ee <_printf_float+0xbe>
 8008a9a:	f108 0801 	add.w	r8, r8, #1
 8008a9e:	e7ec      	b.n	8008a7a <_printf_float+0x34a>
 8008aa0:	4613      	mov	r3, r2
 8008aa2:	4631      	mov	r1, r6
 8008aa4:	4642      	mov	r2, r8
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	47b8      	blx	r7
 8008aaa:	3001      	adds	r0, #1
 8008aac:	d1c0      	bne.n	8008a30 <_printf_float+0x300>
 8008aae:	e69e      	b.n	80087ee <_printf_float+0xbe>
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	4631      	mov	r1, r6
 8008ab4:	4628      	mov	r0, r5
 8008ab6:	9205      	str	r2, [sp, #20]
 8008ab8:	47b8      	blx	r7
 8008aba:	3001      	adds	r0, #1
 8008abc:	f43f ae97 	beq.w	80087ee <_printf_float+0xbe>
 8008ac0:	9a05      	ldr	r2, [sp, #20]
 8008ac2:	f10b 0b01 	add.w	fp, fp, #1
 8008ac6:	e7b9      	b.n	8008a3c <_printf_float+0x30c>
 8008ac8:	ee18 3a10 	vmov	r3, s16
 8008acc:	4652      	mov	r2, sl
 8008ace:	4631      	mov	r1, r6
 8008ad0:	4628      	mov	r0, r5
 8008ad2:	47b8      	blx	r7
 8008ad4:	3001      	adds	r0, #1
 8008ad6:	d1be      	bne.n	8008a56 <_printf_float+0x326>
 8008ad8:	e689      	b.n	80087ee <_printf_float+0xbe>
 8008ada:	9a05      	ldr	r2, [sp, #20]
 8008adc:	464b      	mov	r3, r9
 8008ade:	4442      	add	r2, r8
 8008ae0:	4631      	mov	r1, r6
 8008ae2:	4628      	mov	r0, r5
 8008ae4:	47b8      	blx	r7
 8008ae6:	3001      	adds	r0, #1
 8008ae8:	d1c1      	bne.n	8008a6e <_printf_float+0x33e>
 8008aea:	e680      	b.n	80087ee <_printf_float+0xbe>
 8008aec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008aee:	2a01      	cmp	r2, #1
 8008af0:	dc01      	bgt.n	8008af6 <_printf_float+0x3c6>
 8008af2:	07db      	lsls	r3, r3, #31
 8008af4:	d53a      	bpl.n	8008b6c <_printf_float+0x43c>
 8008af6:	2301      	movs	r3, #1
 8008af8:	4642      	mov	r2, r8
 8008afa:	4631      	mov	r1, r6
 8008afc:	4628      	mov	r0, r5
 8008afe:	47b8      	blx	r7
 8008b00:	3001      	adds	r0, #1
 8008b02:	f43f ae74 	beq.w	80087ee <_printf_float+0xbe>
 8008b06:	ee18 3a10 	vmov	r3, s16
 8008b0a:	4652      	mov	r2, sl
 8008b0c:	4631      	mov	r1, r6
 8008b0e:	4628      	mov	r0, r5
 8008b10:	47b8      	blx	r7
 8008b12:	3001      	adds	r0, #1
 8008b14:	f43f ae6b 	beq.w	80087ee <_printf_float+0xbe>
 8008b18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	2300      	movs	r3, #0
 8008b20:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008b24:	f7f7 ffd0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b28:	b9d8      	cbnz	r0, 8008b62 <_printf_float+0x432>
 8008b2a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008b2e:	f108 0201 	add.w	r2, r8, #1
 8008b32:	4631      	mov	r1, r6
 8008b34:	4628      	mov	r0, r5
 8008b36:	47b8      	blx	r7
 8008b38:	3001      	adds	r0, #1
 8008b3a:	d10e      	bne.n	8008b5a <_printf_float+0x42a>
 8008b3c:	e657      	b.n	80087ee <_printf_float+0xbe>
 8008b3e:	2301      	movs	r3, #1
 8008b40:	4652      	mov	r2, sl
 8008b42:	4631      	mov	r1, r6
 8008b44:	4628      	mov	r0, r5
 8008b46:	47b8      	blx	r7
 8008b48:	3001      	adds	r0, #1
 8008b4a:	f43f ae50 	beq.w	80087ee <_printf_float+0xbe>
 8008b4e:	f108 0801 	add.w	r8, r8, #1
 8008b52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b54:	3b01      	subs	r3, #1
 8008b56:	4543      	cmp	r3, r8
 8008b58:	dcf1      	bgt.n	8008b3e <_printf_float+0x40e>
 8008b5a:	464b      	mov	r3, r9
 8008b5c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008b60:	e6da      	b.n	8008918 <_printf_float+0x1e8>
 8008b62:	f04f 0800 	mov.w	r8, #0
 8008b66:	f104 0a1a 	add.w	sl, r4, #26
 8008b6a:	e7f2      	b.n	8008b52 <_printf_float+0x422>
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	4642      	mov	r2, r8
 8008b70:	e7df      	b.n	8008b32 <_printf_float+0x402>
 8008b72:	2301      	movs	r3, #1
 8008b74:	464a      	mov	r2, r9
 8008b76:	4631      	mov	r1, r6
 8008b78:	4628      	mov	r0, r5
 8008b7a:	47b8      	blx	r7
 8008b7c:	3001      	adds	r0, #1
 8008b7e:	f43f ae36 	beq.w	80087ee <_printf_float+0xbe>
 8008b82:	f108 0801 	add.w	r8, r8, #1
 8008b86:	68e3      	ldr	r3, [r4, #12]
 8008b88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b8a:	1a5b      	subs	r3, r3, r1
 8008b8c:	4543      	cmp	r3, r8
 8008b8e:	dcf0      	bgt.n	8008b72 <_printf_float+0x442>
 8008b90:	e6f8      	b.n	8008984 <_printf_float+0x254>
 8008b92:	f04f 0800 	mov.w	r8, #0
 8008b96:	f104 0919 	add.w	r9, r4, #25
 8008b9a:	e7f4      	b.n	8008b86 <_printf_float+0x456>

08008b9c <_printf_common>:
 8008b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ba0:	4616      	mov	r6, r2
 8008ba2:	4699      	mov	r9, r3
 8008ba4:	688a      	ldr	r2, [r1, #8]
 8008ba6:	690b      	ldr	r3, [r1, #16]
 8008ba8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008bac:	4293      	cmp	r3, r2
 8008bae:	bfb8      	it	lt
 8008bb0:	4613      	movlt	r3, r2
 8008bb2:	6033      	str	r3, [r6, #0]
 8008bb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008bb8:	4607      	mov	r7, r0
 8008bba:	460c      	mov	r4, r1
 8008bbc:	b10a      	cbz	r2, 8008bc2 <_printf_common+0x26>
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	6033      	str	r3, [r6, #0]
 8008bc2:	6823      	ldr	r3, [r4, #0]
 8008bc4:	0699      	lsls	r1, r3, #26
 8008bc6:	bf42      	ittt	mi
 8008bc8:	6833      	ldrmi	r3, [r6, #0]
 8008bca:	3302      	addmi	r3, #2
 8008bcc:	6033      	strmi	r3, [r6, #0]
 8008bce:	6825      	ldr	r5, [r4, #0]
 8008bd0:	f015 0506 	ands.w	r5, r5, #6
 8008bd4:	d106      	bne.n	8008be4 <_printf_common+0x48>
 8008bd6:	f104 0a19 	add.w	sl, r4, #25
 8008bda:	68e3      	ldr	r3, [r4, #12]
 8008bdc:	6832      	ldr	r2, [r6, #0]
 8008bde:	1a9b      	subs	r3, r3, r2
 8008be0:	42ab      	cmp	r3, r5
 8008be2:	dc26      	bgt.n	8008c32 <_printf_common+0x96>
 8008be4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008be8:	1e13      	subs	r3, r2, #0
 8008bea:	6822      	ldr	r2, [r4, #0]
 8008bec:	bf18      	it	ne
 8008bee:	2301      	movne	r3, #1
 8008bf0:	0692      	lsls	r2, r2, #26
 8008bf2:	d42b      	bmi.n	8008c4c <_printf_common+0xb0>
 8008bf4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008bf8:	4649      	mov	r1, r9
 8008bfa:	4638      	mov	r0, r7
 8008bfc:	47c0      	blx	r8
 8008bfe:	3001      	adds	r0, #1
 8008c00:	d01e      	beq.n	8008c40 <_printf_common+0xa4>
 8008c02:	6823      	ldr	r3, [r4, #0]
 8008c04:	6922      	ldr	r2, [r4, #16]
 8008c06:	f003 0306 	and.w	r3, r3, #6
 8008c0a:	2b04      	cmp	r3, #4
 8008c0c:	bf02      	ittt	eq
 8008c0e:	68e5      	ldreq	r5, [r4, #12]
 8008c10:	6833      	ldreq	r3, [r6, #0]
 8008c12:	1aed      	subeq	r5, r5, r3
 8008c14:	68a3      	ldr	r3, [r4, #8]
 8008c16:	bf0c      	ite	eq
 8008c18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c1c:	2500      	movne	r5, #0
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	bfc4      	itt	gt
 8008c22:	1a9b      	subgt	r3, r3, r2
 8008c24:	18ed      	addgt	r5, r5, r3
 8008c26:	2600      	movs	r6, #0
 8008c28:	341a      	adds	r4, #26
 8008c2a:	42b5      	cmp	r5, r6
 8008c2c:	d11a      	bne.n	8008c64 <_printf_common+0xc8>
 8008c2e:	2000      	movs	r0, #0
 8008c30:	e008      	b.n	8008c44 <_printf_common+0xa8>
 8008c32:	2301      	movs	r3, #1
 8008c34:	4652      	mov	r2, sl
 8008c36:	4649      	mov	r1, r9
 8008c38:	4638      	mov	r0, r7
 8008c3a:	47c0      	blx	r8
 8008c3c:	3001      	adds	r0, #1
 8008c3e:	d103      	bne.n	8008c48 <_printf_common+0xac>
 8008c40:	f04f 30ff 	mov.w	r0, #4294967295
 8008c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c48:	3501      	adds	r5, #1
 8008c4a:	e7c6      	b.n	8008bda <_printf_common+0x3e>
 8008c4c:	18e1      	adds	r1, r4, r3
 8008c4e:	1c5a      	adds	r2, r3, #1
 8008c50:	2030      	movs	r0, #48	; 0x30
 8008c52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c56:	4422      	add	r2, r4
 8008c58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c60:	3302      	adds	r3, #2
 8008c62:	e7c7      	b.n	8008bf4 <_printf_common+0x58>
 8008c64:	2301      	movs	r3, #1
 8008c66:	4622      	mov	r2, r4
 8008c68:	4649      	mov	r1, r9
 8008c6a:	4638      	mov	r0, r7
 8008c6c:	47c0      	blx	r8
 8008c6e:	3001      	adds	r0, #1
 8008c70:	d0e6      	beq.n	8008c40 <_printf_common+0xa4>
 8008c72:	3601      	adds	r6, #1
 8008c74:	e7d9      	b.n	8008c2a <_printf_common+0x8e>
	...

08008c78 <_printf_i>:
 8008c78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c7c:	7e0f      	ldrb	r7, [r1, #24]
 8008c7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c80:	2f78      	cmp	r7, #120	; 0x78
 8008c82:	4691      	mov	r9, r2
 8008c84:	4680      	mov	r8, r0
 8008c86:	460c      	mov	r4, r1
 8008c88:	469a      	mov	sl, r3
 8008c8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c8e:	d807      	bhi.n	8008ca0 <_printf_i+0x28>
 8008c90:	2f62      	cmp	r7, #98	; 0x62
 8008c92:	d80a      	bhi.n	8008caa <_printf_i+0x32>
 8008c94:	2f00      	cmp	r7, #0
 8008c96:	f000 80d4 	beq.w	8008e42 <_printf_i+0x1ca>
 8008c9a:	2f58      	cmp	r7, #88	; 0x58
 8008c9c:	f000 80c0 	beq.w	8008e20 <_printf_i+0x1a8>
 8008ca0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ca4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ca8:	e03a      	b.n	8008d20 <_printf_i+0xa8>
 8008caa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008cae:	2b15      	cmp	r3, #21
 8008cb0:	d8f6      	bhi.n	8008ca0 <_printf_i+0x28>
 8008cb2:	a101      	add	r1, pc, #4	; (adr r1, 8008cb8 <_printf_i+0x40>)
 8008cb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008cb8:	08008d11 	.word	0x08008d11
 8008cbc:	08008d25 	.word	0x08008d25
 8008cc0:	08008ca1 	.word	0x08008ca1
 8008cc4:	08008ca1 	.word	0x08008ca1
 8008cc8:	08008ca1 	.word	0x08008ca1
 8008ccc:	08008ca1 	.word	0x08008ca1
 8008cd0:	08008d25 	.word	0x08008d25
 8008cd4:	08008ca1 	.word	0x08008ca1
 8008cd8:	08008ca1 	.word	0x08008ca1
 8008cdc:	08008ca1 	.word	0x08008ca1
 8008ce0:	08008ca1 	.word	0x08008ca1
 8008ce4:	08008e29 	.word	0x08008e29
 8008ce8:	08008d51 	.word	0x08008d51
 8008cec:	08008de3 	.word	0x08008de3
 8008cf0:	08008ca1 	.word	0x08008ca1
 8008cf4:	08008ca1 	.word	0x08008ca1
 8008cf8:	08008e4b 	.word	0x08008e4b
 8008cfc:	08008ca1 	.word	0x08008ca1
 8008d00:	08008d51 	.word	0x08008d51
 8008d04:	08008ca1 	.word	0x08008ca1
 8008d08:	08008ca1 	.word	0x08008ca1
 8008d0c:	08008deb 	.word	0x08008deb
 8008d10:	682b      	ldr	r3, [r5, #0]
 8008d12:	1d1a      	adds	r2, r3, #4
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	602a      	str	r2, [r5, #0]
 8008d18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d20:	2301      	movs	r3, #1
 8008d22:	e09f      	b.n	8008e64 <_printf_i+0x1ec>
 8008d24:	6820      	ldr	r0, [r4, #0]
 8008d26:	682b      	ldr	r3, [r5, #0]
 8008d28:	0607      	lsls	r7, r0, #24
 8008d2a:	f103 0104 	add.w	r1, r3, #4
 8008d2e:	6029      	str	r1, [r5, #0]
 8008d30:	d501      	bpl.n	8008d36 <_printf_i+0xbe>
 8008d32:	681e      	ldr	r6, [r3, #0]
 8008d34:	e003      	b.n	8008d3e <_printf_i+0xc6>
 8008d36:	0646      	lsls	r6, r0, #25
 8008d38:	d5fb      	bpl.n	8008d32 <_printf_i+0xba>
 8008d3a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008d3e:	2e00      	cmp	r6, #0
 8008d40:	da03      	bge.n	8008d4a <_printf_i+0xd2>
 8008d42:	232d      	movs	r3, #45	; 0x2d
 8008d44:	4276      	negs	r6, r6
 8008d46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d4a:	485a      	ldr	r0, [pc, #360]	; (8008eb4 <_printf_i+0x23c>)
 8008d4c:	230a      	movs	r3, #10
 8008d4e:	e012      	b.n	8008d76 <_printf_i+0xfe>
 8008d50:	682b      	ldr	r3, [r5, #0]
 8008d52:	6820      	ldr	r0, [r4, #0]
 8008d54:	1d19      	adds	r1, r3, #4
 8008d56:	6029      	str	r1, [r5, #0]
 8008d58:	0605      	lsls	r5, r0, #24
 8008d5a:	d501      	bpl.n	8008d60 <_printf_i+0xe8>
 8008d5c:	681e      	ldr	r6, [r3, #0]
 8008d5e:	e002      	b.n	8008d66 <_printf_i+0xee>
 8008d60:	0641      	lsls	r1, r0, #25
 8008d62:	d5fb      	bpl.n	8008d5c <_printf_i+0xe4>
 8008d64:	881e      	ldrh	r6, [r3, #0]
 8008d66:	4853      	ldr	r0, [pc, #332]	; (8008eb4 <_printf_i+0x23c>)
 8008d68:	2f6f      	cmp	r7, #111	; 0x6f
 8008d6a:	bf0c      	ite	eq
 8008d6c:	2308      	moveq	r3, #8
 8008d6e:	230a      	movne	r3, #10
 8008d70:	2100      	movs	r1, #0
 8008d72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d76:	6865      	ldr	r5, [r4, #4]
 8008d78:	60a5      	str	r5, [r4, #8]
 8008d7a:	2d00      	cmp	r5, #0
 8008d7c:	bfa2      	ittt	ge
 8008d7e:	6821      	ldrge	r1, [r4, #0]
 8008d80:	f021 0104 	bicge.w	r1, r1, #4
 8008d84:	6021      	strge	r1, [r4, #0]
 8008d86:	b90e      	cbnz	r6, 8008d8c <_printf_i+0x114>
 8008d88:	2d00      	cmp	r5, #0
 8008d8a:	d04b      	beq.n	8008e24 <_printf_i+0x1ac>
 8008d8c:	4615      	mov	r5, r2
 8008d8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d92:	fb03 6711 	mls	r7, r3, r1, r6
 8008d96:	5dc7      	ldrb	r7, [r0, r7]
 8008d98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d9c:	4637      	mov	r7, r6
 8008d9e:	42bb      	cmp	r3, r7
 8008da0:	460e      	mov	r6, r1
 8008da2:	d9f4      	bls.n	8008d8e <_printf_i+0x116>
 8008da4:	2b08      	cmp	r3, #8
 8008da6:	d10b      	bne.n	8008dc0 <_printf_i+0x148>
 8008da8:	6823      	ldr	r3, [r4, #0]
 8008daa:	07de      	lsls	r6, r3, #31
 8008dac:	d508      	bpl.n	8008dc0 <_printf_i+0x148>
 8008dae:	6923      	ldr	r3, [r4, #16]
 8008db0:	6861      	ldr	r1, [r4, #4]
 8008db2:	4299      	cmp	r1, r3
 8008db4:	bfde      	ittt	le
 8008db6:	2330      	movle	r3, #48	; 0x30
 8008db8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008dbc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008dc0:	1b52      	subs	r2, r2, r5
 8008dc2:	6122      	str	r2, [r4, #16]
 8008dc4:	f8cd a000 	str.w	sl, [sp]
 8008dc8:	464b      	mov	r3, r9
 8008dca:	aa03      	add	r2, sp, #12
 8008dcc:	4621      	mov	r1, r4
 8008dce:	4640      	mov	r0, r8
 8008dd0:	f7ff fee4 	bl	8008b9c <_printf_common>
 8008dd4:	3001      	adds	r0, #1
 8008dd6:	d14a      	bne.n	8008e6e <_printf_i+0x1f6>
 8008dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ddc:	b004      	add	sp, #16
 8008dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008de2:	6823      	ldr	r3, [r4, #0]
 8008de4:	f043 0320 	orr.w	r3, r3, #32
 8008de8:	6023      	str	r3, [r4, #0]
 8008dea:	4833      	ldr	r0, [pc, #204]	; (8008eb8 <_printf_i+0x240>)
 8008dec:	2778      	movs	r7, #120	; 0x78
 8008dee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008df2:	6823      	ldr	r3, [r4, #0]
 8008df4:	6829      	ldr	r1, [r5, #0]
 8008df6:	061f      	lsls	r7, r3, #24
 8008df8:	f851 6b04 	ldr.w	r6, [r1], #4
 8008dfc:	d402      	bmi.n	8008e04 <_printf_i+0x18c>
 8008dfe:	065f      	lsls	r7, r3, #25
 8008e00:	bf48      	it	mi
 8008e02:	b2b6      	uxthmi	r6, r6
 8008e04:	07df      	lsls	r7, r3, #31
 8008e06:	bf48      	it	mi
 8008e08:	f043 0320 	orrmi.w	r3, r3, #32
 8008e0c:	6029      	str	r1, [r5, #0]
 8008e0e:	bf48      	it	mi
 8008e10:	6023      	strmi	r3, [r4, #0]
 8008e12:	b91e      	cbnz	r6, 8008e1c <_printf_i+0x1a4>
 8008e14:	6823      	ldr	r3, [r4, #0]
 8008e16:	f023 0320 	bic.w	r3, r3, #32
 8008e1a:	6023      	str	r3, [r4, #0]
 8008e1c:	2310      	movs	r3, #16
 8008e1e:	e7a7      	b.n	8008d70 <_printf_i+0xf8>
 8008e20:	4824      	ldr	r0, [pc, #144]	; (8008eb4 <_printf_i+0x23c>)
 8008e22:	e7e4      	b.n	8008dee <_printf_i+0x176>
 8008e24:	4615      	mov	r5, r2
 8008e26:	e7bd      	b.n	8008da4 <_printf_i+0x12c>
 8008e28:	682b      	ldr	r3, [r5, #0]
 8008e2a:	6826      	ldr	r6, [r4, #0]
 8008e2c:	6961      	ldr	r1, [r4, #20]
 8008e2e:	1d18      	adds	r0, r3, #4
 8008e30:	6028      	str	r0, [r5, #0]
 8008e32:	0635      	lsls	r5, r6, #24
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	d501      	bpl.n	8008e3c <_printf_i+0x1c4>
 8008e38:	6019      	str	r1, [r3, #0]
 8008e3a:	e002      	b.n	8008e42 <_printf_i+0x1ca>
 8008e3c:	0670      	lsls	r0, r6, #25
 8008e3e:	d5fb      	bpl.n	8008e38 <_printf_i+0x1c0>
 8008e40:	8019      	strh	r1, [r3, #0]
 8008e42:	2300      	movs	r3, #0
 8008e44:	6123      	str	r3, [r4, #16]
 8008e46:	4615      	mov	r5, r2
 8008e48:	e7bc      	b.n	8008dc4 <_printf_i+0x14c>
 8008e4a:	682b      	ldr	r3, [r5, #0]
 8008e4c:	1d1a      	adds	r2, r3, #4
 8008e4e:	602a      	str	r2, [r5, #0]
 8008e50:	681d      	ldr	r5, [r3, #0]
 8008e52:	6862      	ldr	r2, [r4, #4]
 8008e54:	2100      	movs	r1, #0
 8008e56:	4628      	mov	r0, r5
 8008e58:	f7f7 f9ba 	bl	80001d0 <memchr>
 8008e5c:	b108      	cbz	r0, 8008e62 <_printf_i+0x1ea>
 8008e5e:	1b40      	subs	r0, r0, r5
 8008e60:	6060      	str	r0, [r4, #4]
 8008e62:	6863      	ldr	r3, [r4, #4]
 8008e64:	6123      	str	r3, [r4, #16]
 8008e66:	2300      	movs	r3, #0
 8008e68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e6c:	e7aa      	b.n	8008dc4 <_printf_i+0x14c>
 8008e6e:	6923      	ldr	r3, [r4, #16]
 8008e70:	462a      	mov	r2, r5
 8008e72:	4649      	mov	r1, r9
 8008e74:	4640      	mov	r0, r8
 8008e76:	47d0      	blx	sl
 8008e78:	3001      	adds	r0, #1
 8008e7a:	d0ad      	beq.n	8008dd8 <_printf_i+0x160>
 8008e7c:	6823      	ldr	r3, [r4, #0]
 8008e7e:	079b      	lsls	r3, r3, #30
 8008e80:	d413      	bmi.n	8008eaa <_printf_i+0x232>
 8008e82:	68e0      	ldr	r0, [r4, #12]
 8008e84:	9b03      	ldr	r3, [sp, #12]
 8008e86:	4298      	cmp	r0, r3
 8008e88:	bfb8      	it	lt
 8008e8a:	4618      	movlt	r0, r3
 8008e8c:	e7a6      	b.n	8008ddc <_printf_i+0x164>
 8008e8e:	2301      	movs	r3, #1
 8008e90:	4632      	mov	r2, r6
 8008e92:	4649      	mov	r1, r9
 8008e94:	4640      	mov	r0, r8
 8008e96:	47d0      	blx	sl
 8008e98:	3001      	adds	r0, #1
 8008e9a:	d09d      	beq.n	8008dd8 <_printf_i+0x160>
 8008e9c:	3501      	adds	r5, #1
 8008e9e:	68e3      	ldr	r3, [r4, #12]
 8008ea0:	9903      	ldr	r1, [sp, #12]
 8008ea2:	1a5b      	subs	r3, r3, r1
 8008ea4:	42ab      	cmp	r3, r5
 8008ea6:	dcf2      	bgt.n	8008e8e <_printf_i+0x216>
 8008ea8:	e7eb      	b.n	8008e82 <_printf_i+0x20a>
 8008eaa:	2500      	movs	r5, #0
 8008eac:	f104 0619 	add.w	r6, r4, #25
 8008eb0:	e7f5      	b.n	8008e9e <_printf_i+0x226>
 8008eb2:	bf00      	nop
 8008eb4:	0800dd48 	.word	0x0800dd48
 8008eb8:	0800dd59 	.word	0x0800dd59

08008ebc <_scanf_float>:
 8008ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ec0:	b087      	sub	sp, #28
 8008ec2:	4617      	mov	r7, r2
 8008ec4:	9303      	str	r3, [sp, #12]
 8008ec6:	688b      	ldr	r3, [r1, #8]
 8008ec8:	1e5a      	subs	r2, r3, #1
 8008eca:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008ece:	bf83      	ittte	hi
 8008ed0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008ed4:	195b      	addhi	r3, r3, r5
 8008ed6:	9302      	strhi	r3, [sp, #8]
 8008ed8:	2300      	movls	r3, #0
 8008eda:	bf86      	itte	hi
 8008edc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008ee0:	608b      	strhi	r3, [r1, #8]
 8008ee2:	9302      	strls	r3, [sp, #8]
 8008ee4:	680b      	ldr	r3, [r1, #0]
 8008ee6:	468b      	mov	fp, r1
 8008ee8:	2500      	movs	r5, #0
 8008eea:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008eee:	f84b 3b1c 	str.w	r3, [fp], #28
 8008ef2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008ef6:	4680      	mov	r8, r0
 8008ef8:	460c      	mov	r4, r1
 8008efa:	465e      	mov	r6, fp
 8008efc:	46aa      	mov	sl, r5
 8008efe:	46a9      	mov	r9, r5
 8008f00:	9501      	str	r5, [sp, #4]
 8008f02:	68a2      	ldr	r2, [r4, #8]
 8008f04:	b152      	cbz	r2, 8008f1c <_scanf_float+0x60>
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	2b4e      	cmp	r3, #78	; 0x4e
 8008f0c:	d864      	bhi.n	8008fd8 <_scanf_float+0x11c>
 8008f0e:	2b40      	cmp	r3, #64	; 0x40
 8008f10:	d83c      	bhi.n	8008f8c <_scanf_float+0xd0>
 8008f12:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008f16:	b2c8      	uxtb	r0, r1
 8008f18:	280e      	cmp	r0, #14
 8008f1a:	d93a      	bls.n	8008f92 <_scanf_float+0xd6>
 8008f1c:	f1b9 0f00 	cmp.w	r9, #0
 8008f20:	d003      	beq.n	8008f2a <_scanf_float+0x6e>
 8008f22:	6823      	ldr	r3, [r4, #0]
 8008f24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f28:	6023      	str	r3, [r4, #0]
 8008f2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f2e:	f1ba 0f01 	cmp.w	sl, #1
 8008f32:	f200 8113 	bhi.w	800915c <_scanf_float+0x2a0>
 8008f36:	455e      	cmp	r6, fp
 8008f38:	f200 8105 	bhi.w	8009146 <_scanf_float+0x28a>
 8008f3c:	2501      	movs	r5, #1
 8008f3e:	4628      	mov	r0, r5
 8008f40:	b007      	add	sp, #28
 8008f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f46:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008f4a:	2a0d      	cmp	r2, #13
 8008f4c:	d8e6      	bhi.n	8008f1c <_scanf_float+0x60>
 8008f4e:	a101      	add	r1, pc, #4	; (adr r1, 8008f54 <_scanf_float+0x98>)
 8008f50:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008f54:	08009093 	.word	0x08009093
 8008f58:	08008f1d 	.word	0x08008f1d
 8008f5c:	08008f1d 	.word	0x08008f1d
 8008f60:	08008f1d 	.word	0x08008f1d
 8008f64:	080090f3 	.word	0x080090f3
 8008f68:	080090cb 	.word	0x080090cb
 8008f6c:	08008f1d 	.word	0x08008f1d
 8008f70:	08008f1d 	.word	0x08008f1d
 8008f74:	080090a1 	.word	0x080090a1
 8008f78:	08008f1d 	.word	0x08008f1d
 8008f7c:	08008f1d 	.word	0x08008f1d
 8008f80:	08008f1d 	.word	0x08008f1d
 8008f84:	08008f1d 	.word	0x08008f1d
 8008f88:	08009059 	.word	0x08009059
 8008f8c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008f90:	e7db      	b.n	8008f4a <_scanf_float+0x8e>
 8008f92:	290e      	cmp	r1, #14
 8008f94:	d8c2      	bhi.n	8008f1c <_scanf_float+0x60>
 8008f96:	a001      	add	r0, pc, #4	; (adr r0, 8008f9c <_scanf_float+0xe0>)
 8008f98:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008f9c:	0800904b 	.word	0x0800904b
 8008fa0:	08008f1d 	.word	0x08008f1d
 8008fa4:	0800904b 	.word	0x0800904b
 8008fa8:	080090df 	.word	0x080090df
 8008fac:	08008f1d 	.word	0x08008f1d
 8008fb0:	08008ff9 	.word	0x08008ff9
 8008fb4:	08009035 	.word	0x08009035
 8008fb8:	08009035 	.word	0x08009035
 8008fbc:	08009035 	.word	0x08009035
 8008fc0:	08009035 	.word	0x08009035
 8008fc4:	08009035 	.word	0x08009035
 8008fc8:	08009035 	.word	0x08009035
 8008fcc:	08009035 	.word	0x08009035
 8008fd0:	08009035 	.word	0x08009035
 8008fd4:	08009035 	.word	0x08009035
 8008fd8:	2b6e      	cmp	r3, #110	; 0x6e
 8008fda:	d809      	bhi.n	8008ff0 <_scanf_float+0x134>
 8008fdc:	2b60      	cmp	r3, #96	; 0x60
 8008fde:	d8b2      	bhi.n	8008f46 <_scanf_float+0x8a>
 8008fe0:	2b54      	cmp	r3, #84	; 0x54
 8008fe2:	d077      	beq.n	80090d4 <_scanf_float+0x218>
 8008fe4:	2b59      	cmp	r3, #89	; 0x59
 8008fe6:	d199      	bne.n	8008f1c <_scanf_float+0x60>
 8008fe8:	2d07      	cmp	r5, #7
 8008fea:	d197      	bne.n	8008f1c <_scanf_float+0x60>
 8008fec:	2508      	movs	r5, #8
 8008fee:	e029      	b.n	8009044 <_scanf_float+0x188>
 8008ff0:	2b74      	cmp	r3, #116	; 0x74
 8008ff2:	d06f      	beq.n	80090d4 <_scanf_float+0x218>
 8008ff4:	2b79      	cmp	r3, #121	; 0x79
 8008ff6:	e7f6      	b.n	8008fe6 <_scanf_float+0x12a>
 8008ff8:	6821      	ldr	r1, [r4, #0]
 8008ffa:	05c8      	lsls	r0, r1, #23
 8008ffc:	d51a      	bpl.n	8009034 <_scanf_float+0x178>
 8008ffe:	9b02      	ldr	r3, [sp, #8]
 8009000:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009004:	6021      	str	r1, [r4, #0]
 8009006:	f109 0901 	add.w	r9, r9, #1
 800900a:	b11b      	cbz	r3, 8009014 <_scanf_float+0x158>
 800900c:	3b01      	subs	r3, #1
 800900e:	3201      	adds	r2, #1
 8009010:	9302      	str	r3, [sp, #8]
 8009012:	60a2      	str	r2, [r4, #8]
 8009014:	68a3      	ldr	r3, [r4, #8]
 8009016:	3b01      	subs	r3, #1
 8009018:	60a3      	str	r3, [r4, #8]
 800901a:	6923      	ldr	r3, [r4, #16]
 800901c:	3301      	adds	r3, #1
 800901e:	6123      	str	r3, [r4, #16]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	3b01      	subs	r3, #1
 8009024:	2b00      	cmp	r3, #0
 8009026:	607b      	str	r3, [r7, #4]
 8009028:	f340 8084 	ble.w	8009134 <_scanf_float+0x278>
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	3301      	adds	r3, #1
 8009030:	603b      	str	r3, [r7, #0]
 8009032:	e766      	b.n	8008f02 <_scanf_float+0x46>
 8009034:	eb1a 0f05 	cmn.w	sl, r5
 8009038:	f47f af70 	bne.w	8008f1c <_scanf_float+0x60>
 800903c:	6822      	ldr	r2, [r4, #0]
 800903e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009042:	6022      	str	r2, [r4, #0]
 8009044:	f806 3b01 	strb.w	r3, [r6], #1
 8009048:	e7e4      	b.n	8009014 <_scanf_float+0x158>
 800904a:	6822      	ldr	r2, [r4, #0]
 800904c:	0610      	lsls	r0, r2, #24
 800904e:	f57f af65 	bpl.w	8008f1c <_scanf_float+0x60>
 8009052:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009056:	e7f4      	b.n	8009042 <_scanf_float+0x186>
 8009058:	f1ba 0f00 	cmp.w	sl, #0
 800905c:	d10e      	bne.n	800907c <_scanf_float+0x1c0>
 800905e:	f1b9 0f00 	cmp.w	r9, #0
 8009062:	d10e      	bne.n	8009082 <_scanf_float+0x1c6>
 8009064:	6822      	ldr	r2, [r4, #0]
 8009066:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800906a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800906e:	d108      	bne.n	8009082 <_scanf_float+0x1c6>
 8009070:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009074:	6022      	str	r2, [r4, #0]
 8009076:	f04f 0a01 	mov.w	sl, #1
 800907a:	e7e3      	b.n	8009044 <_scanf_float+0x188>
 800907c:	f1ba 0f02 	cmp.w	sl, #2
 8009080:	d055      	beq.n	800912e <_scanf_float+0x272>
 8009082:	2d01      	cmp	r5, #1
 8009084:	d002      	beq.n	800908c <_scanf_float+0x1d0>
 8009086:	2d04      	cmp	r5, #4
 8009088:	f47f af48 	bne.w	8008f1c <_scanf_float+0x60>
 800908c:	3501      	adds	r5, #1
 800908e:	b2ed      	uxtb	r5, r5
 8009090:	e7d8      	b.n	8009044 <_scanf_float+0x188>
 8009092:	f1ba 0f01 	cmp.w	sl, #1
 8009096:	f47f af41 	bne.w	8008f1c <_scanf_float+0x60>
 800909a:	f04f 0a02 	mov.w	sl, #2
 800909e:	e7d1      	b.n	8009044 <_scanf_float+0x188>
 80090a0:	b97d      	cbnz	r5, 80090c2 <_scanf_float+0x206>
 80090a2:	f1b9 0f00 	cmp.w	r9, #0
 80090a6:	f47f af3c 	bne.w	8008f22 <_scanf_float+0x66>
 80090aa:	6822      	ldr	r2, [r4, #0]
 80090ac:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80090b0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80090b4:	f47f af39 	bne.w	8008f2a <_scanf_float+0x6e>
 80090b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80090bc:	6022      	str	r2, [r4, #0]
 80090be:	2501      	movs	r5, #1
 80090c0:	e7c0      	b.n	8009044 <_scanf_float+0x188>
 80090c2:	2d03      	cmp	r5, #3
 80090c4:	d0e2      	beq.n	800908c <_scanf_float+0x1d0>
 80090c6:	2d05      	cmp	r5, #5
 80090c8:	e7de      	b.n	8009088 <_scanf_float+0x1cc>
 80090ca:	2d02      	cmp	r5, #2
 80090cc:	f47f af26 	bne.w	8008f1c <_scanf_float+0x60>
 80090d0:	2503      	movs	r5, #3
 80090d2:	e7b7      	b.n	8009044 <_scanf_float+0x188>
 80090d4:	2d06      	cmp	r5, #6
 80090d6:	f47f af21 	bne.w	8008f1c <_scanf_float+0x60>
 80090da:	2507      	movs	r5, #7
 80090dc:	e7b2      	b.n	8009044 <_scanf_float+0x188>
 80090de:	6822      	ldr	r2, [r4, #0]
 80090e0:	0591      	lsls	r1, r2, #22
 80090e2:	f57f af1b 	bpl.w	8008f1c <_scanf_float+0x60>
 80090e6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80090ea:	6022      	str	r2, [r4, #0]
 80090ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80090f0:	e7a8      	b.n	8009044 <_scanf_float+0x188>
 80090f2:	6822      	ldr	r2, [r4, #0]
 80090f4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80090f8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80090fc:	d006      	beq.n	800910c <_scanf_float+0x250>
 80090fe:	0550      	lsls	r0, r2, #21
 8009100:	f57f af0c 	bpl.w	8008f1c <_scanf_float+0x60>
 8009104:	f1b9 0f00 	cmp.w	r9, #0
 8009108:	f43f af0f 	beq.w	8008f2a <_scanf_float+0x6e>
 800910c:	0591      	lsls	r1, r2, #22
 800910e:	bf58      	it	pl
 8009110:	9901      	ldrpl	r1, [sp, #4]
 8009112:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009116:	bf58      	it	pl
 8009118:	eba9 0101 	subpl.w	r1, r9, r1
 800911c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009120:	bf58      	it	pl
 8009122:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009126:	6022      	str	r2, [r4, #0]
 8009128:	f04f 0900 	mov.w	r9, #0
 800912c:	e78a      	b.n	8009044 <_scanf_float+0x188>
 800912e:	f04f 0a03 	mov.w	sl, #3
 8009132:	e787      	b.n	8009044 <_scanf_float+0x188>
 8009134:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009138:	4639      	mov	r1, r7
 800913a:	4640      	mov	r0, r8
 800913c:	4798      	blx	r3
 800913e:	2800      	cmp	r0, #0
 8009140:	f43f aedf 	beq.w	8008f02 <_scanf_float+0x46>
 8009144:	e6ea      	b.n	8008f1c <_scanf_float+0x60>
 8009146:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800914a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800914e:	463a      	mov	r2, r7
 8009150:	4640      	mov	r0, r8
 8009152:	4798      	blx	r3
 8009154:	6923      	ldr	r3, [r4, #16]
 8009156:	3b01      	subs	r3, #1
 8009158:	6123      	str	r3, [r4, #16]
 800915a:	e6ec      	b.n	8008f36 <_scanf_float+0x7a>
 800915c:	1e6b      	subs	r3, r5, #1
 800915e:	2b06      	cmp	r3, #6
 8009160:	d825      	bhi.n	80091ae <_scanf_float+0x2f2>
 8009162:	2d02      	cmp	r5, #2
 8009164:	d836      	bhi.n	80091d4 <_scanf_float+0x318>
 8009166:	455e      	cmp	r6, fp
 8009168:	f67f aee8 	bls.w	8008f3c <_scanf_float+0x80>
 800916c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009170:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009174:	463a      	mov	r2, r7
 8009176:	4640      	mov	r0, r8
 8009178:	4798      	blx	r3
 800917a:	6923      	ldr	r3, [r4, #16]
 800917c:	3b01      	subs	r3, #1
 800917e:	6123      	str	r3, [r4, #16]
 8009180:	e7f1      	b.n	8009166 <_scanf_float+0x2aa>
 8009182:	9802      	ldr	r0, [sp, #8]
 8009184:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009188:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800918c:	9002      	str	r0, [sp, #8]
 800918e:	463a      	mov	r2, r7
 8009190:	4640      	mov	r0, r8
 8009192:	4798      	blx	r3
 8009194:	6923      	ldr	r3, [r4, #16]
 8009196:	3b01      	subs	r3, #1
 8009198:	6123      	str	r3, [r4, #16]
 800919a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800919e:	fa5f fa8a 	uxtb.w	sl, sl
 80091a2:	f1ba 0f02 	cmp.w	sl, #2
 80091a6:	d1ec      	bne.n	8009182 <_scanf_float+0x2c6>
 80091a8:	3d03      	subs	r5, #3
 80091aa:	b2ed      	uxtb	r5, r5
 80091ac:	1b76      	subs	r6, r6, r5
 80091ae:	6823      	ldr	r3, [r4, #0]
 80091b0:	05da      	lsls	r2, r3, #23
 80091b2:	d52f      	bpl.n	8009214 <_scanf_float+0x358>
 80091b4:	055b      	lsls	r3, r3, #21
 80091b6:	d510      	bpl.n	80091da <_scanf_float+0x31e>
 80091b8:	455e      	cmp	r6, fp
 80091ba:	f67f aebf 	bls.w	8008f3c <_scanf_float+0x80>
 80091be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80091c6:	463a      	mov	r2, r7
 80091c8:	4640      	mov	r0, r8
 80091ca:	4798      	blx	r3
 80091cc:	6923      	ldr	r3, [r4, #16]
 80091ce:	3b01      	subs	r3, #1
 80091d0:	6123      	str	r3, [r4, #16]
 80091d2:	e7f1      	b.n	80091b8 <_scanf_float+0x2fc>
 80091d4:	46aa      	mov	sl, r5
 80091d6:	9602      	str	r6, [sp, #8]
 80091d8:	e7df      	b.n	800919a <_scanf_float+0x2de>
 80091da:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80091de:	6923      	ldr	r3, [r4, #16]
 80091e0:	2965      	cmp	r1, #101	; 0x65
 80091e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80091e6:	f106 35ff 	add.w	r5, r6, #4294967295
 80091ea:	6123      	str	r3, [r4, #16]
 80091ec:	d00c      	beq.n	8009208 <_scanf_float+0x34c>
 80091ee:	2945      	cmp	r1, #69	; 0x45
 80091f0:	d00a      	beq.n	8009208 <_scanf_float+0x34c>
 80091f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091f6:	463a      	mov	r2, r7
 80091f8:	4640      	mov	r0, r8
 80091fa:	4798      	blx	r3
 80091fc:	6923      	ldr	r3, [r4, #16]
 80091fe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009202:	3b01      	subs	r3, #1
 8009204:	1eb5      	subs	r5, r6, #2
 8009206:	6123      	str	r3, [r4, #16]
 8009208:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800920c:	463a      	mov	r2, r7
 800920e:	4640      	mov	r0, r8
 8009210:	4798      	blx	r3
 8009212:	462e      	mov	r6, r5
 8009214:	6825      	ldr	r5, [r4, #0]
 8009216:	f015 0510 	ands.w	r5, r5, #16
 800921a:	d158      	bne.n	80092ce <_scanf_float+0x412>
 800921c:	7035      	strb	r5, [r6, #0]
 800921e:	6823      	ldr	r3, [r4, #0]
 8009220:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009228:	d11c      	bne.n	8009264 <_scanf_float+0x3a8>
 800922a:	9b01      	ldr	r3, [sp, #4]
 800922c:	454b      	cmp	r3, r9
 800922e:	eba3 0209 	sub.w	r2, r3, r9
 8009232:	d124      	bne.n	800927e <_scanf_float+0x3c2>
 8009234:	2200      	movs	r2, #0
 8009236:	4659      	mov	r1, fp
 8009238:	4640      	mov	r0, r8
 800923a:	f002 fbe5 	bl	800ba08 <_strtod_r>
 800923e:	9b03      	ldr	r3, [sp, #12]
 8009240:	6821      	ldr	r1, [r4, #0]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f011 0f02 	tst.w	r1, #2
 8009248:	ec57 6b10 	vmov	r6, r7, d0
 800924c:	f103 0204 	add.w	r2, r3, #4
 8009250:	d020      	beq.n	8009294 <_scanf_float+0x3d8>
 8009252:	9903      	ldr	r1, [sp, #12]
 8009254:	600a      	str	r2, [r1, #0]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	e9c3 6700 	strd	r6, r7, [r3]
 800925c:	68e3      	ldr	r3, [r4, #12]
 800925e:	3301      	adds	r3, #1
 8009260:	60e3      	str	r3, [r4, #12]
 8009262:	e66c      	b.n	8008f3e <_scanf_float+0x82>
 8009264:	9b04      	ldr	r3, [sp, #16]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d0e4      	beq.n	8009234 <_scanf_float+0x378>
 800926a:	9905      	ldr	r1, [sp, #20]
 800926c:	230a      	movs	r3, #10
 800926e:	462a      	mov	r2, r5
 8009270:	3101      	adds	r1, #1
 8009272:	4640      	mov	r0, r8
 8009274:	f002 fc50 	bl	800bb18 <_strtol_r>
 8009278:	9b04      	ldr	r3, [sp, #16]
 800927a:	9e05      	ldr	r6, [sp, #20]
 800927c:	1ac2      	subs	r2, r0, r3
 800927e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009282:	429e      	cmp	r6, r3
 8009284:	bf28      	it	cs
 8009286:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800928a:	4912      	ldr	r1, [pc, #72]	; (80092d4 <_scanf_float+0x418>)
 800928c:	4630      	mov	r0, r6
 800928e:	f000 f90b 	bl	80094a8 <siprintf>
 8009292:	e7cf      	b.n	8009234 <_scanf_float+0x378>
 8009294:	f011 0f04 	tst.w	r1, #4
 8009298:	9903      	ldr	r1, [sp, #12]
 800929a:	600a      	str	r2, [r1, #0]
 800929c:	d1db      	bne.n	8009256 <_scanf_float+0x39a>
 800929e:	f8d3 8000 	ldr.w	r8, [r3]
 80092a2:	ee10 2a10 	vmov	r2, s0
 80092a6:	ee10 0a10 	vmov	r0, s0
 80092aa:	463b      	mov	r3, r7
 80092ac:	4639      	mov	r1, r7
 80092ae:	f7f7 fc3d 	bl	8000b2c <__aeabi_dcmpun>
 80092b2:	b128      	cbz	r0, 80092c0 <_scanf_float+0x404>
 80092b4:	4808      	ldr	r0, [pc, #32]	; (80092d8 <_scanf_float+0x41c>)
 80092b6:	f000 f9f9 	bl	80096ac <nanf>
 80092ba:	ed88 0a00 	vstr	s0, [r8]
 80092be:	e7cd      	b.n	800925c <_scanf_float+0x3a0>
 80092c0:	4630      	mov	r0, r6
 80092c2:	4639      	mov	r1, r7
 80092c4:	f7f7 fc90 	bl	8000be8 <__aeabi_d2f>
 80092c8:	f8c8 0000 	str.w	r0, [r8]
 80092cc:	e7c6      	b.n	800925c <_scanf_float+0x3a0>
 80092ce:	2500      	movs	r5, #0
 80092d0:	e635      	b.n	8008f3e <_scanf_float+0x82>
 80092d2:	bf00      	nop
 80092d4:	0800dd6a 	.word	0x0800dd6a
 80092d8:	0800ddaa 	.word	0x0800ddaa

080092dc <std>:
 80092dc:	2300      	movs	r3, #0
 80092de:	b510      	push	{r4, lr}
 80092e0:	4604      	mov	r4, r0
 80092e2:	e9c0 3300 	strd	r3, r3, [r0]
 80092e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80092ea:	6083      	str	r3, [r0, #8]
 80092ec:	8181      	strh	r1, [r0, #12]
 80092ee:	6643      	str	r3, [r0, #100]	; 0x64
 80092f0:	81c2      	strh	r2, [r0, #14]
 80092f2:	6183      	str	r3, [r0, #24]
 80092f4:	4619      	mov	r1, r3
 80092f6:	2208      	movs	r2, #8
 80092f8:	305c      	adds	r0, #92	; 0x5c
 80092fa:	f000 f938 	bl	800956e <memset>
 80092fe:	4b0d      	ldr	r3, [pc, #52]	; (8009334 <std+0x58>)
 8009300:	6263      	str	r3, [r4, #36]	; 0x24
 8009302:	4b0d      	ldr	r3, [pc, #52]	; (8009338 <std+0x5c>)
 8009304:	62a3      	str	r3, [r4, #40]	; 0x28
 8009306:	4b0d      	ldr	r3, [pc, #52]	; (800933c <std+0x60>)
 8009308:	62e3      	str	r3, [r4, #44]	; 0x2c
 800930a:	4b0d      	ldr	r3, [pc, #52]	; (8009340 <std+0x64>)
 800930c:	6323      	str	r3, [r4, #48]	; 0x30
 800930e:	4b0d      	ldr	r3, [pc, #52]	; (8009344 <std+0x68>)
 8009310:	6224      	str	r4, [r4, #32]
 8009312:	429c      	cmp	r4, r3
 8009314:	d006      	beq.n	8009324 <std+0x48>
 8009316:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800931a:	4294      	cmp	r4, r2
 800931c:	d002      	beq.n	8009324 <std+0x48>
 800931e:	33d0      	adds	r3, #208	; 0xd0
 8009320:	429c      	cmp	r4, r3
 8009322:	d105      	bne.n	8009330 <std+0x54>
 8009324:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800932c:	f000 b9ac 	b.w	8009688 <__retarget_lock_init_recursive>
 8009330:	bd10      	pop	{r4, pc}
 8009332:	bf00      	nop
 8009334:	080094e9 	.word	0x080094e9
 8009338:	0800950b 	.word	0x0800950b
 800933c:	08009543 	.word	0x08009543
 8009340:	08009567 	.word	0x08009567
 8009344:	200026a0 	.word	0x200026a0

08009348 <stdio_exit_handler>:
 8009348:	4a02      	ldr	r2, [pc, #8]	; (8009354 <stdio_exit_handler+0xc>)
 800934a:	4903      	ldr	r1, [pc, #12]	; (8009358 <stdio_exit_handler+0x10>)
 800934c:	4803      	ldr	r0, [pc, #12]	; (800935c <stdio_exit_handler+0x14>)
 800934e:	f000 b869 	b.w	8009424 <_fwalk_sglue>
 8009352:	bf00      	nop
 8009354:	200006e0 	.word	0x200006e0
 8009358:	0800c769 	.word	0x0800c769
 800935c:	200006ec 	.word	0x200006ec

08009360 <cleanup_stdio>:
 8009360:	6841      	ldr	r1, [r0, #4]
 8009362:	4b0c      	ldr	r3, [pc, #48]	; (8009394 <cleanup_stdio+0x34>)
 8009364:	4299      	cmp	r1, r3
 8009366:	b510      	push	{r4, lr}
 8009368:	4604      	mov	r4, r0
 800936a:	d001      	beq.n	8009370 <cleanup_stdio+0x10>
 800936c:	f003 f9fc 	bl	800c768 <_fflush_r>
 8009370:	68a1      	ldr	r1, [r4, #8]
 8009372:	4b09      	ldr	r3, [pc, #36]	; (8009398 <cleanup_stdio+0x38>)
 8009374:	4299      	cmp	r1, r3
 8009376:	d002      	beq.n	800937e <cleanup_stdio+0x1e>
 8009378:	4620      	mov	r0, r4
 800937a:	f003 f9f5 	bl	800c768 <_fflush_r>
 800937e:	68e1      	ldr	r1, [r4, #12]
 8009380:	4b06      	ldr	r3, [pc, #24]	; (800939c <cleanup_stdio+0x3c>)
 8009382:	4299      	cmp	r1, r3
 8009384:	d004      	beq.n	8009390 <cleanup_stdio+0x30>
 8009386:	4620      	mov	r0, r4
 8009388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800938c:	f003 b9ec 	b.w	800c768 <_fflush_r>
 8009390:	bd10      	pop	{r4, pc}
 8009392:	bf00      	nop
 8009394:	200026a0 	.word	0x200026a0
 8009398:	20002708 	.word	0x20002708
 800939c:	20002770 	.word	0x20002770

080093a0 <global_stdio_init.part.0>:
 80093a0:	b510      	push	{r4, lr}
 80093a2:	4b0b      	ldr	r3, [pc, #44]	; (80093d0 <global_stdio_init.part.0+0x30>)
 80093a4:	4c0b      	ldr	r4, [pc, #44]	; (80093d4 <global_stdio_init.part.0+0x34>)
 80093a6:	4a0c      	ldr	r2, [pc, #48]	; (80093d8 <global_stdio_init.part.0+0x38>)
 80093a8:	601a      	str	r2, [r3, #0]
 80093aa:	4620      	mov	r0, r4
 80093ac:	2200      	movs	r2, #0
 80093ae:	2104      	movs	r1, #4
 80093b0:	f7ff ff94 	bl	80092dc <std>
 80093b4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80093b8:	2201      	movs	r2, #1
 80093ba:	2109      	movs	r1, #9
 80093bc:	f7ff ff8e 	bl	80092dc <std>
 80093c0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80093c4:	2202      	movs	r2, #2
 80093c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093ca:	2112      	movs	r1, #18
 80093cc:	f7ff bf86 	b.w	80092dc <std>
 80093d0:	200027d8 	.word	0x200027d8
 80093d4:	200026a0 	.word	0x200026a0
 80093d8:	08009349 	.word	0x08009349

080093dc <__sfp_lock_acquire>:
 80093dc:	4801      	ldr	r0, [pc, #4]	; (80093e4 <__sfp_lock_acquire+0x8>)
 80093de:	f000 b954 	b.w	800968a <__retarget_lock_acquire_recursive>
 80093e2:	bf00      	nop
 80093e4:	200027e1 	.word	0x200027e1

080093e8 <__sfp_lock_release>:
 80093e8:	4801      	ldr	r0, [pc, #4]	; (80093f0 <__sfp_lock_release+0x8>)
 80093ea:	f000 b94f 	b.w	800968c <__retarget_lock_release_recursive>
 80093ee:	bf00      	nop
 80093f0:	200027e1 	.word	0x200027e1

080093f4 <__sinit>:
 80093f4:	b510      	push	{r4, lr}
 80093f6:	4604      	mov	r4, r0
 80093f8:	f7ff fff0 	bl	80093dc <__sfp_lock_acquire>
 80093fc:	6a23      	ldr	r3, [r4, #32]
 80093fe:	b11b      	cbz	r3, 8009408 <__sinit+0x14>
 8009400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009404:	f7ff bff0 	b.w	80093e8 <__sfp_lock_release>
 8009408:	4b04      	ldr	r3, [pc, #16]	; (800941c <__sinit+0x28>)
 800940a:	6223      	str	r3, [r4, #32]
 800940c:	4b04      	ldr	r3, [pc, #16]	; (8009420 <__sinit+0x2c>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d1f5      	bne.n	8009400 <__sinit+0xc>
 8009414:	f7ff ffc4 	bl	80093a0 <global_stdio_init.part.0>
 8009418:	e7f2      	b.n	8009400 <__sinit+0xc>
 800941a:	bf00      	nop
 800941c:	08009361 	.word	0x08009361
 8009420:	200027d8 	.word	0x200027d8

08009424 <_fwalk_sglue>:
 8009424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009428:	4607      	mov	r7, r0
 800942a:	4688      	mov	r8, r1
 800942c:	4614      	mov	r4, r2
 800942e:	2600      	movs	r6, #0
 8009430:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009434:	f1b9 0901 	subs.w	r9, r9, #1
 8009438:	d505      	bpl.n	8009446 <_fwalk_sglue+0x22>
 800943a:	6824      	ldr	r4, [r4, #0]
 800943c:	2c00      	cmp	r4, #0
 800943e:	d1f7      	bne.n	8009430 <_fwalk_sglue+0xc>
 8009440:	4630      	mov	r0, r6
 8009442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009446:	89ab      	ldrh	r3, [r5, #12]
 8009448:	2b01      	cmp	r3, #1
 800944a:	d907      	bls.n	800945c <_fwalk_sglue+0x38>
 800944c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009450:	3301      	adds	r3, #1
 8009452:	d003      	beq.n	800945c <_fwalk_sglue+0x38>
 8009454:	4629      	mov	r1, r5
 8009456:	4638      	mov	r0, r7
 8009458:	47c0      	blx	r8
 800945a:	4306      	orrs	r6, r0
 800945c:	3568      	adds	r5, #104	; 0x68
 800945e:	e7e9      	b.n	8009434 <_fwalk_sglue+0x10>

08009460 <iprintf>:
 8009460:	b40f      	push	{r0, r1, r2, r3}
 8009462:	b507      	push	{r0, r1, r2, lr}
 8009464:	4906      	ldr	r1, [pc, #24]	; (8009480 <iprintf+0x20>)
 8009466:	ab04      	add	r3, sp, #16
 8009468:	6808      	ldr	r0, [r1, #0]
 800946a:	f853 2b04 	ldr.w	r2, [r3], #4
 800946e:	6881      	ldr	r1, [r0, #8]
 8009470:	9301      	str	r3, [sp, #4]
 8009472:	f002 fcd5 	bl	800be20 <_vfiprintf_r>
 8009476:	b003      	add	sp, #12
 8009478:	f85d eb04 	ldr.w	lr, [sp], #4
 800947c:	b004      	add	sp, #16
 800947e:	4770      	bx	lr
 8009480:	20000738 	.word	0x20000738

08009484 <iscanf>:
 8009484:	b40f      	push	{r0, r1, r2, r3}
 8009486:	b507      	push	{r0, r1, r2, lr}
 8009488:	4906      	ldr	r1, [pc, #24]	; (80094a4 <iscanf+0x20>)
 800948a:	ab04      	add	r3, sp, #16
 800948c:	6808      	ldr	r0, [r1, #0]
 800948e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009492:	6841      	ldr	r1, [r0, #4]
 8009494:	9301      	str	r3, [sp, #4]
 8009496:	f002 ff7f 	bl	800c398 <_vfiscanf_r>
 800949a:	b003      	add	sp, #12
 800949c:	f85d eb04 	ldr.w	lr, [sp], #4
 80094a0:	b004      	add	sp, #16
 80094a2:	4770      	bx	lr
 80094a4:	20000738 	.word	0x20000738

080094a8 <siprintf>:
 80094a8:	b40e      	push	{r1, r2, r3}
 80094aa:	b500      	push	{lr}
 80094ac:	b09c      	sub	sp, #112	; 0x70
 80094ae:	ab1d      	add	r3, sp, #116	; 0x74
 80094b0:	9002      	str	r0, [sp, #8]
 80094b2:	9006      	str	r0, [sp, #24]
 80094b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80094b8:	4809      	ldr	r0, [pc, #36]	; (80094e0 <siprintf+0x38>)
 80094ba:	9107      	str	r1, [sp, #28]
 80094bc:	9104      	str	r1, [sp, #16]
 80094be:	4909      	ldr	r1, [pc, #36]	; (80094e4 <siprintf+0x3c>)
 80094c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80094c4:	9105      	str	r1, [sp, #20]
 80094c6:	6800      	ldr	r0, [r0, #0]
 80094c8:	9301      	str	r3, [sp, #4]
 80094ca:	a902      	add	r1, sp, #8
 80094cc:	f002 fb80 	bl	800bbd0 <_svfiprintf_r>
 80094d0:	9b02      	ldr	r3, [sp, #8]
 80094d2:	2200      	movs	r2, #0
 80094d4:	701a      	strb	r2, [r3, #0]
 80094d6:	b01c      	add	sp, #112	; 0x70
 80094d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80094dc:	b003      	add	sp, #12
 80094de:	4770      	bx	lr
 80094e0:	20000738 	.word	0x20000738
 80094e4:	ffff0208 	.word	0xffff0208

080094e8 <__sread>:
 80094e8:	b510      	push	{r4, lr}
 80094ea:	460c      	mov	r4, r1
 80094ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094f0:	f000 f86c 	bl	80095cc <_read_r>
 80094f4:	2800      	cmp	r0, #0
 80094f6:	bfab      	itete	ge
 80094f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80094fa:	89a3      	ldrhlt	r3, [r4, #12]
 80094fc:	181b      	addge	r3, r3, r0
 80094fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009502:	bfac      	ite	ge
 8009504:	6563      	strge	r3, [r4, #84]	; 0x54
 8009506:	81a3      	strhlt	r3, [r4, #12]
 8009508:	bd10      	pop	{r4, pc}

0800950a <__swrite>:
 800950a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800950e:	461f      	mov	r7, r3
 8009510:	898b      	ldrh	r3, [r1, #12]
 8009512:	05db      	lsls	r3, r3, #23
 8009514:	4605      	mov	r5, r0
 8009516:	460c      	mov	r4, r1
 8009518:	4616      	mov	r6, r2
 800951a:	d505      	bpl.n	8009528 <__swrite+0x1e>
 800951c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009520:	2302      	movs	r3, #2
 8009522:	2200      	movs	r2, #0
 8009524:	f000 f840 	bl	80095a8 <_lseek_r>
 8009528:	89a3      	ldrh	r3, [r4, #12]
 800952a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800952e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009532:	81a3      	strh	r3, [r4, #12]
 8009534:	4632      	mov	r2, r6
 8009536:	463b      	mov	r3, r7
 8009538:	4628      	mov	r0, r5
 800953a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800953e:	f000 b867 	b.w	8009610 <_write_r>

08009542 <__sseek>:
 8009542:	b510      	push	{r4, lr}
 8009544:	460c      	mov	r4, r1
 8009546:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800954a:	f000 f82d 	bl	80095a8 <_lseek_r>
 800954e:	1c43      	adds	r3, r0, #1
 8009550:	89a3      	ldrh	r3, [r4, #12]
 8009552:	bf15      	itete	ne
 8009554:	6560      	strne	r0, [r4, #84]	; 0x54
 8009556:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800955a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800955e:	81a3      	strheq	r3, [r4, #12]
 8009560:	bf18      	it	ne
 8009562:	81a3      	strhne	r3, [r4, #12]
 8009564:	bd10      	pop	{r4, pc}

08009566 <__sclose>:
 8009566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800956a:	f000 b80d 	b.w	8009588 <_close_r>

0800956e <memset>:
 800956e:	4402      	add	r2, r0
 8009570:	4603      	mov	r3, r0
 8009572:	4293      	cmp	r3, r2
 8009574:	d100      	bne.n	8009578 <memset+0xa>
 8009576:	4770      	bx	lr
 8009578:	f803 1b01 	strb.w	r1, [r3], #1
 800957c:	e7f9      	b.n	8009572 <memset+0x4>
	...

08009580 <_localeconv_r>:
 8009580:	4800      	ldr	r0, [pc, #0]	; (8009584 <_localeconv_r+0x4>)
 8009582:	4770      	bx	lr
 8009584:	2000082c 	.word	0x2000082c

08009588 <_close_r>:
 8009588:	b538      	push	{r3, r4, r5, lr}
 800958a:	4d06      	ldr	r5, [pc, #24]	; (80095a4 <_close_r+0x1c>)
 800958c:	2300      	movs	r3, #0
 800958e:	4604      	mov	r4, r0
 8009590:	4608      	mov	r0, r1
 8009592:	602b      	str	r3, [r5, #0]
 8009594:	f7fa fce6 	bl	8003f64 <_close>
 8009598:	1c43      	adds	r3, r0, #1
 800959a:	d102      	bne.n	80095a2 <_close_r+0x1a>
 800959c:	682b      	ldr	r3, [r5, #0]
 800959e:	b103      	cbz	r3, 80095a2 <_close_r+0x1a>
 80095a0:	6023      	str	r3, [r4, #0]
 80095a2:	bd38      	pop	{r3, r4, r5, pc}
 80095a4:	200027dc 	.word	0x200027dc

080095a8 <_lseek_r>:
 80095a8:	b538      	push	{r3, r4, r5, lr}
 80095aa:	4d07      	ldr	r5, [pc, #28]	; (80095c8 <_lseek_r+0x20>)
 80095ac:	4604      	mov	r4, r0
 80095ae:	4608      	mov	r0, r1
 80095b0:	4611      	mov	r1, r2
 80095b2:	2200      	movs	r2, #0
 80095b4:	602a      	str	r2, [r5, #0]
 80095b6:	461a      	mov	r2, r3
 80095b8:	f7fa fcfb 	bl	8003fb2 <_lseek>
 80095bc:	1c43      	adds	r3, r0, #1
 80095be:	d102      	bne.n	80095c6 <_lseek_r+0x1e>
 80095c0:	682b      	ldr	r3, [r5, #0]
 80095c2:	b103      	cbz	r3, 80095c6 <_lseek_r+0x1e>
 80095c4:	6023      	str	r3, [r4, #0]
 80095c6:	bd38      	pop	{r3, r4, r5, pc}
 80095c8:	200027dc 	.word	0x200027dc

080095cc <_read_r>:
 80095cc:	b538      	push	{r3, r4, r5, lr}
 80095ce:	4d07      	ldr	r5, [pc, #28]	; (80095ec <_read_r+0x20>)
 80095d0:	4604      	mov	r4, r0
 80095d2:	4608      	mov	r0, r1
 80095d4:	4611      	mov	r1, r2
 80095d6:	2200      	movs	r2, #0
 80095d8:	602a      	str	r2, [r5, #0]
 80095da:	461a      	mov	r2, r3
 80095dc:	f7fa fc89 	bl	8003ef2 <_read>
 80095e0:	1c43      	adds	r3, r0, #1
 80095e2:	d102      	bne.n	80095ea <_read_r+0x1e>
 80095e4:	682b      	ldr	r3, [r5, #0]
 80095e6:	b103      	cbz	r3, 80095ea <_read_r+0x1e>
 80095e8:	6023      	str	r3, [r4, #0]
 80095ea:	bd38      	pop	{r3, r4, r5, pc}
 80095ec:	200027dc 	.word	0x200027dc

080095f0 <_sbrk_r>:
 80095f0:	b538      	push	{r3, r4, r5, lr}
 80095f2:	4d06      	ldr	r5, [pc, #24]	; (800960c <_sbrk_r+0x1c>)
 80095f4:	2300      	movs	r3, #0
 80095f6:	4604      	mov	r4, r0
 80095f8:	4608      	mov	r0, r1
 80095fa:	602b      	str	r3, [r5, #0]
 80095fc:	f7fa fce6 	bl	8003fcc <_sbrk>
 8009600:	1c43      	adds	r3, r0, #1
 8009602:	d102      	bne.n	800960a <_sbrk_r+0x1a>
 8009604:	682b      	ldr	r3, [r5, #0]
 8009606:	b103      	cbz	r3, 800960a <_sbrk_r+0x1a>
 8009608:	6023      	str	r3, [r4, #0]
 800960a:	bd38      	pop	{r3, r4, r5, pc}
 800960c:	200027dc 	.word	0x200027dc

08009610 <_write_r>:
 8009610:	b538      	push	{r3, r4, r5, lr}
 8009612:	4d07      	ldr	r5, [pc, #28]	; (8009630 <_write_r+0x20>)
 8009614:	4604      	mov	r4, r0
 8009616:	4608      	mov	r0, r1
 8009618:	4611      	mov	r1, r2
 800961a:	2200      	movs	r2, #0
 800961c:	602a      	str	r2, [r5, #0]
 800961e:	461a      	mov	r2, r3
 8009620:	f7fa fc84 	bl	8003f2c <_write>
 8009624:	1c43      	adds	r3, r0, #1
 8009626:	d102      	bne.n	800962e <_write_r+0x1e>
 8009628:	682b      	ldr	r3, [r5, #0]
 800962a:	b103      	cbz	r3, 800962e <_write_r+0x1e>
 800962c:	6023      	str	r3, [r4, #0]
 800962e:	bd38      	pop	{r3, r4, r5, pc}
 8009630:	200027dc 	.word	0x200027dc

08009634 <__errno>:
 8009634:	4b01      	ldr	r3, [pc, #4]	; (800963c <__errno+0x8>)
 8009636:	6818      	ldr	r0, [r3, #0]
 8009638:	4770      	bx	lr
 800963a:	bf00      	nop
 800963c:	20000738 	.word	0x20000738

08009640 <__libc_init_array>:
 8009640:	b570      	push	{r4, r5, r6, lr}
 8009642:	4d0d      	ldr	r5, [pc, #52]	; (8009678 <__libc_init_array+0x38>)
 8009644:	4c0d      	ldr	r4, [pc, #52]	; (800967c <__libc_init_array+0x3c>)
 8009646:	1b64      	subs	r4, r4, r5
 8009648:	10a4      	asrs	r4, r4, #2
 800964a:	2600      	movs	r6, #0
 800964c:	42a6      	cmp	r6, r4
 800964e:	d109      	bne.n	8009664 <__libc_init_array+0x24>
 8009650:	4d0b      	ldr	r5, [pc, #44]	; (8009680 <__libc_init_array+0x40>)
 8009652:	4c0c      	ldr	r4, [pc, #48]	; (8009684 <__libc_init_array+0x44>)
 8009654:	f003 ffd8 	bl	800d608 <_init>
 8009658:	1b64      	subs	r4, r4, r5
 800965a:	10a4      	asrs	r4, r4, #2
 800965c:	2600      	movs	r6, #0
 800965e:	42a6      	cmp	r6, r4
 8009660:	d105      	bne.n	800966e <__libc_init_array+0x2e>
 8009662:	bd70      	pop	{r4, r5, r6, pc}
 8009664:	f855 3b04 	ldr.w	r3, [r5], #4
 8009668:	4798      	blx	r3
 800966a:	3601      	adds	r6, #1
 800966c:	e7ee      	b.n	800964c <__libc_init_array+0xc>
 800966e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009672:	4798      	blx	r3
 8009674:	3601      	adds	r6, #1
 8009676:	e7f2      	b.n	800965e <__libc_init_array+0x1e>
 8009678:	0800e180 	.word	0x0800e180
 800967c:	0800e180 	.word	0x0800e180
 8009680:	0800e180 	.word	0x0800e180
 8009684:	0800e184 	.word	0x0800e184

08009688 <__retarget_lock_init_recursive>:
 8009688:	4770      	bx	lr

0800968a <__retarget_lock_acquire_recursive>:
 800968a:	4770      	bx	lr

0800968c <__retarget_lock_release_recursive>:
 800968c:	4770      	bx	lr

0800968e <memcpy>:
 800968e:	440a      	add	r2, r1
 8009690:	4291      	cmp	r1, r2
 8009692:	f100 33ff 	add.w	r3, r0, #4294967295
 8009696:	d100      	bne.n	800969a <memcpy+0xc>
 8009698:	4770      	bx	lr
 800969a:	b510      	push	{r4, lr}
 800969c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096a4:	4291      	cmp	r1, r2
 80096a6:	d1f9      	bne.n	800969c <memcpy+0xe>
 80096a8:	bd10      	pop	{r4, pc}
	...

080096ac <nanf>:
 80096ac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80096b4 <nanf+0x8>
 80096b0:	4770      	bx	lr
 80096b2:	bf00      	nop
 80096b4:	7fc00000 	.word	0x7fc00000

080096b8 <__assert_func>:
 80096b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80096ba:	4614      	mov	r4, r2
 80096bc:	461a      	mov	r2, r3
 80096be:	4b09      	ldr	r3, [pc, #36]	; (80096e4 <__assert_func+0x2c>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4605      	mov	r5, r0
 80096c4:	68d8      	ldr	r0, [r3, #12]
 80096c6:	b14c      	cbz	r4, 80096dc <__assert_func+0x24>
 80096c8:	4b07      	ldr	r3, [pc, #28]	; (80096e8 <__assert_func+0x30>)
 80096ca:	9100      	str	r1, [sp, #0]
 80096cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80096d0:	4906      	ldr	r1, [pc, #24]	; (80096ec <__assert_func+0x34>)
 80096d2:	462b      	mov	r3, r5
 80096d4:	f003 f870 	bl	800c7b8 <fiprintf>
 80096d8:	f003 fac6 	bl	800cc68 <abort>
 80096dc:	4b04      	ldr	r3, [pc, #16]	; (80096f0 <__assert_func+0x38>)
 80096de:	461c      	mov	r4, r3
 80096e0:	e7f3      	b.n	80096ca <__assert_func+0x12>
 80096e2:	bf00      	nop
 80096e4:	20000738 	.word	0x20000738
 80096e8:	0800dd6f 	.word	0x0800dd6f
 80096ec:	0800dd7c 	.word	0x0800dd7c
 80096f0:	0800ddaa 	.word	0x0800ddaa

080096f4 <quorem>:
 80096f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096f8:	6903      	ldr	r3, [r0, #16]
 80096fa:	690c      	ldr	r4, [r1, #16]
 80096fc:	42a3      	cmp	r3, r4
 80096fe:	4607      	mov	r7, r0
 8009700:	db7e      	blt.n	8009800 <quorem+0x10c>
 8009702:	3c01      	subs	r4, #1
 8009704:	f101 0814 	add.w	r8, r1, #20
 8009708:	f100 0514 	add.w	r5, r0, #20
 800970c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009710:	9301      	str	r3, [sp, #4]
 8009712:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009716:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800971a:	3301      	adds	r3, #1
 800971c:	429a      	cmp	r2, r3
 800971e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009722:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009726:	fbb2 f6f3 	udiv	r6, r2, r3
 800972a:	d331      	bcc.n	8009790 <quorem+0x9c>
 800972c:	f04f 0e00 	mov.w	lr, #0
 8009730:	4640      	mov	r0, r8
 8009732:	46ac      	mov	ip, r5
 8009734:	46f2      	mov	sl, lr
 8009736:	f850 2b04 	ldr.w	r2, [r0], #4
 800973a:	b293      	uxth	r3, r2
 800973c:	fb06 e303 	mla	r3, r6, r3, lr
 8009740:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009744:	0c1a      	lsrs	r2, r3, #16
 8009746:	b29b      	uxth	r3, r3
 8009748:	ebaa 0303 	sub.w	r3, sl, r3
 800974c:	f8dc a000 	ldr.w	sl, [ip]
 8009750:	fa13 f38a 	uxtah	r3, r3, sl
 8009754:	fb06 220e 	mla	r2, r6, lr, r2
 8009758:	9300      	str	r3, [sp, #0]
 800975a:	9b00      	ldr	r3, [sp, #0]
 800975c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009760:	b292      	uxth	r2, r2
 8009762:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009766:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800976a:	f8bd 3000 	ldrh.w	r3, [sp]
 800976e:	4581      	cmp	r9, r0
 8009770:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009774:	f84c 3b04 	str.w	r3, [ip], #4
 8009778:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800977c:	d2db      	bcs.n	8009736 <quorem+0x42>
 800977e:	f855 300b 	ldr.w	r3, [r5, fp]
 8009782:	b92b      	cbnz	r3, 8009790 <quorem+0x9c>
 8009784:	9b01      	ldr	r3, [sp, #4]
 8009786:	3b04      	subs	r3, #4
 8009788:	429d      	cmp	r5, r3
 800978a:	461a      	mov	r2, r3
 800978c:	d32c      	bcc.n	80097e8 <quorem+0xf4>
 800978e:	613c      	str	r4, [r7, #16]
 8009790:	4638      	mov	r0, r7
 8009792:	f001 f93d 	bl	800aa10 <__mcmp>
 8009796:	2800      	cmp	r0, #0
 8009798:	db22      	blt.n	80097e0 <quorem+0xec>
 800979a:	3601      	adds	r6, #1
 800979c:	4629      	mov	r1, r5
 800979e:	2000      	movs	r0, #0
 80097a0:	f858 2b04 	ldr.w	r2, [r8], #4
 80097a4:	f8d1 c000 	ldr.w	ip, [r1]
 80097a8:	b293      	uxth	r3, r2
 80097aa:	1ac3      	subs	r3, r0, r3
 80097ac:	0c12      	lsrs	r2, r2, #16
 80097ae:	fa13 f38c 	uxtah	r3, r3, ip
 80097b2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80097b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097ba:	b29b      	uxth	r3, r3
 80097bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097c0:	45c1      	cmp	r9, r8
 80097c2:	f841 3b04 	str.w	r3, [r1], #4
 80097c6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80097ca:	d2e9      	bcs.n	80097a0 <quorem+0xac>
 80097cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097d4:	b922      	cbnz	r2, 80097e0 <quorem+0xec>
 80097d6:	3b04      	subs	r3, #4
 80097d8:	429d      	cmp	r5, r3
 80097da:	461a      	mov	r2, r3
 80097dc:	d30a      	bcc.n	80097f4 <quorem+0x100>
 80097de:	613c      	str	r4, [r7, #16]
 80097e0:	4630      	mov	r0, r6
 80097e2:	b003      	add	sp, #12
 80097e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097e8:	6812      	ldr	r2, [r2, #0]
 80097ea:	3b04      	subs	r3, #4
 80097ec:	2a00      	cmp	r2, #0
 80097ee:	d1ce      	bne.n	800978e <quorem+0x9a>
 80097f0:	3c01      	subs	r4, #1
 80097f2:	e7c9      	b.n	8009788 <quorem+0x94>
 80097f4:	6812      	ldr	r2, [r2, #0]
 80097f6:	3b04      	subs	r3, #4
 80097f8:	2a00      	cmp	r2, #0
 80097fa:	d1f0      	bne.n	80097de <quorem+0xea>
 80097fc:	3c01      	subs	r4, #1
 80097fe:	e7eb      	b.n	80097d8 <quorem+0xe4>
 8009800:	2000      	movs	r0, #0
 8009802:	e7ee      	b.n	80097e2 <quorem+0xee>
 8009804:	0000      	movs	r0, r0
	...

08009808 <_dtoa_r>:
 8009808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800980c:	ed2d 8b04 	vpush	{d8-d9}
 8009810:	69c5      	ldr	r5, [r0, #28]
 8009812:	b093      	sub	sp, #76	; 0x4c
 8009814:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009818:	ec57 6b10 	vmov	r6, r7, d0
 800981c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009820:	9107      	str	r1, [sp, #28]
 8009822:	4604      	mov	r4, r0
 8009824:	920a      	str	r2, [sp, #40]	; 0x28
 8009826:	930d      	str	r3, [sp, #52]	; 0x34
 8009828:	b975      	cbnz	r5, 8009848 <_dtoa_r+0x40>
 800982a:	2010      	movs	r0, #16
 800982c:	f7fe fdfc 	bl	8008428 <malloc>
 8009830:	4602      	mov	r2, r0
 8009832:	61e0      	str	r0, [r4, #28]
 8009834:	b920      	cbnz	r0, 8009840 <_dtoa_r+0x38>
 8009836:	4bae      	ldr	r3, [pc, #696]	; (8009af0 <_dtoa_r+0x2e8>)
 8009838:	21ef      	movs	r1, #239	; 0xef
 800983a:	48ae      	ldr	r0, [pc, #696]	; (8009af4 <_dtoa_r+0x2ec>)
 800983c:	f7ff ff3c 	bl	80096b8 <__assert_func>
 8009840:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009844:	6005      	str	r5, [r0, #0]
 8009846:	60c5      	str	r5, [r0, #12]
 8009848:	69e3      	ldr	r3, [r4, #28]
 800984a:	6819      	ldr	r1, [r3, #0]
 800984c:	b151      	cbz	r1, 8009864 <_dtoa_r+0x5c>
 800984e:	685a      	ldr	r2, [r3, #4]
 8009850:	604a      	str	r2, [r1, #4]
 8009852:	2301      	movs	r3, #1
 8009854:	4093      	lsls	r3, r2
 8009856:	608b      	str	r3, [r1, #8]
 8009858:	4620      	mov	r0, r4
 800985a:	f000 fe53 	bl	800a504 <_Bfree>
 800985e:	69e3      	ldr	r3, [r4, #28]
 8009860:	2200      	movs	r2, #0
 8009862:	601a      	str	r2, [r3, #0]
 8009864:	1e3b      	subs	r3, r7, #0
 8009866:	bfbb      	ittet	lt
 8009868:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800986c:	9303      	strlt	r3, [sp, #12]
 800986e:	2300      	movge	r3, #0
 8009870:	2201      	movlt	r2, #1
 8009872:	bfac      	ite	ge
 8009874:	f8c8 3000 	strge.w	r3, [r8]
 8009878:	f8c8 2000 	strlt.w	r2, [r8]
 800987c:	4b9e      	ldr	r3, [pc, #632]	; (8009af8 <_dtoa_r+0x2f0>)
 800987e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009882:	ea33 0308 	bics.w	r3, r3, r8
 8009886:	d11b      	bne.n	80098c0 <_dtoa_r+0xb8>
 8009888:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800988a:	f242 730f 	movw	r3, #9999	; 0x270f
 800988e:	6013      	str	r3, [r2, #0]
 8009890:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009894:	4333      	orrs	r3, r6
 8009896:	f000 8593 	beq.w	800a3c0 <_dtoa_r+0xbb8>
 800989a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800989c:	b963      	cbnz	r3, 80098b8 <_dtoa_r+0xb0>
 800989e:	4b97      	ldr	r3, [pc, #604]	; (8009afc <_dtoa_r+0x2f4>)
 80098a0:	e027      	b.n	80098f2 <_dtoa_r+0xea>
 80098a2:	4b97      	ldr	r3, [pc, #604]	; (8009b00 <_dtoa_r+0x2f8>)
 80098a4:	9300      	str	r3, [sp, #0]
 80098a6:	3308      	adds	r3, #8
 80098a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80098aa:	6013      	str	r3, [r2, #0]
 80098ac:	9800      	ldr	r0, [sp, #0]
 80098ae:	b013      	add	sp, #76	; 0x4c
 80098b0:	ecbd 8b04 	vpop	{d8-d9}
 80098b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098b8:	4b90      	ldr	r3, [pc, #576]	; (8009afc <_dtoa_r+0x2f4>)
 80098ba:	9300      	str	r3, [sp, #0]
 80098bc:	3303      	adds	r3, #3
 80098be:	e7f3      	b.n	80098a8 <_dtoa_r+0xa0>
 80098c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80098c4:	2200      	movs	r2, #0
 80098c6:	ec51 0b17 	vmov	r0, r1, d7
 80098ca:	eeb0 8a47 	vmov.f32	s16, s14
 80098ce:	eef0 8a67 	vmov.f32	s17, s15
 80098d2:	2300      	movs	r3, #0
 80098d4:	f7f7 f8f8 	bl	8000ac8 <__aeabi_dcmpeq>
 80098d8:	4681      	mov	r9, r0
 80098da:	b160      	cbz	r0, 80098f6 <_dtoa_r+0xee>
 80098dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80098de:	2301      	movs	r3, #1
 80098e0:	6013      	str	r3, [r2, #0]
 80098e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	f000 8568 	beq.w	800a3ba <_dtoa_r+0xbb2>
 80098ea:	4b86      	ldr	r3, [pc, #536]	; (8009b04 <_dtoa_r+0x2fc>)
 80098ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80098ee:	6013      	str	r3, [r2, #0]
 80098f0:	3b01      	subs	r3, #1
 80098f2:	9300      	str	r3, [sp, #0]
 80098f4:	e7da      	b.n	80098ac <_dtoa_r+0xa4>
 80098f6:	aa10      	add	r2, sp, #64	; 0x40
 80098f8:	a911      	add	r1, sp, #68	; 0x44
 80098fa:	4620      	mov	r0, r4
 80098fc:	eeb0 0a48 	vmov.f32	s0, s16
 8009900:	eef0 0a68 	vmov.f32	s1, s17
 8009904:	f001 f99a 	bl	800ac3c <__d2b>
 8009908:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800990c:	4682      	mov	sl, r0
 800990e:	2d00      	cmp	r5, #0
 8009910:	d07f      	beq.n	8009a12 <_dtoa_r+0x20a>
 8009912:	ee18 3a90 	vmov	r3, s17
 8009916:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800991a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800991e:	ec51 0b18 	vmov	r0, r1, d8
 8009922:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009926:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800992a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800992e:	4619      	mov	r1, r3
 8009930:	2200      	movs	r2, #0
 8009932:	4b75      	ldr	r3, [pc, #468]	; (8009b08 <_dtoa_r+0x300>)
 8009934:	f7f6 fca8 	bl	8000288 <__aeabi_dsub>
 8009938:	a367      	add	r3, pc, #412	; (adr r3, 8009ad8 <_dtoa_r+0x2d0>)
 800993a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800993e:	f7f6 fe5b 	bl	80005f8 <__aeabi_dmul>
 8009942:	a367      	add	r3, pc, #412	; (adr r3, 8009ae0 <_dtoa_r+0x2d8>)
 8009944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009948:	f7f6 fca0 	bl	800028c <__adddf3>
 800994c:	4606      	mov	r6, r0
 800994e:	4628      	mov	r0, r5
 8009950:	460f      	mov	r7, r1
 8009952:	f7f6 fde7 	bl	8000524 <__aeabi_i2d>
 8009956:	a364      	add	r3, pc, #400	; (adr r3, 8009ae8 <_dtoa_r+0x2e0>)
 8009958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800995c:	f7f6 fe4c 	bl	80005f8 <__aeabi_dmul>
 8009960:	4602      	mov	r2, r0
 8009962:	460b      	mov	r3, r1
 8009964:	4630      	mov	r0, r6
 8009966:	4639      	mov	r1, r7
 8009968:	f7f6 fc90 	bl	800028c <__adddf3>
 800996c:	4606      	mov	r6, r0
 800996e:	460f      	mov	r7, r1
 8009970:	f7f7 f8f2 	bl	8000b58 <__aeabi_d2iz>
 8009974:	2200      	movs	r2, #0
 8009976:	4683      	mov	fp, r0
 8009978:	2300      	movs	r3, #0
 800997a:	4630      	mov	r0, r6
 800997c:	4639      	mov	r1, r7
 800997e:	f7f7 f8ad 	bl	8000adc <__aeabi_dcmplt>
 8009982:	b148      	cbz	r0, 8009998 <_dtoa_r+0x190>
 8009984:	4658      	mov	r0, fp
 8009986:	f7f6 fdcd 	bl	8000524 <__aeabi_i2d>
 800998a:	4632      	mov	r2, r6
 800998c:	463b      	mov	r3, r7
 800998e:	f7f7 f89b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009992:	b908      	cbnz	r0, 8009998 <_dtoa_r+0x190>
 8009994:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009998:	f1bb 0f16 	cmp.w	fp, #22
 800999c:	d857      	bhi.n	8009a4e <_dtoa_r+0x246>
 800999e:	4b5b      	ldr	r3, [pc, #364]	; (8009b0c <_dtoa_r+0x304>)
 80099a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80099a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a8:	ec51 0b18 	vmov	r0, r1, d8
 80099ac:	f7f7 f896 	bl	8000adc <__aeabi_dcmplt>
 80099b0:	2800      	cmp	r0, #0
 80099b2:	d04e      	beq.n	8009a52 <_dtoa_r+0x24a>
 80099b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80099b8:	2300      	movs	r3, #0
 80099ba:	930c      	str	r3, [sp, #48]	; 0x30
 80099bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80099be:	1b5b      	subs	r3, r3, r5
 80099c0:	1e5a      	subs	r2, r3, #1
 80099c2:	bf45      	ittet	mi
 80099c4:	f1c3 0301 	rsbmi	r3, r3, #1
 80099c8:	9305      	strmi	r3, [sp, #20]
 80099ca:	2300      	movpl	r3, #0
 80099cc:	2300      	movmi	r3, #0
 80099ce:	9206      	str	r2, [sp, #24]
 80099d0:	bf54      	ite	pl
 80099d2:	9305      	strpl	r3, [sp, #20]
 80099d4:	9306      	strmi	r3, [sp, #24]
 80099d6:	f1bb 0f00 	cmp.w	fp, #0
 80099da:	db3c      	blt.n	8009a56 <_dtoa_r+0x24e>
 80099dc:	9b06      	ldr	r3, [sp, #24]
 80099de:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80099e2:	445b      	add	r3, fp
 80099e4:	9306      	str	r3, [sp, #24]
 80099e6:	2300      	movs	r3, #0
 80099e8:	9308      	str	r3, [sp, #32]
 80099ea:	9b07      	ldr	r3, [sp, #28]
 80099ec:	2b09      	cmp	r3, #9
 80099ee:	d868      	bhi.n	8009ac2 <_dtoa_r+0x2ba>
 80099f0:	2b05      	cmp	r3, #5
 80099f2:	bfc4      	itt	gt
 80099f4:	3b04      	subgt	r3, #4
 80099f6:	9307      	strgt	r3, [sp, #28]
 80099f8:	9b07      	ldr	r3, [sp, #28]
 80099fa:	f1a3 0302 	sub.w	r3, r3, #2
 80099fe:	bfcc      	ite	gt
 8009a00:	2500      	movgt	r5, #0
 8009a02:	2501      	movle	r5, #1
 8009a04:	2b03      	cmp	r3, #3
 8009a06:	f200 8085 	bhi.w	8009b14 <_dtoa_r+0x30c>
 8009a0a:	e8df f003 	tbb	[pc, r3]
 8009a0e:	3b2e      	.short	0x3b2e
 8009a10:	5839      	.short	0x5839
 8009a12:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009a16:	441d      	add	r5, r3
 8009a18:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009a1c:	2b20      	cmp	r3, #32
 8009a1e:	bfc1      	itttt	gt
 8009a20:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009a24:	fa08 f803 	lslgt.w	r8, r8, r3
 8009a28:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009a2c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009a30:	bfd6      	itet	le
 8009a32:	f1c3 0320 	rsble	r3, r3, #32
 8009a36:	ea48 0003 	orrgt.w	r0, r8, r3
 8009a3a:	fa06 f003 	lslle.w	r0, r6, r3
 8009a3e:	f7f6 fd61 	bl	8000504 <__aeabi_ui2d>
 8009a42:	2201      	movs	r2, #1
 8009a44:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009a48:	3d01      	subs	r5, #1
 8009a4a:	920e      	str	r2, [sp, #56]	; 0x38
 8009a4c:	e76f      	b.n	800992e <_dtoa_r+0x126>
 8009a4e:	2301      	movs	r3, #1
 8009a50:	e7b3      	b.n	80099ba <_dtoa_r+0x1b2>
 8009a52:	900c      	str	r0, [sp, #48]	; 0x30
 8009a54:	e7b2      	b.n	80099bc <_dtoa_r+0x1b4>
 8009a56:	9b05      	ldr	r3, [sp, #20]
 8009a58:	eba3 030b 	sub.w	r3, r3, fp
 8009a5c:	9305      	str	r3, [sp, #20]
 8009a5e:	f1cb 0300 	rsb	r3, fp, #0
 8009a62:	9308      	str	r3, [sp, #32]
 8009a64:	2300      	movs	r3, #0
 8009a66:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a68:	e7bf      	b.n	80099ea <_dtoa_r+0x1e2>
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	9309      	str	r3, [sp, #36]	; 0x24
 8009a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	dc52      	bgt.n	8009b1a <_dtoa_r+0x312>
 8009a74:	2301      	movs	r3, #1
 8009a76:	9301      	str	r3, [sp, #4]
 8009a78:	9304      	str	r3, [sp, #16]
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	920a      	str	r2, [sp, #40]	; 0x28
 8009a7e:	e00b      	b.n	8009a98 <_dtoa_r+0x290>
 8009a80:	2301      	movs	r3, #1
 8009a82:	e7f3      	b.n	8009a6c <_dtoa_r+0x264>
 8009a84:	2300      	movs	r3, #0
 8009a86:	9309      	str	r3, [sp, #36]	; 0x24
 8009a88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a8a:	445b      	add	r3, fp
 8009a8c:	9301      	str	r3, [sp, #4]
 8009a8e:	3301      	adds	r3, #1
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	9304      	str	r3, [sp, #16]
 8009a94:	bfb8      	it	lt
 8009a96:	2301      	movlt	r3, #1
 8009a98:	69e0      	ldr	r0, [r4, #28]
 8009a9a:	2100      	movs	r1, #0
 8009a9c:	2204      	movs	r2, #4
 8009a9e:	f102 0614 	add.w	r6, r2, #20
 8009aa2:	429e      	cmp	r6, r3
 8009aa4:	d93d      	bls.n	8009b22 <_dtoa_r+0x31a>
 8009aa6:	6041      	str	r1, [r0, #4]
 8009aa8:	4620      	mov	r0, r4
 8009aaa:	f000 fceb 	bl	800a484 <_Balloc>
 8009aae:	9000      	str	r0, [sp, #0]
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	d139      	bne.n	8009b28 <_dtoa_r+0x320>
 8009ab4:	4b16      	ldr	r3, [pc, #88]	; (8009b10 <_dtoa_r+0x308>)
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	f240 11af 	movw	r1, #431	; 0x1af
 8009abc:	e6bd      	b.n	800983a <_dtoa_r+0x32>
 8009abe:	2301      	movs	r3, #1
 8009ac0:	e7e1      	b.n	8009a86 <_dtoa_r+0x27e>
 8009ac2:	2501      	movs	r5, #1
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	9307      	str	r3, [sp, #28]
 8009ac8:	9509      	str	r5, [sp, #36]	; 0x24
 8009aca:	f04f 33ff 	mov.w	r3, #4294967295
 8009ace:	9301      	str	r3, [sp, #4]
 8009ad0:	9304      	str	r3, [sp, #16]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	2312      	movs	r3, #18
 8009ad6:	e7d1      	b.n	8009a7c <_dtoa_r+0x274>
 8009ad8:	636f4361 	.word	0x636f4361
 8009adc:	3fd287a7 	.word	0x3fd287a7
 8009ae0:	8b60c8b3 	.word	0x8b60c8b3
 8009ae4:	3fc68a28 	.word	0x3fc68a28
 8009ae8:	509f79fb 	.word	0x509f79fb
 8009aec:	3fd34413 	.word	0x3fd34413
 8009af0:	0800ddb8 	.word	0x0800ddb8
 8009af4:	0800ddcf 	.word	0x0800ddcf
 8009af8:	7ff00000 	.word	0x7ff00000
 8009afc:	0800ddb4 	.word	0x0800ddb4
 8009b00:	0800ddab 	.word	0x0800ddab
 8009b04:	0800e111 	.word	0x0800e111
 8009b08:	3ff80000 	.word	0x3ff80000
 8009b0c:	0800dec0 	.word	0x0800dec0
 8009b10:	0800de27 	.word	0x0800de27
 8009b14:	2301      	movs	r3, #1
 8009b16:	9309      	str	r3, [sp, #36]	; 0x24
 8009b18:	e7d7      	b.n	8009aca <_dtoa_r+0x2c2>
 8009b1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b1c:	9301      	str	r3, [sp, #4]
 8009b1e:	9304      	str	r3, [sp, #16]
 8009b20:	e7ba      	b.n	8009a98 <_dtoa_r+0x290>
 8009b22:	3101      	adds	r1, #1
 8009b24:	0052      	lsls	r2, r2, #1
 8009b26:	e7ba      	b.n	8009a9e <_dtoa_r+0x296>
 8009b28:	69e3      	ldr	r3, [r4, #28]
 8009b2a:	9a00      	ldr	r2, [sp, #0]
 8009b2c:	601a      	str	r2, [r3, #0]
 8009b2e:	9b04      	ldr	r3, [sp, #16]
 8009b30:	2b0e      	cmp	r3, #14
 8009b32:	f200 80a8 	bhi.w	8009c86 <_dtoa_r+0x47e>
 8009b36:	2d00      	cmp	r5, #0
 8009b38:	f000 80a5 	beq.w	8009c86 <_dtoa_r+0x47e>
 8009b3c:	f1bb 0f00 	cmp.w	fp, #0
 8009b40:	dd38      	ble.n	8009bb4 <_dtoa_r+0x3ac>
 8009b42:	4bc0      	ldr	r3, [pc, #768]	; (8009e44 <_dtoa_r+0x63c>)
 8009b44:	f00b 020f 	and.w	r2, fp, #15
 8009b48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b4c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009b50:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009b54:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009b58:	d019      	beq.n	8009b8e <_dtoa_r+0x386>
 8009b5a:	4bbb      	ldr	r3, [pc, #748]	; (8009e48 <_dtoa_r+0x640>)
 8009b5c:	ec51 0b18 	vmov	r0, r1, d8
 8009b60:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b64:	f7f6 fe72 	bl	800084c <__aeabi_ddiv>
 8009b68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b6c:	f008 080f 	and.w	r8, r8, #15
 8009b70:	2503      	movs	r5, #3
 8009b72:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009e48 <_dtoa_r+0x640>
 8009b76:	f1b8 0f00 	cmp.w	r8, #0
 8009b7a:	d10a      	bne.n	8009b92 <_dtoa_r+0x38a>
 8009b7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b80:	4632      	mov	r2, r6
 8009b82:	463b      	mov	r3, r7
 8009b84:	f7f6 fe62 	bl	800084c <__aeabi_ddiv>
 8009b88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b8c:	e02b      	b.n	8009be6 <_dtoa_r+0x3de>
 8009b8e:	2502      	movs	r5, #2
 8009b90:	e7ef      	b.n	8009b72 <_dtoa_r+0x36a>
 8009b92:	f018 0f01 	tst.w	r8, #1
 8009b96:	d008      	beq.n	8009baa <_dtoa_r+0x3a2>
 8009b98:	4630      	mov	r0, r6
 8009b9a:	4639      	mov	r1, r7
 8009b9c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009ba0:	f7f6 fd2a 	bl	80005f8 <__aeabi_dmul>
 8009ba4:	3501      	adds	r5, #1
 8009ba6:	4606      	mov	r6, r0
 8009ba8:	460f      	mov	r7, r1
 8009baa:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009bae:	f109 0908 	add.w	r9, r9, #8
 8009bb2:	e7e0      	b.n	8009b76 <_dtoa_r+0x36e>
 8009bb4:	f000 809f 	beq.w	8009cf6 <_dtoa_r+0x4ee>
 8009bb8:	f1cb 0600 	rsb	r6, fp, #0
 8009bbc:	4ba1      	ldr	r3, [pc, #644]	; (8009e44 <_dtoa_r+0x63c>)
 8009bbe:	4fa2      	ldr	r7, [pc, #648]	; (8009e48 <_dtoa_r+0x640>)
 8009bc0:	f006 020f 	and.w	r2, r6, #15
 8009bc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bcc:	ec51 0b18 	vmov	r0, r1, d8
 8009bd0:	f7f6 fd12 	bl	80005f8 <__aeabi_dmul>
 8009bd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bd8:	1136      	asrs	r6, r6, #4
 8009bda:	2300      	movs	r3, #0
 8009bdc:	2502      	movs	r5, #2
 8009bde:	2e00      	cmp	r6, #0
 8009be0:	d17e      	bne.n	8009ce0 <_dtoa_r+0x4d8>
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d1d0      	bne.n	8009b88 <_dtoa_r+0x380>
 8009be6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009be8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	f000 8084 	beq.w	8009cfa <_dtoa_r+0x4f2>
 8009bf2:	4b96      	ldr	r3, [pc, #600]	; (8009e4c <_dtoa_r+0x644>)
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	4640      	mov	r0, r8
 8009bf8:	4649      	mov	r1, r9
 8009bfa:	f7f6 ff6f 	bl	8000adc <__aeabi_dcmplt>
 8009bfe:	2800      	cmp	r0, #0
 8009c00:	d07b      	beq.n	8009cfa <_dtoa_r+0x4f2>
 8009c02:	9b04      	ldr	r3, [sp, #16]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d078      	beq.n	8009cfa <_dtoa_r+0x4f2>
 8009c08:	9b01      	ldr	r3, [sp, #4]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	dd39      	ble.n	8009c82 <_dtoa_r+0x47a>
 8009c0e:	4b90      	ldr	r3, [pc, #576]	; (8009e50 <_dtoa_r+0x648>)
 8009c10:	2200      	movs	r2, #0
 8009c12:	4640      	mov	r0, r8
 8009c14:	4649      	mov	r1, r9
 8009c16:	f7f6 fcef 	bl	80005f8 <__aeabi_dmul>
 8009c1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c1e:	9e01      	ldr	r6, [sp, #4]
 8009c20:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009c24:	3501      	adds	r5, #1
 8009c26:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009c2a:	4628      	mov	r0, r5
 8009c2c:	f7f6 fc7a 	bl	8000524 <__aeabi_i2d>
 8009c30:	4642      	mov	r2, r8
 8009c32:	464b      	mov	r3, r9
 8009c34:	f7f6 fce0 	bl	80005f8 <__aeabi_dmul>
 8009c38:	4b86      	ldr	r3, [pc, #536]	; (8009e54 <_dtoa_r+0x64c>)
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	f7f6 fb26 	bl	800028c <__adddf3>
 8009c40:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009c44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c48:	9303      	str	r3, [sp, #12]
 8009c4a:	2e00      	cmp	r6, #0
 8009c4c:	d158      	bne.n	8009d00 <_dtoa_r+0x4f8>
 8009c4e:	4b82      	ldr	r3, [pc, #520]	; (8009e58 <_dtoa_r+0x650>)
 8009c50:	2200      	movs	r2, #0
 8009c52:	4640      	mov	r0, r8
 8009c54:	4649      	mov	r1, r9
 8009c56:	f7f6 fb17 	bl	8000288 <__aeabi_dsub>
 8009c5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c5e:	4680      	mov	r8, r0
 8009c60:	4689      	mov	r9, r1
 8009c62:	f7f6 ff59 	bl	8000b18 <__aeabi_dcmpgt>
 8009c66:	2800      	cmp	r0, #0
 8009c68:	f040 8296 	bne.w	800a198 <_dtoa_r+0x990>
 8009c6c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009c70:	4640      	mov	r0, r8
 8009c72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c76:	4649      	mov	r1, r9
 8009c78:	f7f6 ff30 	bl	8000adc <__aeabi_dcmplt>
 8009c7c:	2800      	cmp	r0, #0
 8009c7e:	f040 8289 	bne.w	800a194 <_dtoa_r+0x98c>
 8009c82:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009c86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	f2c0 814e 	blt.w	8009f2a <_dtoa_r+0x722>
 8009c8e:	f1bb 0f0e 	cmp.w	fp, #14
 8009c92:	f300 814a 	bgt.w	8009f2a <_dtoa_r+0x722>
 8009c96:	4b6b      	ldr	r3, [pc, #428]	; (8009e44 <_dtoa_r+0x63c>)
 8009c98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009c9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	f280 80dc 	bge.w	8009e60 <_dtoa_r+0x658>
 8009ca8:	9b04      	ldr	r3, [sp, #16]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	f300 80d8 	bgt.w	8009e60 <_dtoa_r+0x658>
 8009cb0:	f040 826f 	bne.w	800a192 <_dtoa_r+0x98a>
 8009cb4:	4b68      	ldr	r3, [pc, #416]	; (8009e58 <_dtoa_r+0x650>)
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	4640      	mov	r0, r8
 8009cba:	4649      	mov	r1, r9
 8009cbc:	f7f6 fc9c 	bl	80005f8 <__aeabi_dmul>
 8009cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009cc4:	f7f6 ff1e 	bl	8000b04 <__aeabi_dcmpge>
 8009cc8:	9e04      	ldr	r6, [sp, #16]
 8009cca:	4637      	mov	r7, r6
 8009ccc:	2800      	cmp	r0, #0
 8009cce:	f040 8245 	bne.w	800a15c <_dtoa_r+0x954>
 8009cd2:	9d00      	ldr	r5, [sp, #0]
 8009cd4:	2331      	movs	r3, #49	; 0x31
 8009cd6:	f805 3b01 	strb.w	r3, [r5], #1
 8009cda:	f10b 0b01 	add.w	fp, fp, #1
 8009cde:	e241      	b.n	800a164 <_dtoa_r+0x95c>
 8009ce0:	07f2      	lsls	r2, r6, #31
 8009ce2:	d505      	bpl.n	8009cf0 <_dtoa_r+0x4e8>
 8009ce4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ce8:	f7f6 fc86 	bl	80005f8 <__aeabi_dmul>
 8009cec:	3501      	adds	r5, #1
 8009cee:	2301      	movs	r3, #1
 8009cf0:	1076      	asrs	r6, r6, #1
 8009cf2:	3708      	adds	r7, #8
 8009cf4:	e773      	b.n	8009bde <_dtoa_r+0x3d6>
 8009cf6:	2502      	movs	r5, #2
 8009cf8:	e775      	b.n	8009be6 <_dtoa_r+0x3de>
 8009cfa:	9e04      	ldr	r6, [sp, #16]
 8009cfc:	465f      	mov	r7, fp
 8009cfe:	e792      	b.n	8009c26 <_dtoa_r+0x41e>
 8009d00:	9900      	ldr	r1, [sp, #0]
 8009d02:	4b50      	ldr	r3, [pc, #320]	; (8009e44 <_dtoa_r+0x63c>)
 8009d04:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d08:	4431      	add	r1, r6
 8009d0a:	9102      	str	r1, [sp, #8]
 8009d0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d0e:	eeb0 9a47 	vmov.f32	s18, s14
 8009d12:	eef0 9a67 	vmov.f32	s19, s15
 8009d16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009d1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009d1e:	2900      	cmp	r1, #0
 8009d20:	d044      	beq.n	8009dac <_dtoa_r+0x5a4>
 8009d22:	494e      	ldr	r1, [pc, #312]	; (8009e5c <_dtoa_r+0x654>)
 8009d24:	2000      	movs	r0, #0
 8009d26:	f7f6 fd91 	bl	800084c <__aeabi_ddiv>
 8009d2a:	ec53 2b19 	vmov	r2, r3, d9
 8009d2e:	f7f6 faab 	bl	8000288 <__aeabi_dsub>
 8009d32:	9d00      	ldr	r5, [sp, #0]
 8009d34:	ec41 0b19 	vmov	d9, r0, r1
 8009d38:	4649      	mov	r1, r9
 8009d3a:	4640      	mov	r0, r8
 8009d3c:	f7f6 ff0c 	bl	8000b58 <__aeabi_d2iz>
 8009d40:	4606      	mov	r6, r0
 8009d42:	f7f6 fbef 	bl	8000524 <__aeabi_i2d>
 8009d46:	4602      	mov	r2, r0
 8009d48:	460b      	mov	r3, r1
 8009d4a:	4640      	mov	r0, r8
 8009d4c:	4649      	mov	r1, r9
 8009d4e:	f7f6 fa9b 	bl	8000288 <__aeabi_dsub>
 8009d52:	3630      	adds	r6, #48	; 0x30
 8009d54:	f805 6b01 	strb.w	r6, [r5], #1
 8009d58:	ec53 2b19 	vmov	r2, r3, d9
 8009d5c:	4680      	mov	r8, r0
 8009d5e:	4689      	mov	r9, r1
 8009d60:	f7f6 febc 	bl	8000adc <__aeabi_dcmplt>
 8009d64:	2800      	cmp	r0, #0
 8009d66:	d164      	bne.n	8009e32 <_dtoa_r+0x62a>
 8009d68:	4642      	mov	r2, r8
 8009d6a:	464b      	mov	r3, r9
 8009d6c:	4937      	ldr	r1, [pc, #220]	; (8009e4c <_dtoa_r+0x644>)
 8009d6e:	2000      	movs	r0, #0
 8009d70:	f7f6 fa8a 	bl	8000288 <__aeabi_dsub>
 8009d74:	ec53 2b19 	vmov	r2, r3, d9
 8009d78:	f7f6 feb0 	bl	8000adc <__aeabi_dcmplt>
 8009d7c:	2800      	cmp	r0, #0
 8009d7e:	f040 80b6 	bne.w	8009eee <_dtoa_r+0x6e6>
 8009d82:	9b02      	ldr	r3, [sp, #8]
 8009d84:	429d      	cmp	r5, r3
 8009d86:	f43f af7c 	beq.w	8009c82 <_dtoa_r+0x47a>
 8009d8a:	4b31      	ldr	r3, [pc, #196]	; (8009e50 <_dtoa_r+0x648>)
 8009d8c:	ec51 0b19 	vmov	r0, r1, d9
 8009d90:	2200      	movs	r2, #0
 8009d92:	f7f6 fc31 	bl	80005f8 <__aeabi_dmul>
 8009d96:	4b2e      	ldr	r3, [pc, #184]	; (8009e50 <_dtoa_r+0x648>)
 8009d98:	ec41 0b19 	vmov	d9, r0, r1
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	4640      	mov	r0, r8
 8009da0:	4649      	mov	r1, r9
 8009da2:	f7f6 fc29 	bl	80005f8 <__aeabi_dmul>
 8009da6:	4680      	mov	r8, r0
 8009da8:	4689      	mov	r9, r1
 8009daa:	e7c5      	b.n	8009d38 <_dtoa_r+0x530>
 8009dac:	ec51 0b17 	vmov	r0, r1, d7
 8009db0:	f7f6 fc22 	bl	80005f8 <__aeabi_dmul>
 8009db4:	9b02      	ldr	r3, [sp, #8]
 8009db6:	9d00      	ldr	r5, [sp, #0]
 8009db8:	930f      	str	r3, [sp, #60]	; 0x3c
 8009dba:	ec41 0b19 	vmov	d9, r0, r1
 8009dbe:	4649      	mov	r1, r9
 8009dc0:	4640      	mov	r0, r8
 8009dc2:	f7f6 fec9 	bl	8000b58 <__aeabi_d2iz>
 8009dc6:	4606      	mov	r6, r0
 8009dc8:	f7f6 fbac 	bl	8000524 <__aeabi_i2d>
 8009dcc:	3630      	adds	r6, #48	; 0x30
 8009dce:	4602      	mov	r2, r0
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	4640      	mov	r0, r8
 8009dd4:	4649      	mov	r1, r9
 8009dd6:	f7f6 fa57 	bl	8000288 <__aeabi_dsub>
 8009dda:	f805 6b01 	strb.w	r6, [r5], #1
 8009dde:	9b02      	ldr	r3, [sp, #8]
 8009de0:	429d      	cmp	r5, r3
 8009de2:	4680      	mov	r8, r0
 8009de4:	4689      	mov	r9, r1
 8009de6:	f04f 0200 	mov.w	r2, #0
 8009dea:	d124      	bne.n	8009e36 <_dtoa_r+0x62e>
 8009dec:	4b1b      	ldr	r3, [pc, #108]	; (8009e5c <_dtoa_r+0x654>)
 8009dee:	ec51 0b19 	vmov	r0, r1, d9
 8009df2:	f7f6 fa4b 	bl	800028c <__adddf3>
 8009df6:	4602      	mov	r2, r0
 8009df8:	460b      	mov	r3, r1
 8009dfa:	4640      	mov	r0, r8
 8009dfc:	4649      	mov	r1, r9
 8009dfe:	f7f6 fe8b 	bl	8000b18 <__aeabi_dcmpgt>
 8009e02:	2800      	cmp	r0, #0
 8009e04:	d173      	bne.n	8009eee <_dtoa_r+0x6e6>
 8009e06:	ec53 2b19 	vmov	r2, r3, d9
 8009e0a:	4914      	ldr	r1, [pc, #80]	; (8009e5c <_dtoa_r+0x654>)
 8009e0c:	2000      	movs	r0, #0
 8009e0e:	f7f6 fa3b 	bl	8000288 <__aeabi_dsub>
 8009e12:	4602      	mov	r2, r0
 8009e14:	460b      	mov	r3, r1
 8009e16:	4640      	mov	r0, r8
 8009e18:	4649      	mov	r1, r9
 8009e1a:	f7f6 fe5f 	bl	8000adc <__aeabi_dcmplt>
 8009e1e:	2800      	cmp	r0, #0
 8009e20:	f43f af2f 	beq.w	8009c82 <_dtoa_r+0x47a>
 8009e24:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009e26:	1e6b      	subs	r3, r5, #1
 8009e28:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009e2e:	2b30      	cmp	r3, #48	; 0x30
 8009e30:	d0f8      	beq.n	8009e24 <_dtoa_r+0x61c>
 8009e32:	46bb      	mov	fp, r7
 8009e34:	e04a      	b.n	8009ecc <_dtoa_r+0x6c4>
 8009e36:	4b06      	ldr	r3, [pc, #24]	; (8009e50 <_dtoa_r+0x648>)
 8009e38:	f7f6 fbde 	bl	80005f8 <__aeabi_dmul>
 8009e3c:	4680      	mov	r8, r0
 8009e3e:	4689      	mov	r9, r1
 8009e40:	e7bd      	b.n	8009dbe <_dtoa_r+0x5b6>
 8009e42:	bf00      	nop
 8009e44:	0800dec0 	.word	0x0800dec0
 8009e48:	0800de98 	.word	0x0800de98
 8009e4c:	3ff00000 	.word	0x3ff00000
 8009e50:	40240000 	.word	0x40240000
 8009e54:	401c0000 	.word	0x401c0000
 8009e58:	40140000 	.word	0x40140000
 8009e5c:	3fe00000 	.word	0x3fe00000
 8009e60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009e64:	9d00      	ldr	r5, [sp, #0]
 8009e66:	4642      	mov	r2, r8
 8009e68:	464b      	mov	r3, r9
 8009e6a:	4630      	mov	r0, r6
 8009e6c:	4639      	mov	r1, r7
 8009e6e:	f7f6 fced 	bl	800084c <__aeabi_ddiv>
 8009e72:	f7f6 fe71 	bl	8000b58 <__aeabi_d2iz>
 8009e76:	9001      	str	r0, [sp, #4]
 8009e78:	f7f6 fb54 	bl	8000524 <__aeabi_i2d>
 8009e7c:	4642      	mov	r2, r8
 8009e7e:	464b      	mov	r3, r9
 8009e80:	f7f6 fbba 	bl	80005f8 <__aeabi_dmul>
 8009e84:	4602      	mov	r2, r0
 8009e86:	460b      	mov	r3, r1
 8009e88:	4630      	mov	r0, r6
 8009e8a:	4639      	mov	r1, r7
 8009e8c:	f7f6 f9fc 	bl	8000288 <__aeabi_dsub>
 8009e90:	9e01      	ldr	r6, [sp, #4]
 8009e92:	9f04      	ldr	r7, [sp, #16]
 8009e94:	3630      	adds	r6, #48	; 0x30
 8009e96:	f805 6b01 	strb.w	r6, [r5], #1
 8009e9a:	9e00      	ldr	r6, [sp, #0]
 8009e9c:	1bae      	subs	r6, r5, r6
 8009e9e:	42b7      	cmp	r7, r6
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	d134      	bne.n	8009f10 <_dtoa_r+0x708>
 8009ea6:	f7f6 f9f1 	bl	800028c <__adddf3>
 8009eaa:	4642      	mov	r2, r8
 8009eac:	464b      	mov	r3, r9
 8009eae:	4606      	mov	r6, r0
 8009eb0:	460f      	mov	r7, r1
 8009eb2:	f7f6 fe31 	bl	8000b18 <__aeabi_dcmpgt>
 8009eb6:	b9c8      	cbnz	r0, 8009eec <_dtoa_r+0x6e4>
 8009eb8:	4642      	mov	r2, r8
 8009eba:	464b      	mov	r3, r9
 8009ebc:	4630      	mov	r0, r6
 8009ebe:	4639      	mov	r1, r7
 8009ec0:	f7f6 fe02 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ec4:	b110      	cbz	r0, 8009ecc <_dtoa_r+0x6c4>
 8009ec6:	9b01      	ldr	r3, [sp, #4]
 8009ec8:	07db      	lsls	r3, r3, #31
 8009eca:	d40f      	bmi.n	8009eec <_dtoa_r+0x6e4>
 8009ecc:	4651      	mov	r1, sl
 8009ece:	4620      	mov	r0, r4
 8009ed0:	f000 fb18 	bl	800a504 <_Bfree>
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ed8:	702b      	strb	r3, [r5, #0]
 8009eda:	f10b 0301 	add.w	r3, fp, #1
 8009ede:	6013      	str	r3, [r2, #0]
 8009ee0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	f43f ace2 	beq.w	80098ac <_dtoa_r+0xa4>
 8009ee8:	601d      	str	r5, [r3, #0]
 8009eea:	e4df      	b.n	80098ac <_dtoa_r+0xa4>
 8009eec:	465f      	mov	r7, fp
 8009eee:	462b      	mov	r3, r5
 8009ef0:	461d      	mov	r5, r3
 8009ef2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ef6:	2a39      	cmp	r2, #57	; 0x39
 8009ef8:	d106      	bne.n	8009f08 <_dtoa_r+0x700>
 8009efa:	9a00      	ldr	r2, [sp, #0]
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d1f7      	bne.n	8009ef0 <_dtoa_r+0x6e8>
 8009f00:	9900      	ldr	r1, [sp, #0]
 8009f02:	2230      	movs	r2, #48	; 0x30
 8009f04:	3701      	adds	r7, #1
 8009f06:	700a      	strb	r2, [r1, #0]
 8009f08:	781a      	ldrb	r2, [r3, #0]
 8009f0a:	3201      	adds	r2, #1
 8009f0c:	701a      	strb	r2, [r3, #0]
 8009f0e:	e790      	b.n	8009e32 <_dtoa_r+0x62a>
 8009f10:	4ba3      	ldr	r3, [pc, #652]	; (800a1a0 <_dtoa_r+0x998>)
 8009f12:	2200      	movs	r2, #0
 8009f14:	f7f6 fb70 	bl	80005f8 <__aeabi_dmul>
 8009f18:	2200      	movs	r2, #0
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	4606      	mov	r6, r0
 8009f1e:	460f      	mov	r7, r1
 8009f20:	f7f6 fdd2 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f24:	2800      	cmp	r0, #0
 8009f26:	d09e      	beq.n	8009e66 <_dtoa_r+0x65e>
 8009f28:	e7d0      	b.n	8009ecc <_dtoa_r+0x6c4>
 8009f2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f2c:	2a00      	cmp	r2, #0
 8009f2e:	f000 80ca 	beq.w	800a0c6 <_dtoa_r+0x8be>
 8009f32:	9a07      	ldr	r2, [sp, #28]
 8009f34:	2a01      	cmp	r2, #1
 8009f36:	f300 80ad 	bgt.w	800a094 <_dtoa_r+0x88c>
 8009f3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f3c:	2a00      	cmp	r2, #0
 8009f3e:	f000 80a5 	beq.w	800a08c <_dtoa_r+0x884>
 8009f42:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009f46:	9e08      	ldr	r6, [sp, #32]
 8009f48:	9d05      	ldr	r5, [sp, #20]
 8009f4a:	9a05      	ldr	r2, [sp, #20]
 8009f4c:	441a      	add	r2, r3
 8009f4e:	9205      	str	r2, [sp, #20]
 8009f50:	9a06      	ldr	r2, [sp, #24]
 8009f52:	2101      	movs	r1, #1
 8009f54:	441a      	add	r2, r3
 8009f56:	4620      	mov	r0, r4
 8009f58:	9206      	str	r2, [sp, #24]
 8009f5a:	f000 fbd3 	bl	800a704 <__i2b>
 8009f5e:	4607      	mov	r7, r0
 8009f60:	b165      	cbz	r5, 8009f7c <_dtoa_r+0x774>
 8009f62:	9b06      	ldr	r3, [sp, #24]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	dd09      	ble.n	8009f7c <_dtoa_r+0x774>
 8009f68:	42ab      	cmp	r3, r5
 8009f6a:	9a05      	ldr	r2, [sp, #20]
 8009f6c:	bfa8      	it	ge
 8009f6e:	462b      	movge	r3, r5
 8009f70:	1ad2      	subs	r2, r2, r3
 8009f72:	9205      	str	r2, [sp, #20]
 8009f74:	9a06      	ldr	r2, [sp, #24]
 8009f76:	1aed      	subs	r5, r5, r3
 8009f78:	1ad3      	subs	r3, r2, r3
 8009f7a:	9306      	str	r3, [sp, #24]
 8009f7c:	9b08      	ldr	r3, [sp, #32]
 8009f7e:	b1f3      	cbz	r3, 8009fbe <_dtoa_r+0x7b6>
 8009f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	f000 80a3 	beq.w	800a0ce <_dtoa_r+0x8c6>
 8009f88:	2e00      	cmp	r6, #0
 8009f8a:	dd10      	ble.n	8009fae <_dtoa_r+0x7a6>
 8009f8c:	4639      	mov	r1, r7
 8009f8e:	4632      	mov	r2, r6
 8009f90:	4620      	mov	r0, r4
 8009f92:	f000 fc77 	bl	800a884 <__pow5mult>
 8009f96:	4652      	mov	r2, sl
 8009f98:	4601      	mov	r1, r0
 8009f9a:	4607      	mov	r7, r0
 8009f9c:	4620      	mov	r0, r4
 8009f9e:	f000 fbc7 	bl	800a730 <__multiply>
 8009fa2:	4651      	mov	r1, sl
 8009fa4:	4680      	mov	r8, r0
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	f000 faac 	bl	800a504 <_Bfree>
 8009fac:	46c2      	mov	sl, r8
 8009fae:	9b08      	ldr	r3, [sp, #32]
 8009fb0:	1b9a      	subs	r2, r3, r6
 8009fb2:	d004      	beq.n	8009fbe <_dtoa_r+0x7b6>
 8009fb4:	4651      	mov	r1, sl
 8009fb6:	4620      	mov	r0, r4
 8009fb8:	f000 fc64 	bl	800a884 <__pow5mult>
 8009fbc:	4682      	mov	sl, r0
 8009fbe:	2101      	movs	r1, #1
 8009fc0:	4620      	mov	r0, r4
 8009fc2:	f000 fb9f 	bl	800a704 <__i2b>
 8009fc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	4606      	mov	r6, r0
 8009fcc:	f340 8081 	ble.w	800a0d2 <_dtoa_r+0x8ca>
 8009fd0:	461a      	mov	r2, r3
 8009fd2:	4601      	mov	r1, r0
 8009fd4:	4620      	mov	r0, r4
 8009fd6:	f000 fc55 	bl	800a884 <__pow5mult>
 8009fda:	9b07      	ldr	r3, [sp, #28]
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	4606      	mov	r6, r0
 8009fe0:	dd7a      	ble.n	800a0d8 <_dtoa_r+0x8d0>
 8009fe2:	f04f 0800 	mov.w	r8, #0
 8009fe6:	6933      	ldr	r3, [r6, #16]
 8009fe8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009fec:	6918      	ldr	r0, [r3, #16]
 8009fee:	f000 fb3b 	bl	800a668 <__hi0bits>
 8009ff2:	f1c0 0020 	rsb	r0, r0, #32
 8009ff6:	9b06      	ldr	r3, [sp, #24]
 8009ff8:	4418      	add	r0, r3
 8009ffa:	f010 001f 	ands.w	r0, r0, #31
 8009ffe:	f000 8094 	beq.w	800a12a <_dtoa_r+0x922>
 800a002:	f1c0 0320 	rsb	r3, r0, #32
 800a006:	2b04      	cmp	r3, #4
 800a008:	f340 8085 	ble.w	800a116 <_dtoa_r+0x90e>
 800a00c:	9b05      	ldr	r3, [sp, #20]
 800a00e:	f1c0 001c 	rsb	r0, r0, #28
 800a012:	4403      	add	r3, r0
 800a014:	9305      	str	r3, [sp, #20]
 800a016:	9b06      	ldr	r3, [sp, #24]
 800a018:	4403      	add	r3, r0
 800a01a:	4405      	add	r5, r0
 800a01c:	9306      	str	r3, [sp, #24]
 800a01e:	9b05      	ldr	r3, [sp, #20]
 800a020:	2b00      	cmp	r3, #0
 800a022:	dd05      	ble.n	800a030 <_dtoa_r+0x828>
 800a024:	4651      	mov	r1, sl
 800a026:	461a      	mov	r2, r3
 800a028:	4620      	mov	r0, r4
 800a02a:	f000 fc85 	bl	800a938 <__lshift>
 800a02e:	4682      	mov	sl, r0
 800a030:	9b06      	ldr	r3, [sp, #24]
 800a032:	2b00      	cmp	r3, #0
 800a034:	dd05      	ble.n	800a042 <_dtoa_r+0x83a>
 800a036:	4631      	mov	r1, r6
 800a038:	461a      	mov	r2, r3
 800a03a:	4620      	mov	r0, r4
 800a03c:	f000 fc7c 	bl	800a938 <__lshift>
 800a040:	4606      	mov	r6, r0
 800a042:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a044:	2b00      	cmp	r3, #0
 800a046:	d072      	beq.n	800a12e <_dtoa_r+0x926>
 800a048:	4631      	mov	r1, r6
 800a04a:	4650      	mov	r0, sl
 800a04c:	f000 fce0 	bl	800aa10 <__mcmp>
 800a050:	2800      	cmp	r0, #0
 800a052:	da6c      	bge.n	800a12e <_dtoa_r+0x926>
 800a054:	2300      	movs	r3, #0
 800a056:	4651      	mov	r1, sl
 800a058:	220a      	movs	r2, #10
 800a05a:	4620      	mov	r0, r4
 800a05c:	f000 fa74 	bl	800a548 <__multadd>
 800a060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a062:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a066:	4682      	mov	sl, r0
 800a068:	2b00      	cmp	r3, #0
 800a06a:	f000 81b0 	beq.w	800a3ce <_dtoa_r+0xbc6>
 800a06e:	2300      	movs	r3, #0
 800a070:	4639      	mov	r1, r7
 800a072:	220a      	movs	r2, #10
 800a074:	4620      	mov	r0, r4
 800a076:	f000 fa67 	bl	800a548 <__multadd>
 800a07a:	9b01      	ldr	r3, [sp, #4]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	4607      	mov	r7, r0
 800a080:	f300 8096 	bgt.w	800a1b0 <_dtoa_r+0x9a8>
 800a084:	9b07      	ldr	r3, [sp, #28]
 800a086:	2b02      	cmp	r3, #2
 800a088:	dc59      	bgt.n	800a13e <_dtoa_r+0x936>
 800a08a:	e091      	b.n	800a1b0 <_dtoa_r+0x9a8>
 800a08c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a08e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a092:	e758      	b.n	8009f46 <_dtoa_r+0x73e>
 800a094:	9b04      	ldr	r3, [sp, #16]
 800a096:	1e5e      	subs	r6, r3, #1
 800a098:	9b08      	ldr	r3, [sp, #32]
 800a09a:	42b3      	cmp	r3, r6
 800a09c:	bfbf      	itttt	lt
 800a09e:	9b08      	ldrlt	r3, [sp, #32]
 800a0a0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a0a2:	9608      	strlt	r6, [sp, #32]
 800a0a4:	1af3      	sublt	r3, r6, r3
 800a0a6:	bfb4      	ite	lt
 800a0a8:	18d2      	addlt	r2, r2, r3
 800a0aa:	1b9e      	subge	r6, r3, r6
 800a0ac:	9b04      	ldr	r3, [sp, #16]
 800a0ae:	bfbc      	itt	lt
 800a0b0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a0b2:	2600      	movlt	r6, #0
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	bfb7      	itett	lt
 800a0b8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a0bc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a0c0:	1a9d      	sublt	r5, r3, r2
 800a0c2:	2300      	movlt	r3, #0
 800a0c4:	e741      	b.n	8009f4a <_dtoa_r+0x742>
 800a0c6:	9e08      	ldr	r6, [sp, #32]
 800a0c8:	9d05      	ldr	r5, [sp, #20]
 800a0ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a0cc:	e748      	b.n	8009f60 <_dtoa_r+0x758>
 800a0ce:	9a08      	ldr	r2, [sp, #32]
 800a0d0:	e770      	b.n	8009fb4 <_dtoa_r+0x7ac>
 800a0d2:	9b07      	ldr	r3, [sp, #28]
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	dc19      	bgt.n	800a10c <_dtoa_r+0x904>
 800a0d8:	9b02      	ldr	r3, [sp, #8]
 800a0da:	b9bb      	cbnz	r3, 800a10c <_dtoa_r+0x904>
 800a0dc:	9b03      	ldr	r3, [sp, #12]
 800a0de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0e2:	b99b      	cbnz	r3, 800a10c <_dtoa_r+0x904>
 800a0e4:	9b03      	ldr	r3, [sp, #12]
 800a0e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a0ea:	0d1b      	lsrs	r3, r3, #20
 800a0ec:	051b      	lsls	r3, r3, #20
 800a0ee:	b183      	cbz	r3, 800a112 <_dtoa_r+0x90a>
 800a0f0:	9b05      	ldr	r3, [sp, #20]
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	9305      	str	r3, [sp, #20]
 800a0f6:	9b06      	ldr	r3, [sp, #24]
 800a0f8:	3301      	adds	r3, #1
 800a0fa:	9306      	str	r3, [sp, #24]
 800a0fc:	f04f 0801 	mov.w	r8, #1
 800a100:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a102:	2b00      	cmp	r3, #0
 800a104:	f47f af6f 	bne.w	8009fe6 <_dtoa_r+0x7de>
 800a108:	2001      	movs	r0, #1
 800a10a:	e774      	b.n	8009ff6 <_dtoa_r+0x7ee>
 800a10c:	f04f 0800 	mov.w	r8, #0
 800a110:	e7f6      	b.n	800a100 <_dtoa_r+0x8f8>
 800a112:	4698      	mov	r8, r3
 800a114:	e7f4      	b.n	800a100 <_dtoa_r+0x8f8>
 800a116:	d082      	beq.n	800a01e <_dtoa_r+0x816>
 800a118:	9a05      	ldr	r2, [sp, #20]
 800a11a:	331c      	adds	r3, #28
 800a11c:	441a      	add	r2, r3
 800a11e:	9205      	str	r2, [sp, #20]
 800a120:	9a06      	ldr	r2, [sp, #24]
 800a122:	441a      	add	r2, r3
 800a124:	441d      	add	r5, r3
 800a126:	9206      	str	r2, [sp, #24]
 800a128:	e779      	b.n	800a01e <_dtoa_r+0x816>
 800a12a:	4603      	mov	r3, r0
 800a12c:	e7f4      	b.n	800a118 <_dtoa_r+0x910>
 800a12e:	9b04      	ldr	r3, [sp, #16]
 800a130:	2b00      	cmp	r3, #0
 800a132:	dc37      	bgt.n	800a1a4 <_dtoa_r+0x99c>
 800a134:	9b07      	ldr	r3, [sp, #28]
 800a136:	2b02      	cmp	r3, #2
 800a138:	dd34      	ble.n	800a1a4 <_dtoa_r+0x99c>
 800a13a:	9b04      	ldr	r3, [sp, #16]
 800a13c:	9301      	str	r3, [sp, #4]
 800a13e:	9b01      	ldr	r3, [sp, #4]
 800a140:	b963      	cbnz	r3, 800a15c <_dtoa_r+0x954>
 800a142:	4631      	mov	r1, r6
 800a144:	2205      	movs	r2, #5
 800a146:	4620      	mov	r0, r4
 800a148:	f000 f9fe 	bl	800a548 <__multadd>
 800a14c:	4601      	mov	r1, r0
 800a14e:	4606      	mov	r6, r0
 800a150:	4650      	mov	r0, sl
 800a152:	f000 fc5d 	bl	800aa10 <__mcmp>
 800a156:	2800      	cmp	r0, #0
 800a158:	f73f adbb 	bgt.w	8009cd2 <_dtoa_r+0x4ca>
 800a15c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a15e:	9d00      	ldr	r5, [sp, #0]
 800a160:	ea6f 0b03 	mvn.w	fp, r3
 800a164:	f04f 0800 	mov.w	r8, #0
 800a168:	4631      	mov	r1, r6
 800a16a:	4620      	mov	r0, r4
 800a16c:	f000 f9ca 	bl	800a504 <_Bfree>
 800a170:	2f00      	cmp	r7, #0
 800a172:	f43f aeab 	beq.w	8009ecc <_dtoa_r+0x6c4>
 800a176:	f1b8 0f00 	cmp.w	r8, #0
 800a17a:	d005      	beq.n	800a188 <_dtoa_r+0x980>
 800a17c:	45b8      	cmp	r8, r7
 800a17e:	d003      	beq.n	800a188 <_dtoa_r+0x980>
 800a180:	4641      	mov	r1, r8
 800a182:	4620      	mov	r0, r4
 800a184:	f000 f9be 	bl	800a504 <_Bfree>
 800a188:	4639      	mov	r1, r7
 800a18a:	4620      	mov	r0, r4
 800a18c:	f000 f9ba 	bl	800a504 <_Bfree>
 800a190:	e69c      	b.n	8009ecc <_dtoa_r+0x6c4>
 800a192:	2600      	movs	r6, #0
 800a194:	4637      	mov	r7, r6
 800a196:	e7e1      	b.n	800a15c <_dtoa_r+0x954>
 800a198:	46bb      	mov	fp, r7
 800a19a:	4637      	mov	r7, r6
 800a19c:	e599      	b.n	8009cd2 <_dtoa_r+0x4ca>
 800a19e:	bf00      	nop
 800a1a0:	40240000 	.word	0x40240000
 800a1a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	f000 80c8 	beq.w	800a33c <_dtoa_r+0xb34>
 800a1ac:	9b04      	ldr	r3, [sp, #16]
 800a1ae:	9301      	str	r3, [sp, #4]
 800a1b0:	2d00      	cmp	r5, #0
 800a1b2:	dd05      	ble.n	800a1c0 <_dtoa_r+0x9b8>
 800a1b4:	4639      	mov	r1, r7
 800a1b6:	462a      	mov	r2, r5
 800a1b8:	4620      	mov	r0, r4
 800a1ba:	f000 fbbd 	bl	800a938 <__lshift>
 800a1be:	4607      	mov	r7, r0
 800a1c0:	f1b8 0f00 	cmp.w	r8, #0
 800a1c4:	d05b      	beq.n	800a27e <_dtoa_r+0xa76>
 800a1c6:	6879      	ldr	r1, [r7, #4]
 800a1c8:	4620      	mov	r0, r4
 800a1ca:	f000 f95b 	bl	800a484 <_Balloc>
 800a1ce:	4605      	mov	r5, r0
 800a1d0:	b928      	cbnz	r0, 800a1de <_dtoa_r+0x9d6>
 800a1d2:	4b83      	ldr	r3, [pc, #524]	; (800a3e0 <_dtoa_r+0xbd8>)
 800a1d4:	4602      	mov	r2, r0
 800a1d6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a1da:	f7ff bb2e 	b.w	800983a <_dtoa_r+0x32>
 800a1de:	693a      	ldr	r2, [r7, #16]
 800a1e0:	3202      	adds	r2, #2
 800a1e2:	0092      	lsls	r2, r2, #2
 800a1e4:	f107 010c 	add.w	r1, r7, #12
 800a1e8:	300c      	adds	r0, #12
 800a1ea:	f7ff fa50 	bl	800968e <memcpy>
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	4629      	mov	r1, r5
 800a1f2:	4620      	mov	r0, r4
 800a1f4:	f000 fba0 	bl	800a938 <__lshift>
 800a1f8:	9b00      	ldr	r3, [sp, #0]
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	9304      	str	r3, [sp, #16]
 800a1fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a202:	4413      	add	r3, r2
 800a204:	9308      	str	r3, [sp, #32]
 800a206:	9b02      	ldr	r3, [sp, #8]
 800a208:	f003 0301 	and.w	r3, r3, #1
 800a20c:	46b8      	mov	r8, r7
 800a20e:	9306      	str	r3, [sp, #24]
 800a210:	4607      	mov	r7, r0
 800a212:	9b04      	ldr	r3, [sp, #16]
 800a214:	4631      	mov	r1, r6
 800a216:	3b01      	subs	r3, #1
 800a218:	4650      	mov	r0, sl
 800a21a:	9301      	str	r3, [sp, #4]
 800a21c:	f7ff fa6a 	bl	80096f4 <quorem>
 800a220:	4641      	mov	r1, r8
 800a222:	9002      	str	r0, [sp, #8]
 800a224:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a228:	4650      	mov	r0, sl
 800a22a:	f000 fbf1 	bl	800aa10 <__mcmp>
 800a22e:	463a      	mov	r2, r7
 800a230:	9005      	str	r0, [sp, #20]
 800a232:	4631      	mov	r1, r6
 800a234:	4620      	mov	r0, r4
 800a236:	f000 fc07 	bl	800aa48 <__mdiff>
 800a23a:	68c2      	ldr	r2, [r0, #12]
 800a23c:	4605      	mov	r5, r0
 800a23e:	bb02      	cbnz	r2, 800a282 <_dtoa_r+0xa7a>
 800a240:	4601      	mov	r1, r0
 800a242:	4650      	mov	r0, sl
 800a244:	f000 fbe4 	bl	800aa10 <__mcmp>
 800a248:	4602      	mov	r2, r0
 800a24a:	4629      	mov	r1, r5
 800a24c:	4620      	mov	r0, r4
 800a24e:	9209      	str	r2, [sp, #36]	; 0x24
 800a250:	f000 f958 	bl	800a504 <_Bfree>
 800a254:	9b07      	ldr	r3, [sp, #28]
 800a256:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a258:	9d04      	ldr	r5, [sp, #16]
 800a25a:	ea43 0102 	orr.w	r1, r3, r2
 800a25e:	9b06      	ldr	r3, [sp, #24]
 800a260:	4319      	orrs	r1, r3
 800a262:	d110      	bne.n	800a286 <_dtoa_r+0xa7e>
 800a264:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a268:	d029      	beq.n	800a2be <_dtoa_r+0xab6>
 800a26a:	9b05      	ldr	r3, [sp, #20]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	dd02      	ble.n	800a276 <_dtoa_r+0xa6e>
 800a270:	9b02      	ldr	r3, [sp, #8]
 800a272:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a276:	9b01      	ldr	r3, [sp, #4]
 800a278:	f883 9000 	strb.w	r9, [r3]
 800a27c:	e774      	b.n	800a168 <_dtoa_r+0x960>
 800a27e:	4638      	mov	r0, r7
 800a280:	e7ba      	b.n	800a1f8 <_dtoa_r+0x9f0>
 800a282:	2201      	movs	r2, #1
 800a284:	e7e1      	b.n	800a24a <_dtoa_r+0xa42>
 800a286:	9b05      	ldr	r3, [sp, #20]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	db04      	blt.n	800a296 <_dtoa_r+0xa8e>
 800a28c:	9907      	ldr	r1, [sp, #28]
 800a28e:	430b      	orrs	r3, r1
 800a290:	9906      	ldr	r1, [sp, #24]
 800a292:	430b      	orrs	r3, r1
 800a294:	d120      	bne.n	800a2d8 <_dtoa_r+0xad0>
 800a296:	2a00      	cmp	r2, #0
 800a298:	dded      	ble.n	800a276 <_dtoa_r+0xa6e>
 800a29a:	4651      	mov	r1, sl
 800a29c:	2201      	movs	r2, #1
 800a29e:	4620      	mov	r0, r4
 800a2a0:	f000 fb4a 	bl	800a938 <__lshift>
 800a2a4:	4631      	mov	r1, r6
 800a2a6:	4682      	mov	sl, r0
 800a2a8:	f000 fbb2 	bl	800aa10 <__mcmp>
 800a2ac:	2800      	cmp	r0, #0
 800a2ae:	dc03      	bgt.n	800a2b8 <_dtoa_r+0xab0>
 800a2b0:	d1e1      	bne.n	800a276 <_dtoa_r+0xa6e>
 800a2b2:	f019 0f01 	tst.w	r9, #1
 800a2b6:	d0de      	beq.n	800a276 <_dtoa_r+0xa6e>
 800a2b8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a2bc:	d1d8      	bne.n	800a270 <_dtoa_r+0xa68>
 800a2be:	9a01      	ldr	r2, [sp, #4]
 800a2c0:	2339      	movs	r3, #57	; 0x39
 800a2c2:	7013      	strb	r3, [r2, #0]
 800a2c4:	462b      	mov	r3, r5
 800a2c6:	461d      	mov	r5, r3
 800a2c8:	3b01      	subs	r3, #1
 800a2ca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a2ce:	2a39      	cmp	r2, #57	; 0x39
 800a2d0:	d06c      	beq.n	800a3ac <_dtoa_r+0xba4>
 800a2d2:	3201      	adds	r2, #1
 800a2d4:	701a      	strb	r2, [r3, #0]
 800a2d6:	e747      	b.n	800a168 <_dtoa_r+0x960>
 800a2d8:	2a00      	cmp	r2, #0
 800a2da:	dd07      	ble.n	800a2ec <_dtoa_r+0xae4>
 800a2dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a2e0:	d0ed      	beq.n	800a2be <_dtoa_r+0xab6>
 800a2e2:	9a01      	ldr	r2, [sp, #4]
 800a2e4:	f109 0301 	add.w	r3, r9, #1
 800a2e8:	7013      	strb	r3, [r2, #0]
 800a2ea:	e73d      	b.n	800a168 <_dtoa_r+0x960>
 800a2ec:	9b04      	ldr	r3, [sp, #16]
 800a2ee:	9a08      	ldr	r2, [sp, #32]
 800a2f0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	d043      	beq.n	800a380 <_dtoa_r+0xb78>
 800a2f8:	4651      	mov	r1, sl
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	220a      	movs	r2, #10
 800a2fe:	4620      	mov	r0, r4
 800a300:	f000 f922 	bl	800a548 <__multadd>
 800a304:	45b8      	cmp	r8, r7
 800a306:	4682      	mov	sl, r0
 800a308:	f04f 0300 	mov.w	r3, #0
 800a30c:	f04f 020a 	mov.w	r2, #10
 800a310:	4641      	mov	r1, r8
 800a312:	4620      	mov	r0, r4
 800a314:	d107      	bne.n	800a326 <_dtoa_r+0xb1e>
 800a316:	f000 f917 	bl	800a548 <__multadd>
 800a31a:	4680      	mov	r8, r0
 800a31c:	4607      	mov	r7, r0
 800a31e:	9b04      	ldr	r3, [sp, #16]
 800a320:	3301      	adds	r3, #1
 800a322:	9304      	str	r3, [sp, #16]
 800a324:	e775      	b.n	800a212 <_dtoa_r+0xa0a>
 800a326:	f000 f90f 	bl	800a548 <__multadd>
 800a32a:	4639      	mov	r1, r7
 800a32c:	4680      	mov	r8, r0
 800a32e:	2300      	movs	r3, #0
 800a330:	220a      	movs	r2, #10
 800a332:	4620      	mov	r0, r4
 800a334:	f000 f908 	bl	800a548 <__multadd>
 800a338:	4607      	mov	r7, r0
 800a33a:	e7f0      	b.n	800a31e <_dtoa_r+0xb16>
 800a33c:	9b04      	ldr	r3, [sp, #16]
 800a33e:	9301      	str	r3, [sp, #4]
 800a340:	9d00      	ldr	r5, [sp, #0]
 800a342:	4631      	mov	r1, r6
 800a344:	4650      	mov	r0, sl
 800a346:	f7ff f9d5 	bl	80096f4 <quorem>
 800a34a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a34e:	9b00      	ldr	r3, [sp, #0]
 800a350:	f805 9b01 	strb.w	r9, [r5], #1
 800a354:	1aea      	subs	r2, r5, r3
 800a356:	9b01      	ldr	r3, [sp, #4]
 800a358:	4293      	cmp	r3, r2
 800a35a:	dd07      	ble.n	800a36c <_dtoa_r+0xb64>
 800a35c:	4651      	mov	r1, sl
 800a35e:	2300      	movs	r3, #0
 800a360:	220a      	movs	r2, #10
 800a362:	4620      	mov	r0, r4
 800a364:	f000 f8f0 	bl	800a548 <__multadd>
 800a368:	4682      	mov	sl, r0
 800a36a:	e7ea      	b.n	800a342 <_dtoa_r+0xb3a>
 800a36c:	9b01      	ldr	r3, [sp, #4]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	bfc8      	it	gt
 800a372:	461d      	movgt	r5, r3
 800a374:	9b00      	ldr	r3, [sp, #0]
 800a376:	bfd8      	it	le
 800a378:	2501      	movle	r5, #1
 800a37a:	441d      	add	r5, r3
 800a37c:	f04f 0800 	mov.w	r8, #0
 800a380:	4651      	mov	r1, sl
 800a382:	2201      	movs	r2, #1
 800a384:	4620      	mov	r0, r4
 800a386:	f000 fad7 	bl	800a938 <__lshift>
 800a38a:	4631      	mov	r1, r6
 800a38c:	4682      	mov	sl, r0
 800a38e:	f000 fb3f 	bl	800aa10 <__mcmp>
 800a392:	2800      	cmp	r0, #0
 800a394:	dc96      	bgt.n	800a2c4 <_dtoa_r+0xabc>
 800a396:	d102      	bne.n	800a39e <_dtoa_r+0xb96>
 800a398:	f019 0f01 	tst.w	r9, #1
 800a39c:	d192      	bne.n	800a2c4 <_dtoa_r+0xabc>
 800a39e:	462b      	mov	r3, r5
 800a3a0:	461d      	mov	r5, r3
 800a3a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a3a6:	2a30      	cmp	r2, #48	; 0x30
 800a3a8:	d0fa      	beq.n	800a3a0 <_dtoa_r+0xb98>
 800a3aa:	e6dd      	b.n	800a168 <_dtoa_r+0x960>
 800a3ac:	9a00      	ldr	r2, [sp, #0]
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d189      	bne.n	800a2c6 <_dtoa_r+0xabe>
 800a3b2:	f10b 0b01 	add.w	fp, fp, #1
 800a3b6:	2331      	movs	r3, #49	; 0x31
 800a3b8:	e796      	b.n	800a2e8 <_dtoa_r+0xae0>
 800a3ba:	4b0a      	ldr	r3, [pc, #40]	; (800a3e4 <_dtoa_r+0xbdc>)
 800a3bc:	f7ff ba99 	b.w	80098f2 <_dtoa_r+0xea>
 800a3c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	f47f aa6d 	bne.w	80098a2 <_dtoa_r+0x9a>
 800a3c8:	4b07      	ldr	r3, [pc, #28]	; (800a3e8 <_dtoa_r+0xbe0>)
 800a3ca:	f7ff ba92 	b.w	80098f2 <_dtoa_r+0xea>
 800a3ce:	9b01      	ldr	r3, [sp, #4]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	dcb5      	bgt.n	800a340 <_dtoa_r+0xb38>
 800a3d4:	9b07      	ldr	r3, [sp, #28]
 800a3d6:	2b02      	cmp	r3, #2
 800a3d8:	f73f aeb1 	bgt.w	800a13e <_dtoa_r+0x936>
 800a3dc:	e7b0      	b.n	800a340 <_dtoa_r+0xb38>
 800a3de:	bf00      	nop
 800a3e0:	0800de27 	.word	0x0800de27
 800a3e4:	0800e110 	.word	0x0800e110
 800a3e8:	0800ddab 	.word	0x0800ddab

0800a3ec <_free_r>:
 800a3ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a3ee:	2900      	cmp	r1, #0
 800a3f0:	d044      	beq.n	800a47c <_free_r+0x90>
 800a3f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3f6:	9001      	str	r0, [sp, #4]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	f1a1 0404 	sub.w	r4, r1, #4
 800a3fe:	bfb8      	it	lt
 800a400:	18e4      	addlt	r4, r4, r3
 800a402:	f7fe f8b9 	bl	8008578 <__malloc_lock>
 800a406:	4a1e      	ldr	r2, [pc, #120]	; (800a480 <_free_r+0x94>)
 800a408:	9801      	ldr	r0, [sp, #4]
 800a40a:	6813      	ldr	r3, [r2, #0]
 800a40c:	b933      	cbnz	r3, 800a41c <_free_r+0x30>
 800a40e:	6063      	str	r3, [r4, #4]
 800a410:	6014      	str	r4, [r2, #0]
 800a412:	b003      	add	sp, #12
 800a414:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a418:	f7fe b8b4 	b.w	8008584 <__malloc_unlock>
 800a41c:	42a3      	cmp	r3, r4
 800a41e:	d908      	bls.n	800a432 <_free_r+0x46>
 800a420:	6825      	ldr	r5, [r4, #0]
 800a422:	1961      	adds	r1, r4, r5
 800a424:	428b      	cmp	r3, r1
 800a426:	bf01      	itttt	eq
 800a428:	6819      	ldreq	r1, [r3, #0]
 800a42a:	685b      	ldreq	r3, [r3, #4]
 800a42c:	1949      	addeq	r1, r1, r5
 800a42e:	6021      	streq	r1, [r4, #0]
 800a430:	e7ed      	b.n	800a40e <_free_r+0x22>
 800a432:	461a      	mov	r2, r3
 800a434:	685b      	ldr	r3, [r3, #4]
 800a436:	b10b      	cbz	r3, 800a43c <_free_r+0x50>
 800a438:	42a3      	cmp	r3, r4
 800a43a:	d9fa      	bls.n	800a432 <_free_r+0x46>
 800a43c:	6811      	ldr	r1, [r2, #0]
 800a43e:	1855      	adds	r5, r2, r1
 800a440:	42a5      	cmp	r5, r4
 800a442:	d10b      	bne.n	800a45c <_free_r+0x70>
 800a444:	6824      	ldr	r4, [r4, #0]
 800a446:	4421      	add	r1, r4
 800a448:	1854      	adds	r4, r2, r1
 800a44a:	42a3      	cmp	r3, r4
 800a44c:	6011      	str	r1, [r2, #0]
 800a44e:	d1e0      	bne.n	800a412 <_free_r+0x26>
 800a450:	681c      	ldr	r4, [r3, #0]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	6053      	str	r3, [r2, #4]
 800a456:	440c      	add	r4, r1
 800a458:	6014      	str	r4, [r2, #0]
 800a45a:	e7da      	b.n	800a412 <_free_r+0x26>
 800a45c:	d902      	bls.n	800a464 <_free_r+0x78>
 800a45e:	230c      	movs	r3, #12
 800a460:	6003      	str	r3, [r0, #0]
 800a462:	e7d6      	b.n	800a412 <_free_r+0x26>
 800a464:	6825      	ldr	r5, [r4, #0]
 800a466:	1961      	adds	r1, r4, r5
 800a468:	428b      	cmp	r3, r1
 800a46a:	bf04      	itt	eq
 800a46c:	6819      	ldreq	r1, [r3, #0]
 800a46e:	685b      	ldreq	r3, [r3, #4]
 800a470:	6063      	str	r3, [r4, #4]
 800a472:	bf04      	itt	eq
 800a474:	1949      	addeq	r1, r1, r5
 800a476:	6021      	streq	r1, [r4, #0]
 800a478:	6054      	str	r4, [r2, #4]
 800a47a:	e7ca      	b.n	800a412 <_free_r+0x26>
 800a47c:	b003      	add	sp, #12
 800a47e:	bd30      	pop	{r4, r5, pc}
 800a480:	20002698 	.word	0x20002698

0800a484 <_Balloc>:
 800a484:	b570      	push	{r4, r5, r6, lr}
 800a486:	69c6      	ldr	r6, [r0, #28]
 800a488:	4604      	mov	r4, r0
 800a48a:	460d      	mov	r5, r1
 800a48c:	b976      	cbnz	r6, 800a4ac <_Balloc+0x28>
 800a48e:	2010      	movs	r0, #16
 800a490:	f7fd ffca 	bl	8008428 <malloc>
 800a494:	4602      	mov	r2, r0
 800a496:	61e0      	str	r0, [r4, #28]
 800a498:	b920      	cbnz	r0, 800a4a4 <_Balloc+0x20>
 800a49a:	4b18      	ldr	r3, [pc, #96]	; (800a4fc <_Balloc+0x78>)
 800a49c:	4818      	ldr	r0, [pc, #96]	; (800a500 <_Balloc+0x7c>)
 800a49e:	216b      	movs	r1, #107	; 0x6b
 800a4a0:	f7ff f90a 	bl	80096b8 <__assert_func>
 800a4a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a4a8:	6006      	str	r6, [r0, #0]
 800a4aa:	60c6      	str	r6, [r0, #12]
 800a4ac:	69e6      	ldr	r6, [r4, #28]
 800a4ae:	68f3      	ldr	r3, [r6, #12]
 800a4b0:	b183      	cbz	r3, 800a4d4 <_Balloc+0x50>
 800a4b2:	69e3      	ldr	r3, [r4, #28]
 800a4b4:	68db      	ldr	r3, [r3, #12]
 800a4b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a4ba:	b9b8      	cbnz	r0, 800a4ec <_Balloc+0x68>
 800a4bc:	2101      	movs	r1, #1
 800a4be:	fa01 f605 	lsl.w	r6, r1, r5
 800a4c2:	1d72      	adds	r2, r6, #5
 800a4c4:	0092      	lsls	r2, r2, #2
 800a4c6:	4620      	mov	r0, r4
 800a4c8:	f002 fbd5 	bl	800cc76 <_calloc_r>
 800a4cc:	b160      	cbz	r0, 800a4e8 <_Balloc+0x64>
 800a4ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a4d2:	e00e      	b.n	800a4f2 <_Balloc+0x6e>
 800a4d4:	2221      	movs	r2, #33	; 0x21
 800a4d6:	2104      	movs	r1, #4
 800a4d8:	4620      	mov	r0, r4
 800a4da:	f002 fbcc 	bl	800cc76 <_calloc_r>
 800a4de:	69e3      	ldr	r3, [r4, #28]
 800a4e0:	60f0      	str	r0, [r6, #12]
 800a4e2:	68db      	ldr	r3, [r3, #12]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d1e4      	bne.n	800a4b2 <_Balloc+0x2e>
 800a4e8:	2000      	movs	r0, #0
 800a4ea:	bd70      	pop	{r4, r5, r6, pc}
 800a4ec:	6802      	ldr	r2, [r0, #0]
 800a4ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a4f8:	e7f7      	b.n	800a4ea <_Balloc+0x66>
 800a4fa:	bf00      	nop
 800a4fc:	0800ddb8 	.word	0x0800ddb8
 800a500:	0800de38 	.word	0x0800de38

0800a504 <_Bfree>:
 800a504:	b570      	push	{r4, r5, r6, lr}
 800a506:	69c6      	ldr	r6, [r0, #28]
 800a508:	4605      	mov	r5, r0
 800a50a:	460c      	mov	r4, r1
 800a50c:	b976      	cbnz	r6, 800a52c <_Bfree+0x28>
 800a50e:	2010      	movs	r0, #16
 800a510:	f7fd ff8a 	bl	8008428 <malloc>
 800a514:	4602      	mov	r2, r0
 800a516:	61e8      	str	r0, [r5, #28]
 800a518:	b920      	cbnz	r0, 800a524 <_Bfree+0x20>
 800a51a:	4b09      	ldr	r3, [pc, #36]	; (800a540 <_Bfree+0x3c>)
 800a51c:	4809      	ldr	r0, [pc, #36]	; (800a544 <_Bfree+0x40>)
 800a51e:	218f      	movs	r1, #143	; 0x8f
 800a520:	f7ff f8ca 	bl	80096b8 <__assert_func>
 800a524:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a528:	6006      	str	r6, [r0, #0]
 800a52a:	60c6      	str	r6, [r0, #12]
 800a52c:	b13c      	cbz	r4, 800a53e <_Bfree+0x3a>
 800a52e:	69eb      	ldr	r3, [r5, #28]
 800a530:	6862      	ldr	r2, [r4, #4]
 800a532:	68db      	ldr	r3, [r3, #12]
 800a534:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a538:	6021      	str	r1, [r4, #0]
 800a53a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a53e:	bd70      	pop	{r4, r5, r6, pc}
 800a540:	0800ddb8 	.word	0x0800ddb8
 800a544:	0800de38 	.word	0x0800de38

0800a548 <__multadd>:
 800a548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a54c:	690d      	ldr	r5, [r1, #16]
 800a54e:	4607      	mov	r7, r0
 800a550:	460c      	mov	r4, r1
 800a552:	461e      	mov	r6, r3
 800a554:	f101 0c14 	add.w	ip, r1, #20
 800a558:	2000      	movs	r0, #0
 800a55a:	f8dc 3000 	ldr.w	r3, [ip]
 800a55e:	b299      	uxth	r1, r3
 800a560:	fb02 6101 	mla	r1, r2, r1, r6
 800a564:	0c1e      	lsrs	r6, r3, #16
 800a566:	0c0b      	lsrs	r3, r1, #16
 800a568:	fb02 3306 	mla	r3, r2, r6, r3
 800a56c:	b289      	uxth	r1, r1
 800a56e:	3001      	adds	r0, #1
 800a570:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a574:	4285      	cmp	r5, r0
 800a576:	f84c 1b04 	str.w	r1, [ip], #4
 800a57a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a57e:	dcec      	bgt.n	800a55a <__multadd+0x12>
 800a580:	b30e      	cbz	r6, 800a5c6 <__multadd+0x7e>
 800a582:	68a3      	ldr	r3, [r4, #8]
 800a584:	42ab      	cmp	r3, r5
 800a586:	dc19      	bgt.n	800a5bc <__multadd+0x74>
 800a588:	6861      	ldr	r1, [r4, #4]
 800a58a:	4638      	mov	r0, r7
 800a58c:	3101      	adds	r1, #1
 800a58e:	f7ff ff79 	bl	800a484 <_Balloc>
 800a592:	4680      	mov	r8, r0
 800a594:	b928      	cbnz	r0, 800a5a2 <__multadd+0x5a>
 800a596:	4602      	mov	r2, r0
 800a598:	4b0c      	ldr	r3, [pc, #48]	; (800a5cc <__multadd+0x84>)
 800a59a:	480d      	ldr	r0, [pc, #52]	; (800a5d0 <__multadd+0x88>)
 800a59c:	21ba      	movs	r1, #186	; 0xba
 800a59e:	f7ff f88b 	bl	80096b8 <__assert_func>
 800a5a2:	6922      	ldr	r2, [r4, #16]
 800a5a4:	3202      	adds	r2, #2
 800a5a6:	f104 010c 	add.w	r1, r4, #12
 800a5aa:	0092      	lsls	r2, r2, #2
 800a5ac:	300c      	adds	r0, #12
 800a5ae:	f7ff f86e 	bl	800968e <memcpy>
 800a5b2:	4621      	mov	r1, r4
 800a5b4:	4638      	mov	r0, r7
 800a5b6:	f7ff ffa5 	bl	800a504 <_Bfree>
 800a5ba:	4644      	mov	r4, r8
 800a5bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a5c0:	3501      	adds	r5, #1
 800a5c2:	615e      	str	r6, [r3, #20]
 800a5c4:	6125      	str	r5, [r4, #16]
 800a5c6:	4620      	mov	r0, r4
 800a5c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5cc:	0800de27 	.word	0x0800de27
 800a5d0:	0800de38 	.word	0x0800de38

0800a5d4 <__s2b>:
 800a5d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5d8:	460c      	mov	r4, r1
 800a5da:	4615      	mov	r5, r2
 800a5dc:	461f      	mov	r7, r3
 800a5de:	2209      	movs	r2, #9
 800a5e0:	3308      	adds	r3, #8
 800a5e2:	4606      	mov	r6, r0
 800a5e4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a5e8:	2100      	movs	r1, #0
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	db09      	blt.n	800a604 <__s2b+0x30>
 800a5f0:	4630      	mov	r0, r6
 800a5f2:	f7ff ff47 	bl	800a484 <_Balloc>
 800a5f6:	b940      	cbnz	r0, 800a60a <__s2b+0x36>
 800a5f8:	4602      	mov	r2, r0
 800a5fa:	4b19      	ldr	r3, [pc, #100]	; (800a660 <__s2b+0x8c>)
 800a5fc:	4819      	ldr	r0, [pc, #100]	; (800a664 <__s2b+0x90>)
 800a5fe:	21d3      	movs	r1, #211	; 0xd3
 800a600:	f7ff f85a 	bl	80096b8 <__assert_func>
 800a604:	0052      	lsls	r2, r2, #1
 800a606:	3101      	adds	r1, #1
 800a608:	e7f0      	b.n	800a5ec <__s2b+0x18>
 800a60a:	9b08      	ldr	r3, [sp, #32]
 800a60c:	6143      	str	r3, [r0, #20]
 800a60e:	2d09      	cmp	r5, #9
 800a610:	f04f 0301 	mov.w	r3, #1
 800a614:	6103      	str	r3, [r0, #16]
 800a616:	dd16      	ble.n	800a646 <__s2b+0x72>
 800a618:	f104 0909 	add.w	r9, r4, #9
 800a61c:	46c8      	mov	r8, r9
 800a61e:	442c      	add	r4, r5
 800a620:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a624:	4601      	mov	r1, r0
 800a626:	3b30      	subs	r3, #48	; 0x30
 800a628:	220a      	movs	r2, #10
 800a62a:	4630      	mov	r0, r6
 800a62c:	f7ff ff8c 	bl	800a548 <__multadd>
 800a630:	45a0      	cmp	r8, r4
 800a632:	d1f5      	bne.n	800a620 <__s2b+0x4c>
 800a634:	f1a5 0408 	sub.w	r4, r5, #8
 800a638:	444c      	add	r4, r9
 800a63a:	1b2d      	subs	r5, r5, r4
 800a63c:	1963      	adds	r3, r4, r5
 800a63e:	42bb      	cmp	r3, r7
 800a640:	db04      	blt.n	800a64c <__s2b+0x78>
 800a642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a646:	340a      	adds	r4, #10
 800a648:	2509      	movs	r5, #9
 800a64a:	e7f6      	b.n	800a63a <__s2b+0x66>
 800a64c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a650:	4601      	mov	r1, r0
 800a652:	3b30      	subs	r3, #48	; 0x30
 800a654:	220a      	movs	r2, #10
 800a656:	4630      	mov	r0, r6
 800a658:	f7ff ff76 	bl	800a548 <__multadd>
 800a65c:	e7ee      	b.n	800a63c <__s2b+0x68>
 800a65e:	bf00      	nop
 800a660:	0800de27 	.word	0x0800de27
 800a664:	0800de38 	.word	0x0800de38

0800a668 <__hi0bits>:
 800a668:	0c03      	lsrs	r3, r0, #16
 800a66a:	041b      	lsls	r3, r3, #16
 800a66c:	b9d3      	cbnz	r3, 800a6a4 <__hi0bits+0x3c>
 800a66e:	0400      	lsls	r0, r0, #16
 800a670:	2310      	movs	r3, #16
 800a672:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a676:	bf04      	itt	eq
 800a678:	0200      	lsleq	r0, r0, #8
 800a67a:	3308      	addeq	r3, #8
 800a67c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a680:	bf04      	itt	eq
 800a682:	0100      	lsleq	r0, r0, #4
 800a684:	3304      	addeq	r3, #4
 800a686:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a68a:	bf04      	itt	eq
 800a68c:	0080      	lsleq	r0, r0, #2
 800a68e:	3302      	addeq	r3, #2
 800a690:	2800      	cmp	r0, #0
 800a692:	db05      	blt.n	800a6a0 <__hi0bits+0x38>
 800a694:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a698:	f103 0301 	add.w	r3, r3, #1
 800a69c:	bf08      	it	eq
 800a69e:	2320      	moveq	r3, #32
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	4770      	bx	lr
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	e7e4      	b.n	800a672 <__hi0bits+0xa>

0800a6a8 <__lo0bits>:
 800a6a8:	6803      	ldr	r3, [r0, #0]
 800a6aa:	f013 0207 	ands.w	r2, r3, #7
 800a6ae:	d00c      	beq.n	800a6ca <__lo0bits+0x22>
 800a6b0:	07d9      	lsls	r1, r3, #31
 800a6b2:	d422      	bmi.n	800a6fa <__lo0bits+0x52>
 800a6b4:	079a      	lsls	r2, r3, #30
 800a6b6:	bf49      	itett	mi
 800a6b8:	085b      	lsrmi	r3, r3, #1
 800a6ba:	089b      	lsrpl	r3, r3, #2
 800a6bc:	6003      	strmi	r3, [r0, #0]
 800a6be:	2201      	movmi	r2, #1
 800a6c0:	bf5c      	itt	pl
 800a6c2:	6003      	strpl	r3, [r0, #0]
 800a6c4:	2202      	movpl	r2, #2
 800a6c6:	4610      	mov	r0, r2
 800a6c8:	4770      	bx	lr
 800a6ca:	b299      	uxth	r1, r3
 800a6cc:	b909      	cbnz	r1, 800a6d2 <__lo0bits+0x2a>
 800a6ce:	0c1b      	lsrs	r3, r3, #16
 800a6d0:	2210      	movs	r2, #16
 800a6d2:	b2d9      	uxtb	r1, r3
 800a6d4:	b909      	cbnz	r1, 800a6da <__lo0bits+0x32>
 800a6d6:	3208      	adds	r2, #8
 800a6d8:	0a1b      	lsrs	r3, r3, #8
 800a6da:	0719      	lsls	r1, r3, #28
 800a6dc:	bf04      	itt	eq
 800a6de:	091b      	lsreq	r3, r3, #4
 800a6e0:	3204      	addeq	r2, #4
 800a6e2:	0799      	lsls	r1, r3, #30
 800a6e4:	bf04      	itt	eq
 800a6e6:	089b      	lsreq	r3, r3, #2
 800a6e8:	3202      	addeq	r2, #2
 800a6ea:	07d9      	lsls	r1, r3, #31
 800a6ec:	d403      	bmi.n	800a6f6 <__lo0bits+0x4e>
 800a6ee:	085b      	lsrs	r3, r3, #1
 800a6f0:	f102 0201 	add.w	r2, r2, #1
 800a6f4:	d003      	beq.n	800a6fe <__lo0bits+0x56>
 800a6f6:	6003      	str	r3, [r0, #0]
 800a6f8:	e7e5      	b.n	800a6c6 <__lo0bits+0x1e>
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	e7e3      	b.n	800a6c6 <__lo0bits+0x1e>
 800a6fe:	2220      	movs	r2, #32
 800a700:	e7e1      	b.n	800a6c6 <__lo0bits+0x1e>
	...

0800a704 <__i2b>:
 800a704:	b510      	push	{r4, lr}
 800a706:	460c      	mov	r4, r1
 800a708:	2101      	movs	r1, #1
 800a70a:	f7ff febb 	bl	800a484 <_Balloc>
 800a70e:	4602      	mov	r2, r0
 800a710:	b928      	cbnz	r0, 800a71e <__i2b+0x1a>
 800a712:	4b05      	ldr	r3, [pc, #20]	; (800a728 <__i2b+0x24>)
 800a714:	4805      	ldr	r0, [pc, #20]	; (800a72c <__i2b+0x28>)
 800a716:	f240 1145 	movw	r1, #325	; 0x145
 800a71a:	f7fe ffcd 	bl	80096b8 <__assert_func>
 800a71e:	2301      	movs	r3, #1
 800a720:	6144      	str	r4, [r0, #20]
 800a722:	6103      	str	r3, [r0, #16]
 800a724:	bd10      	pop	{r4, pc}
 800a726:	bf00      	nop
 800a728:	0800de27 	.word	0x0800de27
 800a72c:	0800de38 	.word	0x0800de38

0800a730 <__multiply>:
 800a730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a734:	4691      	mov	r9, r2
 800a736:	690a      	ldr	r2, [r1, #16]
 800a738:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a73c:	429a      	cmp	r2, r3
 800a73e:	bfb8      	it	lt
 800a740:	460b      	movlt	r3, r1
 800a742:	460c      	mov	r4, r1
 800a744:	bfbc      	itt	lt
 800a746:	464c      	movlt	r4, r9
 800a748:	4699      	movlt	r9, r3
 800a74a:	6927      	ldr	r7, [r4, #16]
 800a74c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a750:	68a3      	ldr	r3, [r4, #8]
 800a752:	6861      	ldr	r1, [r4, #4]
 800a754:	eb07 060a 	add.w	r6, r7, sl
 800a758:	42b3      	cmp	r3, r6
 800a75a:	b085      	sub	sp, #20
 800a75c:	bfb8      	it	lt
 800a75e:	3101      	addlt	r1, #1
 800a760:	f7ff fe90 	bl	800a484 <_Balloc>
 800a764:	b930      	cbnz	r0, 800a774 <__multiply+0x44>
 800a766:	4602      	mov	r2, r0
 800a768:	4b44      	ldr	r3, [pc, #272]	; (800a87c <__multiply+0x14c>)
 800a76a:	4845      	ldr	r0, [pc, #276]	; (800a880 <__multiply+0x150>)
 800a76c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a770:	f7fe ffa2 	bl	80096b8 <__assert_func>
 800a774:	f100 0514 	add.w	r5, r0, #20
 800a778:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a77c:	462b      	mov	r3, r5
 800a77e:	2200      	movs	r2, #0
 800a780:	4543      	cmp	r3, r8
 800a782:	d321      	bcc.n	800a7c8 <__multiply+0x98>
 800a784:	f104 0314 	add.w	r3, r4, #20
 800a788:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a78c:	f109 0314 	add.w	r3, r9, #20
 800a790:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a794:	9202      	str	r2, [sp, #8]
 800a796:	1b3a      	subs	r2, r7, r4
 800a798:	3a15      	subs	r2, #21
 800a79a:	f022 0203 	bic.w	r2, r2, #3
 800a79e:	3204      	adds	r2, #4
 800a7a0:	f104 0115 	add.w	r1, r4, #21
 800a7a4:	428f      	cmp	r7, r1
 800a7a6:	bf38      	it	cc
 800a7a8:	2204      	movcc	r2, #4
 800a7aa:	9201      	str	r2, [sp, #4]
 800a7ac:	9a02      	ldr	r2, [sp, #8]
 800a7ae:	9303      	str	r3, [sp, #12]
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	d80c      	bhi.n	800a7ce <__multiply+0x9e>
 800a7b4:	2e00      	cmp	r6, #0
 800a7b6:	dd03      	ble.n	800a7c0 <__multiply+0x90>
 800a7b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d05b      	beq.n	800a878 <__multiply+0x148>
 800a7c0:	6106      	str	r6, [r0, #16]
 800a7c2:	b005      	add	sp, #20
 800a7c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7c8:	f843 2b04 	str.w	r2, [r3], #4
 800a7cc:	e7d8      	b.n	800a780 <__multiply+0x50>
 800a7ce:	f8b3 a000 	ldrh.w	sl, [r3]
 800a7d2:	f1ba 0f00 	cmp.w	sl, #0
 800a7d6:	d024      	beq.n	800a822 <__multiply+0xf2>
 800a7d8:	f104 0e14 	add.w	lr, r4, #20
 800a7dc:	46a9      	mov	r9, r5
 800a7de:	f04f 0c00 	mov.w	ip, #0
 800a7e2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a7e6:	f8d9 1000 	ldr.w	r1, [r9]
 800a7ea:	fa1f fb82 	uxth.w	fp, r2
 800a7ee:	b289      	uxth	r1, r1
 800a7f0:	fb0a 110b 	mla	r1, sl, fp, r1
 800a7f4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a7f8:	f8d9 2000 	ldr.w	r2, [r9]
 800a7fc:	4461      	add	r1, ip
 800a7fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a802:	fb0a c20b 	mla	r2, sl, fp, ip
 800a806:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a80a:	b289      	uxth	r1, r1
 800a80c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a810:	4577      	cmp	r7, lr
 800a812:	f849 1b04 	str.w	r1, [r9], #4
 800a816:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a81a:	d8e2      	bhi.n	800a7e2 <__multiply+0xb2>
 800a81c:	9a01      	ldr	r2, [sp, #4]
 800a81e:	f845 c002 	str.w	ip, [r5, r2]
 800a822:	9a03      	ldr	r2, [sp, #12]
 800a824:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a828:	3304      	adds	r3, #4
 800a82a:	f1b9 0f00 	cmp.w	r9, #0
 800a82e:	d021      	beq.n	800a874 <__multiply+0x144>
 800a830:	6829      	ldr	r1, [r5, #0]
 800a832:	f104 0c14 	add.w	ip, r4, #20
 800a836:	46ae      	mov	lr, r5
 800a838:	f04f 0a00 	mov.w	sl, #0
 800a83c:	f8bc b000 	ldrh.w	fp, [ip]
 800a840:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a844:	fb09 220b 	mla	r2, r9, fp, r2
 800a848:	4452      	add	r2, sl
 800a84a:	b289      	uxth	r1, r1
 800a84c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a850:	f84e 1b04 	str.w	r1, [lr], #4
 800a854:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a858:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a85c:	f8be 1000 	ldrh.w	r1, [lr]
 800a860:	fb09 110a 	mla	r1, r9, sl, r1
 800a864:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a868:	4567      	cmp	r7, ip
 800a86a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a86e:	d8e5      	bhi.n	800a83c <__multiply+0x10c>
 800a870:	9a01      	ldr	r2, [sp, #4]
 800a872:	50a9      	str	r1, [r5, r2]
 800a874:	3504      	adds	r5, #4
 800a876:	e799      	b.n	800a7ac <__multiply+0x7c>
 800a878:	3e01      	subs	r6, #1
 800a87a:	e79b      	b.n	800a7b4 <__multiply+0x84>
 800a87c:	0800de27 	.word	0x0800de27
 800a880:	0800de38 	.word	0x0800de38

0800a884 <__pow5mult>:
 800a884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a888:	4615      	mov	r5, r2
 800a88a:	f012 0203 	ands.w	r2, r2, #3
 800a88e:	4606      	mov	r6, r0
 800a890:	460f      	mov	r7, r1
 800a892:	d007      	beq.n	800a8a4 <__pow5mult+0x20>
 800a894:	4c25      	ldr	r4, [pc, #148]	; (800a92c <__pow5mult+0xa8>)
 800a896:	3a01      	subs	r2, #1
 800a898:	2300      	movs	r3, #0
 800a89a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a89e:	f7ff fe53 	bl	800a548 <__multadd>
 800a8a2:	4607      	mov	r7, r0
 800a8a4:	10ad      	asrs	r5, r5, #2
 800a8a6:	d03d      	beq.n	800a924 <__pow5mult+0xa0>
 800a8a8:	69f4      	ldr	r4, [r6, #28]
 800a8aa:	b97c      	cbnz	r4, 800a8cc <__pow5mult+0x48>
 800a8ac:	2010      	movs	r0, #16
 800a8ae:	f7fd fdbb 	bl	8008428 <malloc>
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	61f0      	str	r0, [r6, #28]
 800a8b6:	b928      	cbnz	r0, 800a8c4 <__pow5mult+0x40>
 800a8b8:	4b1d      	ldr	r3, [pc, #116]	; (800a930 <__pow5mult+0xac>)
 800a8ba:	481e      	ldr	r0, [pc, #120]	; (800a934 <__pow5mult+0xb0>)
 800a8bc:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a8c0:	f7fe fefa 	bl	80096b8 <__assert_func>
 800a8c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a8c8:	6004      	str	r4, [r0, #0]
 800a8ca:	60c4      	str	r4, [r0, #12]
 800a8cc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a8d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a8d4:	b94c      	cbnz	r4, 800a8ea <__pow5mult+0x66>
 800a8d6:	f240 2171 	movw	r1, #625	; 0x271
 800a8da:	4630      	mov	r0, r6
 800a8dc:	f7ff ff12 	bl	800a704 <__i2b>
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a8e6:	4604      	mov	r4, r0
 800a8e8:	6003      	str	r3, [r0, #0]
 800a8ea:	f04f 0900 	mov.w	r9, #0
 800a8ee:	07eb      	lsls	r3, r5, #31
 800a8f0:	d50a      	bpl.n	800a908 <__pow5mult+0x84>
 800a8f2:	4639      	mov	r1, r7
 800a8f4:	4622      	mov	r2, r4
 800a8f6:	4630      	mov	r0, r6
 800a8f8:	f7ff ff1a 	bl	800a730 <__multiply>
 800a8fc:	4639      	mov	r1, r7
 800a8fe:	4680      	mov	r8, r0
 800a900:	4630      	mov	r0, r6
 800a902:	f7ff fdff 	bl	800a504 <_Bfree>
 800a906:	4647      	mov	r7, r8
 800a908:	106d      	asrs	r5, r5, #1
 800a90a:	d00b      	beq.n	800a924 <__pow5mult+0xa0>
 800a90c:	6820      	ldr	r0, [r4, #0]
 800a90e:	b938      	cbnz	r0, 800a920 <__pow5mult+0x9c>
 800a910:	4622      	mov	r2, r4
 800a912:	4621      	mov	r1, r4
 800a914:	4630      	mov	r0, r6
 800a916:	f7ff ff0b 	bl	800a730 <__multiply>
 800a91a:	6020      	str	r0, [r4, #0]
 800a91c:	f8c0 9000 	str.w	r9, [r0]
 800a920:	4604      	mov	r4, r0
 800a922:	e7e4      	b.n	800a8ee <__pow5mult+0x6a>
 800a924:	4638      	mov	r0, r7
 800a926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a92a:	bf00      	nop
 800a92c:	0800df88 	.word	0x0800df88
 800a930:	0800ddb8 	.word	0x0800ddb8
 800a934:	0800de38 	.word	0x0800de38

0800a938 <__lshift>:
 800a938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a93c:	460c      	mov	r4, r1
 800a93e:	6849      	ldr	r1, [r1, #4]
 800a940:	6923      	ldr	r3, [r4, #16]
 800a942:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a946:	68a3      	ldr	r3, [r4, #8]
 800a948:	4607      	mov	r7, r0
 800a94a:	4691      	mov	r9, r2
 800a94c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a950:	f108 0601 	add.w	r6, r8, #1
 800a954:	42b3      	cmp	r3, r6
 800a956:	db0b      	blt.n	800a970 <__lshift+0x38>
 800a958:	4638      	mov	r0, r7
 800a95a:	f7ff fd93 	bl	800a484 <_Balloc>
 800a95e:	4605      	mov	r5, r0
 800a960:	b948      	cbnz	r0, 800a976 <__lshift+0x3e>
 800a962:	4602      	mov	r2, r0
 800a964:	4b28      	ldr	r3, [pc, #160]	; (800aa08 <__lshift+0xd0>)
 800a966:	4829      	ldr	r0, [pc, #164]	; (800aa0c <__lshift+0xd4>)
 800a968:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a96c:	f7fe fea4 	bl	80096b8 <__assert_func>
 800a970:	3101      	adds	r1, #1
 800a972:	005b      	lsls	r3, r3, #1
 800a974:	e7ee      	b.n	800a954 <__lshift+0x1c>
 800a976:	2300      	movs	r3, #0
 800a978:	f100 0114 	add.w	r1, r0, #20
 800a97c:	f100 0210 	add.w	r2, r0, #16
 800a980:	4618      	mov	r0, r3
 800a982:	4553      	cmp	r3, sl
 800a984:	db33      	blt.n	800a9ee <__lshift+0xb6>
 800a986:	6920      	ldr	r0, [r4, #16]
 800a988:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a98c:	f104 0314 	add.w	r3, r4, #20
 800a990:	f019 091f 	ands.w	r9, r9, #31
 800a994:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a998:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a99c:	d02b      	beq.n	800a9f6 <__lshift+0xbe>
 800a99e:	f1c9 0e20 	rsb	lr, r9, #32
 800a9a2:	468a      	mov	sl, r1
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	6818      	ldr	r0, [r3, #0]
 800a9a8:	fa00 f009 	lsl.w	r0, r0, r9
 800a9ac:	4310      	orrs	r0, r2
 800a9ae:	f84a 0b04 	str.w	r0, [sl], #4
 800a9b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9b6:	459c      	cmp	ip, r3
 800a9b8:	fa22 f20e 	lsr.w	r2, r2, lr
 800a9bc:	d8f3      	bhi.n	800a9a6 <__lshift+0x6e>
 800a9be:	ebac 0304 	sub.w	r3, ip, r4
 800a9c2:	3b15      	subs	r3, #21
 800a9c4:	f023 0303 	bic.w	r3, r3, #3
 800a9c8:	3304      	adds	r3, #4
 800a9ca:	f104 0015 	add.w	r0, r4, #21
 800a9ce:	4584      	cmp	ip, r0
 800a9d0:	bf38      	it	cc
 800a9d2:	2304      	movcc	r3, #4
 800a9d4:	50ca      	str	r2, [r1, r3]
 800a9d6:	b10a      	cbz	r2, 800a9dc <__lshift+0xa4>
 800a9d8:	f108 0602 	add.w	r6, r8, #2
 800a9dc:	3e01      	subs	r6, #1
 800a9de:	4638      	mov	r0, r7
 800a9e0:	612e      	str	r6, [r5, #16]
 800a9e2:	4621      	mov	r1, r4
 800a9e4:	f7ff fd8e 	bl	800a504 <_Bfree>
 800a9e8:	4628      	mov	r0, r5
 800a9ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9ee:	f842 0f04 	str.w	r0, [r2, #4]!
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	e7c5      	b.n	800a982 <__lshift+0x4a>
 800a9f6:	3904      	subs	r1, #4
 800a9f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9fc:	f841 2f04 	str.w	r2, [r1, #4]!
 800aa00:	459c      	cmp	ip, r3
 800aa02:	d8f9      	bhi.n	800a9f8 <__lshift+0xc0>
 800aa04:	e7ea      	b.n	800a9dc <__lshift+0xa4>
 800aa06:	bf00      	nop
 800aa08:	0800de27 	.word	0x0800de27
 800aa0c:	0800de38 	.word	0x0800de38

0800aa10 <__mcmp>:
 800aa10:	b530      	push	{r4, r5, lr}
 800aa12:	6902      	ldr	r2, [r0, #16]
 800aa14:	690c      	ldr	r4, [r1, #16]
 800aa16:	1b12      	subs	r2, r2, r4
 800aa18:	d10e      	bne.n	800aa38 <__mcmp+0x28>
 800aa1a:	f100 0314 	add.w	r3, r0, #20
 800aa1e:	3114      	adds	r1, #20
 800aa20:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800aa24:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800aa28:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800aa2c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800aa30:	42a5      	cmp	r5, r4
 800aa32:	d003      	beq.n	800aa3c <__mcmp+0x2c>
 800aa34:	d305      	bcc.n	800aa42 <__mcmp+0x32>
 800aa36:	2201      	movs	r2, #1
 800aa38:	4610      	mov	r0, r2
 800aa3a:	bd30      	pop	{r4, r5, pc}
 800aa3c:	4283      	cmp	r3, r0
 800aa3e:	d3f3      	bcc.n	800aa28 <__mcmp+0x18>
 800aa40:	e7fa      	b.n	800aa38 <__mcmp+0x28>
 800aa42:	f04f 32ff 	mov.w	r2, #4294967295
 800aa46:	e7f7      	b.n	800aa38 <__mcmp+0x28>

0800aa48 <__mdiff>:
 800aa48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa4c:	460c      	mov	r4, r1
 800aa4e:	4606      	mov	r6, r0
 800aa50:	4611      	mov	r1, r2
 800aa52:	4620      	mov	r0, r4
 800aa54:	4690      	mov	r8, r2
 800aa56:	f7ff ffdb 	bl	800aa10 <__mcmp>
 800aa5a:	1e05      	subs	r5, r0, #0
 800aa5c:	d110      	bne.n	800aa80 <__mdiff+0x38>
 800aa5e:	4629      	mov	r1, r5
 800aa60:	4630      	mov	r0, r6
 800aa62:	f7ff fd0f 	bl	800a484 <_Balloc>
 800aa66:	b930      	cbnz	r0, 800aa76 <__mdiff+0x2e>
 800aa68:	4b3a      	ldr	r3, [pc, #232]	; (800ab54 <__mdiff+0x10c>)
 800aa6a:	4602      	mov	r2, r0
 800aa6c:	f240 2137 	movw	r1, #567	; 0x237
 800aa70:	4839      	ldr	r0, [pc, #228]	; (800ab58 <__mdiff+0x110>)
 800aa72:	f7fe fe21 	bl	80096b8 <__assert_func>
 800aa76:	2301      	movs	r3, #1
 800aa78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aa7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa80:	bfa4      	itt	ge
 800aa82:	4643      	movge	r3, r8
 800aa84:	46a0      	movge	r8, r4
 800aa86:	4630      	mov	r0, r6
 800aa88:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800aa8c:	bfa6      	itte	ge
 800aa8e:	461c      	movge	r4, r3
 800aa90:	2500      	movge	r5, #0
 800aa92:	2501      	movlt	r5, #1
 800aa94:	f7ff fcf6 	bl	800a484 <_Balloc>
 800aa98:	b920      	cbnz	r0, 800aaa4 <__mdiff+0x5c>
 800aa9a:	4b2e      	ldr	r3, [pc, #184]	; (800ab54 <__mdiff+0x10c>)
 800aa9c:	4602      	mov	r2, r0
 800aa9e:	f240 2145 	movw	r1, #581	; 0x245
 800aaa2:	e7e5      	b.n	800aa70 <__mdiff+0x28>
 800aaa4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800aaa8:	6926      	ldr	r6, [r4, #16]
 800aaaa:	60c5      	str	r5, [r0, #12]
 800aaac:	f104 0914 	add.w	r9, r4, #20
 800aab0:	f108 0514 	add.w	r5, r8, #20
 800aab4:	f100 0e14 	add.w	lr, r0, #20
 800aab8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800aabc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800aac0:	f108 0210 	add.w	r2, r8, #16
 800aac4:	46f2      	mov	sl, lr
 800aac6:	2100      	movs	r1, #0
 800aac8:	f859 3b04 	ldr.w	r3, [r9], #4
 800aacc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800aad0:	fa11 f88b 	uxtah	r8, r1, fp
 800aad4:	b299      	uxth	r1, r3
 800aad6:	0c1b      	lsrs	r3, r3, #16
 800aad8:	eba8 0801 	sub.w	r8, r8, r1
 800aadc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aae0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800aae4:	fa1f f888 	uxth.w	r8, r8
 800aae8:	1419      	asrs	r1, r3, #16
 800aaea:	454e      	cmp	r6, r9
 800aaec:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800aaf0:	f84a 3b04 	str.w	r3, [sl], #4
 800aaf4:	d8e8      	bhi.n	800aac8 <__mdiff+0x80>
 800aaf6:	1b33      	subs	r3, r6, r4
 800aaf8:	3b15      	subs	r3, #21
 800aafa:	f023 0303 	bic.w	r3, r3, #3
 800aafe:	3304      	adds	r3, #4
 800ab00:	3415      	adds	r4, #21
 800ab02:	42a6      	cmp	r6, r4
 800ab04:	bf38      	it	cc
 800ab06:	2304      	movcc	r3, #4
 800ab08:	441d      	add	r5, r3
 800ab0a:	4473      	add	r3, lr
 800ab0c:	469e      	mov	lr, r3
 800ab0e:	462e      	mov	r6, r5
 800ab10:	4566      	cmp	r6, ip
 800ab12:	d30e      	bcc.n	800ab32 <__mdiff+0xea>
 800ab14:	f10c 0203 	add.w	r2, ip, #3
 800ab18:	1b52      	subs	r2, r2, r5
 800ab1a:	f022 0203 	bic.w	r2, r2, #3
 800ab1e:	3d03      	subs	r5, #3
 800ab20:	45ac      	cmp	ip, r5
 800ab22:	bf38      	it	cc
 800ab24:	2200      	movcc	r2, #0
 800ab26:	4413      	add	r3, r2
 800ab28:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ab2c:	b17a      	cbz	r2, 800ab4e <__mdiff+0x106>
 800ab2e:	6107      	str	r7, [r0, #16]
 800ab30:	e7a4      	b.n	800aa7c <__mdiff+0x34>
 800ab32:	f856 8b04 	ldr.w	r8, [r6], #4
 800ab36:	fa11 f288 	uxtah	r2, r1, r8
 800ab3a:	1414      	asrs	r4, r2, #16
 800ab3c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ab40:	b292      	uxth	r2, r2
 800ab42:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ab46:	f84e 2b04 	str.w	r2, [lr], #4
 800ab4a:	1421      	asrs	r1, r4, #16
 800ab4c:	e7e0      	b.n	800ab10 <__mdiff+0xc8>
 800ab4e:	3f01      	subs	r7, #1
 800ab50:	e7ea      	b.n	800ab28 <__mdiff+0xe0>
 800ab52:	bf00      	nop
 800ab54:	0800de27 	.word	0x0800de27
 800ab58:	0800de38 	.word	0x0800de38

0800ab5c <__ulp>:
 800ab5c:	b082      	sub	sp, #8
 800ab5e:	ed8d 0b00 	vstr	d0, [sp]
 800ab62:	9a01      	ldr	r2, [sp, #4]
 800ab64:	4b0f      	ldr	r3, [pc, #60]	; (800aba4 <__ulp+0x48>)
 800ab66:	4013      	ands	r3, r2
 800ab68:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	dc08      	bgt.n	800ab82 <__ulp+0x26>
 800ab70:	425b      	negs	r3, r3
 800ab72:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800ab76:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ab7a:	da04      	bge.n	800ab86 <__ulp+0x2a>
 800ab7c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ab80:	4113      	asrs	r3, r2
 800ab82:	2200      	movs	r2, #0
 800ab84:	e008      	b.n	800ab98 <__ulp+0x3c>
 800ab86:	f1a2 0314 	sub.w	r3, r2, #20
 800ab8a:	2b1e      	cmp	r3, #30
 800ab8c:	bfda      	itte	le
 800ab8e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800ab92:	40da      	lsrle	r2, r3
 800ab94:	2201      	movgt	r2, #1
 800ab96:	2300      	movs	r3, #0
 800ab98:	4619      	mov	r1, r3
 800ab9a:	4610      	mov	r0, r2
 800ab9c:	ec41 0b10 	vmov	d0, r0, r1
 800aba0:	b002      	add	sp, #8
 800aba2:	4770      	bx	lr
 800aba4:	7ff00000 	.word	0x7ff00000

0800aba8 <__b2d>:
 800aba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abac:	6906      	ldr	r6, [r0, #16]
 800abae:	f100 0814 	add.w	r8, r0, #20
 800abb2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800abb6:	1f37      	subs	r7, r6, #4
 800abb8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800abbc:	4610      	mov	r0, r2
 800abbe:	f7ff fd53 	bl	800a668 <__hi0bits>
 800abc2:	f1c0 0320 	rsb	r3, r0, #32
 800abc6:	280a      	cmp	r0, #10
 800abc8:	600b      	str	r3, [r1, #0]
 800abca:	491b      	ldr	r1, [pc, #108]	; (800ac38 <__b2d+0x90>)
 800abcc:	dc15      	bgt.n	800abfa <__b2d+0x52>
 800abce:	f1c0 0c0b 	rsb	ip, r0, #11
 800abd2:	fa22 f30c 	lsr.w	r3, r2, ip
 800abd6:	45b8      	cmp	r8, r7
 800abd8:	ea43 0501 	orr.w	r5, r3, r1
 800abdc:	bf34      	ite	cc
 800abde:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800abe2:	2300      	movcs	r3, #0
 800abe4:	3015      	adds	r0, #21
 800abe6:	fa02 f000 	lsl.w	r0, r2, r0
 800abea:	fa23 f30c 	lsr.w	r3, r3, ip
 800abee:	4303      	orrs	r3, r0
 800abf0:	461c      	mov	r4, r3
 800abf2:	ec45 4b10 	vmov	d0, r4, r5
 800abf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abfa:	45b8      	cmp	r8, r7
 800abfc:	bf3a      	itte	cc
 800abfe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ac02:	f1a6 0708 	subcc.w	r7, r6, #8
 800ac06:	2300      	movcs	r3, #0
 800ac08:	380b      	subs	r0, #11
 800ac0a:	d012      	beq.n	800ac32 <__b2d+0x8a>
 800ac0c:	f1c0 0120 	rsb	r1, r0, #32
 800ac10:	fa23 f401 	lsr.w	r4, r3, r1
 800ac14:	4082      	lsls	r2, r0
 800ac16:	4322      	orrs	r2, r4
 800ac18:	4547      	cmp	r7, r8
 800ac1a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800ac1e:	bf8c      	ite	hi
 800ac20:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ac24:	2200      	movls	r2, #0
 800ac26:	4083      	lsls	r3, r0
 800ac28:	40ca      	lsrs	r2, r1
 800ac2a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	e7de      	b.n	800abf0 <__b2d+0x48>
 800ac32:	ea42 0501 	orr.w	r5, r2, r1
 800ac36:	e7db      	b.n	800abf0 <__b2d+0x48>
 800ac38:	3ff00000 	.word	0x3ff00000

0800ac3c <__d2b>:
 800ac3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac40:	460f      	mov	r7, r1
 800ac42:	2101      	movs	r1, #1
 800ac44:	ec59 8b10 	vmov	r8, r9, d0
 800ac48:	4616      	mov	r6, r2
 800ac4a:	f7ff fc1b 	bl	800a484 <_Balloc>
 800ac4e:	4604      	mov	r4, r0
 800ac50:	b930      	cbnz	r0, 800ac60 <__d2b+0x24>
 800ac52:	4602      	mov	r2, r0
 800ac54:	4b24      	ldr	r3, [pc, #144]	; (800ace8 <__d2b+0xac>)
 800ac56:	4825      	ldr	r0, [pc, #148]	; (800acec <__d2b+0xb0>)
 800ac58:	f240 310f 	movw	r1, #783	; 0x30f
 800ac5c:	f7fe fd2c 	bl	80096b8 <__assert_func>
 800ac60:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ac64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac68:	bb2d      	cbnz	r5, 800acb6 <__d2b+0x7a>
 800ac6a:	9301      	str	r3, [sp, #4]
 800ac6c:	f1b8 0300 	subs.w	r3, r8, #0
 800ac70:	d026      	beq.n	800acc0 <__d2b+0x84>
 800ac72:	4668      	mov	r0, sp
 800ac74:	9300      	str	r3, [sp, #0]
 800ac76:	f7ff fd17 	bl	800a6a8 <__lo0bits>
 800ac7a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ac7e:	b1e8      	cbz	r0, 800acbc <__d2b+0x80>
 800ac80:	f1c0 0320 	rsb	r3, r0, #32
 800ac84:	fa02 f303 	lsl.w	r3, r2, r3
 800ac88:	430b      	orrs	r3, r1
 800ac8a:	40c2      	lsrs	r2, r0
 800ac8c:	6163      	str	r3, [r4, #20]
 800ac8e:	9201      	str	r2, [sp, #4]
 800ac90:	9b01      	ldr	r3, [sp, #4]
 800ac92:	61a3      	str	r3, [r4, #24]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	bf14      	ite	ne
 800ac98:	2202      	movne	r2, #2
 800ac9a:	2201      	moveq	r2, #1
 800ac9c:	6122      	str	r2, [r4, #16]
 800ac9e:	b1bd      	cbz	r5, 800acd0 <__d2b+0x94>
 800aca0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aca4:	4405      	add	r5, r0
 800aca6:	603d      	str	r5, [r7, #0]
 800aca8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800acac:	6030      	str	r0, [r6, #0]
 800acae:	4620      	mov	r0, r4
 800acb0:	b003      	add	sp, #12
 800acb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800acb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800acba:	e7d6      	b.n	800ac6a <__d2b+0x2e>
 800acbc:	6161      	str	r1, [r4, #20]
 800acbe:	e7e7      	b.n	800ac90 <__d2b+0x54>
 800acc0:	a801      	add	r0, sp, #4
 800acc2:	f7ff fcf1 	bl	800a6a8 <__lo0bits>
 800acc6:	9b01      	ldr	r3, [sp, #4]
 800acc8:	6163      	str	r3, [r4, #20]
 800acca:	3020      	adds	r0, #32
 800accc:	2201      	movs	r2, #1
 800acce:	e7e5      	b.n	800ac9c <__d2b+0x60>
 800acd0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800acd4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800acd8:	6038      	str	r0, [r7, #0]
 800acda:	6918      	ldr	r0, [r3, #16]
 800acdc:	f7ff fcc4 	bl	800a668 <__hi0bits>
 800ace0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ace4:	e7e2      	b.n	800acac <__d2b+0x70>
 800ace6:	bf00      	nop
 800ace8:	0800de27 	.word	0x0800de27
 800acec:	0800de38 	.word	0x0800de38

0800acf0 <__ratio>:
 800acf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf4:	4688      	mov	r8, r1
 800acf6:	4669      	mov	r1, sp
 800acf8:	4681      	mov	r9, r0
 800acfa:	f7ff ff55 	bl	800aba8 <__b2d>
 800acfe:	a901      	add	r1, sp, #4
 800ad00:	4640      	mov	r0, r8
 800ad02:	ec55 4b10 	vmov	r4, r5, d0
 800ad06:	f7ff ff4f 	bl	800aba8 <__b2d>
 800ad0a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ad0e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ad12:	eba3 0c02 	sub.w	ip, r3, r2
 800ad16:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ad1a:	1a9b      	subs	r3, r3, r2
 800ad1c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ad20:	ec51 0b10 	vmov	r0, r1, d0
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	bfd6      	itet	le
 800ad28:	460a      	movle	r2, r1
 800ad2a:	462a      	movgt	r2, r5
 800ad2c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ad30:	468b      	mov	fp, r1
 800ad32:	462f      	mov	r7, r5
 800ad34:	bfd4      	ite	le
 800ad36:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ad3a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ad3e:	4620      	mov	r0, r4
 800ad40:	ee10 2a10 	vmov	r2, s0
 800ad44:	465b      	mov	r3, fp
 800ad46:	4639      	mov	r1, r7
 800ad48:	f7f5 fd80 	bl	800084c <__aeabi_ddiv>
 800ad4c:	ec41 0b10 	vmov	d0, r0, r1
 800ad50:	b003      	add	sp, #12
 800ad52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ad56 <__copybits>:
 800ad56:	3901      	subs	r1, #1
 800ad58:	b570      	push	{r4, r5, r6, lr}
 800ad5a:	1149      	asrs	r1, r1, #5
 800ad5c:	6914      	ldr	r4, [r2, #16]
 800ad5e:	3101      	adds	r1, #1
 800ad60:	f102 0314 	add.w	r3, r2, #20
 800ad64:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ad68:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ad6c:	1f05      	subs	r5, r0, #4
 800ad6e:	42a3      	cmp	r3, r4
 800ad70:	d30c      	bcc.n	800ad8c <__copybits+0x36>
 800ad72:	1aa3      	subs	r3, r4, r2
 800ad74:	3b11      	subs	r3, #17
 800ad76:	f023 0303 	bic.w	r3, r3, #3
 800ad7a:	3211      	adds	r2, #17
 800ad7c:	42a2      	cmp	r2, r4
 800ad7e:	bf88      	it	hi
 800ad80:	2300      	movhi	r3, #0
 800ad82:	4418      	add	r0, r3
 800ad84:	2300      	movs	r3, #0
 800ad86:	4288      	cmp	r0, r1
 800ad88:	d305      	bcc.n	800ad96 <__copybits+0x40>
 800ad8a:	bd70      	pop	{r4, r5, r6, pc}
 800ad8c:	f853 6b04 	ldr.w	r6, [r3], #4
 800ad90:	f845 6f04 	str.w	r6, [r5, #4]!
 800ad94:	e7eb      	b.n	800ad6e <__copybits+0x18>
 800ad96:	f840 3b04 	str.w	r3, [r0], #4
 800ad9a:	e7f4      	b.n	800ad86 <__copybits+0x30>

0800ad9c <__any_on>:
 800ad9c:	f100 0214 	add.w	r2, r0, #20
 800ada0:	6900      	ldr	r0, [r0, #16]
 800ada2:	114b      	asrs	r3, r1, #5
 800ada4:	4298      	cmp	r0, r3
 800ada6:	b510      	push	{r4, lr}
 800ada8:	db11      	blt.n	800adce <__any_on+0x32>
 800adaa:	dd0a      	ble.n	800adc2 <__any_on+0x26>
 800adac:	f011 011f 	ands.w	r1, r1, #31
 800adb0:	d007      	beq.n	800adc2 <__any_on+0x26>
 800adb2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800adb6:	fa24 f001 	lsr.w	r0, r4, r1
 800adba:	fa00 f101 	lsl.w	r1, r0, r1
 800adbe:	428c      	cmp	r4, r1
 800adc0:	d10b      	bne.n	800adda <__any_on+0x3e>
 800adc2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d803      	bhi.n	800add2 <__any_on+0x36>
 800adca:	2000      	movs	r0, #0
 800adcc:	bd10      	pop	{r4, pc}
 800adce:	4603      	mov	r3, r0
 800add0:	e7f7      	b.n	800adc2 <__any_on+0x26>
 800add2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800add6:	2900      	cmp	r1, #0
 800add8:	d0f5      	beq.n	800adc6 <__any_on+0x2a>
 800adda:	2001      	movs	r0, #1
 800addc:	e7f6      	b.n	800adcc <__any_on+0x30>

0800adde <_malloc_usable_size_r>:
 800adde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ade2:	1f18      	subs	r0, r3, #4
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	bfbc      	itt	lt
 800ade8:	580b      	ldrlt	r3, [r1, r0]
 800adea:	18c0      	addlt	r0, r0, r3
 800adec:	4770      	bx	lr

0800adee <sulp>:
 800adee:	b570      	push	{r4, r5, r6, lr}
 800adf0:	4604      	mov	r4, r0
 800adf2:	460d      	mov	r5, r1
 800adf4:	ec45 4b10 	vmov	d0, r4, r5
 800adf8:	4616      	mov	r6, r2
 800adfa:	f7ff feaf 	bl	800ab5c <__ulp>
 800adfe:	ec51 0b10 	vmov	r0, r1, d0
 800ae02:	b17e      	cbz	r6, 800ae24 <sulp+0x36>
 800ae04:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ae08:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	dd09      	ble.n	800ae24 <sulp+0x36>
 800ae10:	051b      	lsls	r3, r3, #20
 800ae12:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ae16:	2400      	movs	r4, #0
 800ae18:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ae1c:	4622      	mov	r2, r4
 800ae1e:	462b      	mov	r3, r5
 800ae20:	f7f5 fbea 	bl	80005f8 <__aeabi_dmul>
 800ae24:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ae28 <_strtod_l>:
 800ae28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae2c:	ed2d 8b02 	vpush	{d8}
 800ae30:	b09b      	sub	sp, #108	; 0x6c
 800ae32:	4604      	mov	r4, r0
 800ae34:	9213      	str	r2, [sp, #76]	; 0x4c
 800ae36:	2200      	movs	r2, #0
 800ae38:	9216      	str	r2, [sp, #88]	; 0x58
 800ae3a:	460d      	mov	r5, r1
 800ae3c:	f04f 0800 	mov.w	r8, #0
 800ae40:	f04f 0900 	mov.w	r9, #0
 800ae44:	460a      	mov	r2, r1
 800ae46:	9215      	str	r2, [sp, #84]	; 0x54
 800ae48:	7811      	ldrb	r1, [r2, #0]
 800ae4a:	292b      	cmp	r1, #43	; 0x2b
 800ae4c:	d04c      	beq.n	800aee8 <_strtod_l+0xc0>
 800ae4e:	d83a      	bhi.n	800aec6 <_strtod_l+0x9e>
 800ae50:	290d      	cmp	r1, #13
 800ae52:	d834      	bhi.n	800aebe <_strtod_l+0x96>
 800ae54:	2908      	cmp	r1, #8
 800ae56:	d834      	bhi.n	800aec2 <_strtod_l+0x9a>
 800ae58:	2900      	cmp	r1, #0
 800ae5a:	d03d      	beq.n	800aed8 <_strtod_l+0xb0>
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	920a      	str	r2, [sp, #40]	; 0x28
 800ae60:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800ae62:	7832      	ldrb	r2, [r6, #0]
 800ae64:	2a30      	cmp	r2, #48	; 0x30
 800ae66:	f040 80b4 	bne.w	800afd2 <_strtod_l+0x1aa>
 800ae6a:	7872      	ldrb	r2, [r6, #1]
 800ae6c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800ae70:	2a58      	cmp	r2, #88	; 0x58
 800ae72:	d170      	bne.n	800af56 <_strtod_l+0x12e>
 800ae74:	9302      	str	r3, [sp, #8]
 800ae76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae78:	9301      	str	r3, [sp, #4]
 800ae7a:	ab16      	add	r3, sp, #88	; 0x58
 800ae7c:	9300      	str	r3, [sp, #0]
 800ae7e:	4a8e      	ldr	r2, [pc, #568]	; (800b0b8 <_strtod_l+0x290>)
 800ae80:	ab17      	add	r3, sp, #92	; 0x5c
 800ae82:	a915      	add	r1, sp, #84	; 0x54
 800ae84:	4620      	mov	r0, r4
 800ae86:	f001 ff73 	bl	800cd70 <__gethex>
 800ae8a:	f010 070f 	ands.w	r7, r0, #15
 800ae8e:	4605      	mov	r5, r0
 800ae90:	d005      	beq.n	800ae9e <_strtod_l+0x76>
 800ae92:	2f06      	cmp	r7, #6
 800ae94:	d12a      	bne.n	800aeec <_strtod_l+0xc4>
 800ae96:	3601      	adds	r6, #1
 800ae98:	2300      	movs	r3, #0
 800ae9a:	9615      	str	r6, [sp, #84]	; 0x54
 800ae9c:	930a      	str	r3, [sp, #40]	; 0x28
 800ae9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	f040 857f 	bne.w	800b9a4 <_strtod_l+0xb7c>
 800aea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aea8:	b1db      	cbz	r3, 800aee2 <_strtod_l+0xba>
 800aeaa:	4642      	mov	r2, r8
 800aeac:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800aeb0:	ec43 2b10 	vmov	d0, r2, r3
 800aeb4:	b01b      	add	sp, #108	; 0x6c
 800aeb6:	ecbd 8b02 	vpop	{d8}
 800aeba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aebe:	2920      	cmp	r1, #32
 800aec0:	d1cc      	bne.n	800ae5c <_strtod_l+0x34>
 800aec2:	3201      	adds	r2, #1
 800aec4:	e7bf      	b.n	800ae46 <_strtod_l+0x1e>
 800aec6:	292d      	cmp	r1, #45	; 0x2d
 800aec8:	d1c8      	bne.n	800ae5c <_strtod_l+0x34>
 800aeca:	2101      	movs	r1, #1
 800aecc:	910a      	str	r1, [sp, #40]	; 0x28
 800aece:	1c51      	adds	r1, r2, #1
 800aed0:	9115      	str	r1, [sp, #84]	; 0x54
 800aed2:	7852      	ldrb	r2, [r2, #1]
 800aed4:	2a00      	cmp	r2, #0
 800aed6:	d1c3      	bne.n	800ae60 <_strtod_l+0x38>
 800aed8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aeda:	9515      	str	r5, [sp, #84]	; 0x54
 800aedc:	2b00      	cmp	r3, #0
 800aede:	f040 855f 	bne.w	800b9a0 <_strtod_l+0xb78>
 800aee2:	4642      	mov	r2, r8
 800aee4:	464b      	mov	r3, r9
 800aee6:	e7e3      	b.n	800aeb0 <_strtod_l+0x88>
 800aee8:	2100      	movs	r1, #0
 800aeea:	e7ef      	b.n	800aecc <_strtod_l+0xa4>
 800aeec:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800aeee:	b13a      	cbz	r2, 800af00 <_strtod_l+0xd8>
 800aef0:	2135      	movs	r1, #53	; 0x35
 800aef2:	a818      	add	r0, sp, #96	; 0x60
 800aef4:	f7ff ff2f 	bl	800ad56 <__copybits>
 800aef8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800aefa:	4620      	mov	r0, r4
 800aefc:	f7ff fb02 	bl	800a504 <_Bfree>
 800af00:	3f01      	subs	r7, #1
 800af02:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800af04:	2f04      	cmp	r7, #4
 800af06:	d806      	bhi.n	800af16 <_strtod_l+0xee>
 800af08:	e8df f007 	tbb	[pc, r7]
 800af0c:	201d0314 	.word	0x201d0314
 800af10:	14          	.byte	0x14
 800af11:	00          	.byte	0x00
 800af12:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800af16:	05e9      	lsls	r1, r5, #23
 800af18:	bf48      	it	mi
 800af1a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800af1e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800af22:	0d1b      	lsrs	r3, r3, #20
 800af24:	051b      	lsls	r3, r3, #20
 800af26:	2b00      	cmp	r3, #0
 800af28:	d1b9      	bne.n	800ae9e <_strtod_l+0x76>
 800af2a:	f7fe fb83 	bl	8009634 <__errno>
 800af2e:	2322      	movs	r3, #34	; 0x22
 800af30:	6003      	str	r3, [r0, #0]
 800af32:	e7b4      	b.n	800ae9e <_strtod_l+0x76>
 800af34:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800af38:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800af3c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800af40:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800af44:	e7e7      	b.n	800af16 <_strtod_l+0xee>
 800af46:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b0c0 <_strtod_l+0x298>
 800af4a:	e7e4      	b.n	800af16 <_strtod_l+0xee>
 800af4c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800af50:	f04f 38ff 	mov.w	r8, #4294967295
 800af54:	e7df      	b.n	800af16 <_strtod_l+0xee>
 800af56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af58:	1c5a      	adds	r2, r3, #1
 800af5a:	9215      	str	r2, [sp, #84]	; 0x54
 800af5c:	785b      	ldrb	r3, [r3, #1]
 800af5e:	2b30      	cmp	r3, #48	; 0x30
 800af60:	d0f9      	beq.n	800af56 <_strtod_l+0x12e>
 800af62:	2b00      	cmp	r3, #0
 800af64:	d09b      	beq.n	800ae9e <_strtod_l+0x76>
 800af66:	2301      	movs	r3, #1
 800af68:	f04f 0a00 	mov.w	sl, #0
 800af6c:	9304      	str	r3, [sp, #16]
 800af6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af70:	930b      	str	r3, [sp, #44]	; 0x2c
 800af72:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800af76:	46d3      	mov	fp, sl
 800af78:	220a      	movs	r2, #10
 800af7a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800af7c:	7806      	ldrb	r6, [r0, #0]
 800af7e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800af82:	b2d9      	uxtb	r1, r3
 800af84:	2909      	cmp	r1, #9
 800af86:	d926      	bls.n	800afd6 <_strtod_l+0x1ae>
 800af88:	494c      	ldr	r1, [pc, #304]	; (800b0bc <_strtod_l+0x294>)
 800af8a:	2201      	movs	r2, #1
 800af8c:	f001 fe52 	bl	800cc34 <strncmp>
 800af90:	2800      	cmp	r0, #0
 800af92:	d030      	beq.n	800aff6 <_strtod_l+0x1ce>
 800af94:	2000      	movs	r0, #0
 800af96:	4632      	mov	r2, r6
 800af98:	9005      	str	r0, [sp, #20]
 800af9a:	465e      	mov	r6, fp
 800af9c:	4603      	mov	r3, r0
 800af9e:	2a65      	cmp	r2, #101	; 0x65
 800afa0:	d001      	beq.n	800afa6 <_strtod_l+0x17e>
 800afa2:	2a45      	cmp	r2, #69	; 0x45
 800afa4:	d113      	bne.n	800afce <_strtod_l+0x1a6>
 800afa6:	b91e      	cbnz	r6, 800afb0 <_strtod_l+0x188>
 800afa8:	9a04      	ldr	r2, [sp, #16]
 800afaa:	4302      	orrs	r2, r0
 800afac:	d094      	beq.n	800aed8 <_strtod_l+0xb0>
 800afae:	2600      	movs	r6, #0
 800afb0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800afb2:	1c6a      	adds	r2, r5, #1
 800afb4:	9215      	str	r2, [sp, #84]	; 0x54
 800afb6:	786a      	ldrb	r2, [r5, #1]
 800afb8:	2a2b      	cmp	r2, #43	; 0x2b
 800afba:	d074      	beq.n	800b0a6 <_strtod_l+0x27e>
 800afbc:	2a2d      	cmp	r2, #45	; 0x2d
 800afbe:	d078      	beq.n	800b0b2 <_strtod_l+0x28a>
 800afc0:	f04f 0c00 	mov.w	ip, #0
 800afc4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800afc8:	2909      	cmp	r1, #9
 800afca:	d97f      	bls.n	800b0cc <_strtod_l+0x2a4>
 800afcc:	9515      	str	r5, [sp, #84]	; 0x54
 800afce:	2700      	movs	r7, #0
 800afd0:	e09e      	b.n	800b110 <_strtod_l+0x2e8>
 800afd2:	2300      	movs	r3, #0
 800afd4:	e7c8      	b.n	800af68 <_strtod_l+0x140>
 800afd6:	f1bb 0f08 	cmp.w	fp, #8
 800afda:	bfd8      	it	le
 800afdc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800afde:	f100 0001 	add.w	r0, r0, #1
 800afe2:	bfda      	itte	le
 800afe4:	fb02 3301 	mlale	r3, r2, r1, r3
 800afe8:	9309      	strle	r3, [sp, #36]	; 0x24
 800afea:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800afee:	f10b 0b01 	add.w	fp, fp, #1
 800aff2:	9015      	str	r0, [sp, #84]	; 0x54
 800aff4:	e7c1      	b.n	800af7a <_strtod_l+0x152>
 800aff6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aff8:	1c5a      	adds	r2, r3, #1
 800affa:	9215      	str	r2, [sp, #84]	; 0x54
 800affc:	785a      	ldrb	r2, [r3, #1]
 800affe:	f1bb 0f00 	cmp.w	fp, #0
 800b002:	d037      	beq.n	800b074 <_strtod_l+0x24c>
 800b004:	9005      	str	r0, [sp, #20]
 800b006:	465e      	mov	r6, fp
 800b008:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b00c:	2b09      	cmp	r3, #9
 800b00e:	d912      	bls.n	800b036 <_strtod_l+0x20e>
 800b010:	2301      	movs	r3, #1
 800b012:	e7c4      	b.n	800af9e <_strtod_l+0x176>
 800b014:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b016:	1c5a      	adds	r2, r3, #1
 800b018:	9215      	str	r2, [sp, #84]	; 0x54
 800b01a:	785a      	ldrb	r2, [r3, #1]
 800b01c:	3001      	adds	r0, #1
 800b01e:	2a30      	cmp	r2, #48	; 0x30
 800b020:	d0f8      	beq.n	800b014 <_strtod_l+0x1ec>
 800b022:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b026:	2b08      	cmp	r3, #8
 800b028:	f200 84c1 	bhi.w	800b9ae <_strtod_l+0xb86>
 800b02c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b02e:	9005      	str	r0, [sp, #20]
 800b030:	2000      	movs	r0, #0
 800b032:	930b      	str	r3, [sp, #44]	; 0x2c
 800b034:	4606      	mov	r6, r0
 800b036:	3a30      	subs	r2, #48	; 0x30
 800b038:	f100 0301 	add.w	r3, r0, #1
 800b03c:	d014      	beq.n	800b068 <_strtod_l+0x240>
 800b03e:	9905      	ldr	r1, [sp, #20]
 800b040:	4419      	add	r1, r3
 800b042:	9105      	str	r1, [sp, #20]
 800b044:	4633      	mov	r3, r6
 800b046:	eb00 0c06 	add.w	ip, r0, r6
 800b04a:	210a      	movs	r1, #10
 800b04c:	4563      	cmp	r3, ip
 800b04e:	d113      	bne.n	800b078 <_strtod_l+0x250>
 800b050:	1833      	adds	r3, r6, r0
 800b052:	2b08      	cmp	r3, #8
 800b054:	f106 0601 	add.w	r6, r6, #1
 800b058:	4406      	add	r6, r0
 800b05a:	dc1a      	bgt.n	800b092 <_strtod_l+0x26a>
 800b05c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b05e:	230a      	movs	r3, #10
 800b060:	fb03 2301 	mla	r3, r3, r1, r2
 800b064:	9309      	str	r3, [sp, #36]	; 0x24
 800b066:	2300      	movs	r3, #0
 800b068:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b06a:	1c51      	adds	r1, r2, #1
 800b06c:	9115      	str	r1, [sp, #84]	; 0x54
 800b06e:	7852      	ldrb	r2, [r2, #1]
 800b070:	4618      	mov	r0, r3
 800b072:	e7c9      	b.n	800b008 <_strtod_l+0x1e0>
 800b074:	4658      	mov	r0, fp
 800b076:	e7d2      	b.n	800b01e <_strtod_l+0x1f6>
 800b078:	2b08      	cmp	r3, #8
 800b07a:	f103 0301 	add.w	r3, r3, #1
 800b07e:	dc03      	bgt.n	800b088 <_strtod_l+0x260>
 800b080:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b082:	434f      	muls	r7, r1
 800b084:	9709      	str	r7, [sp, #36]	; 0x24
 800b086:	e7e1      	b.n	800b04c <_strtod_l+0x224>
 800b088:	2b10      	cmp	r3, #16
 800b08a:	bfd8      	it	le
 800b08c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800b090:	e7dc      	b.n	800b04c <_strtod_l+0x224>
 800b092:	2e10      	cmp	r6, #16
 800b094:	bfdc      	itt	le
 800b096:	230a      	movle	r3, #10
 800b098:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800b09c:	e7e3      	b.n	800b066 <_strtod_l+0x23e>
 800b09e:	2300      	movs	r3, #0
 800b0a0:	9305      	str	r3, [sp, #20]
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	e780      	b.n	800afa8 <_strtod_l+0x180>
 800b0a6:	f04f 0c00 	mov.w	ip, #0
 800b0aa:	1caa      	adds	r2, r5, #2
 800b0ac:	9215      	str	r2, [sp, #84]	; 0x54
 800b0ae:	78aa      	ldrb	r2, [r5, #2]
 800b0b0:	e788      	b.n	800afc4 <_strtod_l+0x19c>
 800b0b2:	f04f 0c01 	mov.w	ip, #1
 800b0b6:	e7f8      	b.n	800b0aa <_strtod_l+0x282>
 800b0b8:	0800df98 	.word	0x0800df98
 800b0bc:	0800df94 	.word	0x0800df94
 800b0c0:	7ff00000 	.word	0x7ff00000
 800b0c4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b0c6:	1c51      	adds	r1, r2, #1
 800b0c8:	9115      	str	r1, [sp, #84]	; 0x54
 800b0ca:	7852      	ldrb	r2, [r2, #1]
 800b0cc:	2a30      	cmp	r2, #48	; 0x30
 800b0ce:	d0f9      	beq.n	800b0c4 <_strtod_l+0x29c>
 800b0d0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b0d4:	2908      	cmp	r1, #8
 800b0d6:	f63f af7a 	bhi.w	800afce <_strtod_l+0x1a6>
 800b0da:	3a30      	subs	r2, #48	; 0x30
 800b0dc:	9208      	str	r2, [sp, #32]
 800b0de:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b0e0:	920c      	str	r2, [sp, #48]	; 0x30
 800b0e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b0e4:	1c57      	adds	r7, r2, #1
 800b0e6:	9715      	str	r7, [sp, #84]	; 0x54
 800b0e8:	7852      	ldrb	r2, [r2, #1]
 800b0ea:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b0ee:	f1be 0f09 	cmp.w	lr, #9
 800b0f2:	d938      	bls.n	800b166 <_strtod_l+0x33e>
 800b0f4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b0f6:	1a7f      	subs	r7, r7, r1
 800b0f8:	2f08      	cmp	r7, #8
 800b0fa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b0fe:	dc03      	bgt.n	800b108 <_strtod_l+0x2e0>
 800b100:	9908      	ldr	r1, [sp, #32]
 800b102:	428f      	cmp	r7, r1
 800b104:	bfa8      	it	ge
 800b106:	460f      	movge	r7, r1
 800b108:	f1bc 0f00 	cmp.w	ip, #0
 800b10c:	d000      	beq.n	800b110 <_strtod_l+0x2e8>
 800b10e:	427f      	negs	r7, r7
 800b110:	2e00      	cmp	r6, #0
 800b112:	d14f      	bne.n	800b1b4 <_strtod_l+0x38c>
 800b114:	9904      	ldr	r1, [sp, #16]
 800b116:	4301      	orrs	r1, r0
 800b118:	f47f aec1 	bne.w	800ae9e <_strtod_l+0x76>
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	f47f aedb 	bne.w	800aed8 <_strtod_l+0xb0>
 800b122:	2a69      	cmp	r2, #105	; 0x69
 800b124:	d029      	beq.n	800b17a <_strtod_l+0x352>
 800b126:	dc26      	bgt.n	800b176 <_strtod_l+0x34e>
 800b128:	2a49      	cmp	r2, #73	; 0x49
 800b12a:	d026      	beq.n	800b17a <_strtod_l+0x352>
 800b12c:	2a4e      	cmp	r2, #78	; 0x4e
 800b12e:	f47f aed3 	bne.w	800aed8 <_strtod_l+0xb0>
 800b132:	499b      	ldr	r1, [pc, #620]	; (800b3a0 <_strtod_l+0x578>)
 800b134:	a815      	add	r0, sp, #84	; 0x54
 800b136:	f002 f85b 	bl	800d1f0 <__match>
 800b13a:	2800      	cmp	r0, #0
 800b13c:	f43f aecc 	beq.w	800aed8 <_strtod_l+0xb0>
 800b140:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b142:	781b      	ldrb	r3, [r3, #0]
 800b144:	2b28      	cmp	r3, #40	; 0x28
 800b146:	d12f      	bne.n	800b1a8 <_strtod_l+0x380>
 800b148:	4996      	ldr	r1, [pc, #600]	; (800b3a4 <_strtod_l+0x57c>)
 800b14a:	aa18      	add	r2, sp, #96	; 0x60
 800b14c:	a815      	add	r0, sp, #84	; 0x54
 800b14e:	f002 f863 	bl	800d218 <__hexnan>
 800b152:	2805      	cmp	r0, #5
 800b154:	d128      	bne.n	800b1a8 <_strtod_l+0x380>
 800b156:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b158:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b15c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800b160:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800b164:	e69b      	b.n	800ae9e <_strtod_l+0x76>
 800b166:	9f08      	ldr	r7, [sp, #32]
 800b168:	210a      	movs	r1, #10
 800b16a:	fb01 2107 	mla	r1, r1, r7, r2
 800b16e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800b172:	9208      	str	r2, [sp, #32]
 800b174:	e7b5      	b.n	800b0e2 <_strtod_l+0x2ba>
 800b176:	2a6e      	cmp	r2, #110	; 0x6e
 800b178:	e7d9      	b.n	800b12e <_strtod_l+0x306>
 800b17a:	498b      	ldr	r1, [pc, #556]	; (800b3a8 <_strtod_l+0x580>)
 800b17c:	a815      	add	r0, sp, #84	; 0x54
 800b17e:	f002 f837 	bl	800d1f0 <__match>
 800b182:	2800      	cmp	r0, #0
 800b184:	f43f aea8 	beq.w	800aed8 <_strtod_l+0xb0>
 800b188:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b18a:	4988      	ldr	r1, [pc, #544]	; (800b3ac <_strtod_l+0x584>)
 800b18c:	3b01      	subs	r3, #1
 800b18e:	a815      	add	r0, sp, #84	; 0x54
 800b190:	9315      	str	r3, [sp, #84]	; 0x54
 800b192:	f002 f82d 	bl	800d1f0 <__match>
 800b196:	b910      	cbnz	r0, 800b19e <_strtod_l+0x376>
 800b198:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b19a:	3301      	adds	r3, #1
 800b19c:	9315      	str	r3, [sp, #84]	; 0x54
 800b19e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800b3bc <_strtod_l+0x594>
 800b1a2:	f04f 0800 	mov.w	r8, #0
 800b1a6:	e67a      	b.n	800ae9e <_strtod_l+0x76>
 800b1a8:	4881      	ldr	r0, [pc, #516]	; (800b3b0 <_strtod_l+0x588>)
 800b1aa:	f001 fd55 	bl	800cc58 <nan>
 800b1ae:	ec59 8b10 	vmov	r8, r9, d0
 800b1b2:	e674      	b.n	800ae9e <_strtod_l+0x76>
 800b1b4:	9b05      	ldr	r3, [sp, #20]
 800b1b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1b8:	1afb      	subs	r3, r7, r3
 800b1ba:	f1bb 0f00 	cmp.w	fp, #0
 800b1be:	bf08      	it	eq
 800b1c0:	46b3      	moveq	fp, r6
 800b1c2:	2e10      	cmp	r6, #16
 800b1c4:	9308      	str	r3, [sp, #32]
 800b1c6:	4635      	mov	r5, r6
 800b1c8:	bfa8      	it	ge
 800b1ca:	2510      	movge	r5, #16
 800b1cc:	f7f5 f99a 	bl	8000504 <__aeabi_ui2d>
 800b1d0:	2e09      	cmp	r6, #9
 800b1d2:	4680      	mov	r8, r0
 800b1d4:	4689      	mov	r9, r1
 800b1d6:	dd13      	ble.n	800b200 <_strtod_l+0x3d8>
 800b1d8:	4b76      	ldr	r3, [pc, #472]	; (800b3b4 <_strtod_l+0x58c>)
 800b1da:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b1de:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b1e2:	f7f5 fa09 	bl	80005f8 <__aeabi_dmul>
 800b1e6:	4680      	mov	r8, r0
 800b1e8:	4650      	mov	r0, sl
 800b1ea:	4689      	mov	r9, r1
 800b1ec:	f7f5 f98a 	bl	8000504 <__aeabi_ui2d>
 800b1f0:	4602      	mov	r2, r0
 800b1f2:	460b      	mov	r3, r1
 800b1f4:	4640      	mov	r0, r8
 800b1f6:	4649      	mov	r1, r9
 800b1f8:	f7f5 f848 	bl	800028c <__adddf3>
 800b1fc:	4680      	mov	r8, r0
 800b1fe:	4689      	mov	r9, r1
 800b200:	2e0f      	cmp	r6, #15
 800b202:	dc38      	bgt.n	800b276 <_strtod_l+0x44e>
 800b204:	9b08      	ldr	r3, [sp, #32]
 800b206:	2b00      	cmp	r3, #0
 800b208:	f43f ae49 	beq.w	800ae9e <_strtod_l+0x76>
 800b20c:	dd24      	ble.n	800b258 <_strtod_l+0x430>
 800b20e:	2b16      	cmp	r3, #22
 800b210:	dc0b      	bgt.n	800b22a <_strtod_l+0x402>
 800b212:	4968      	ldr	r1, [pc, #416]	; (800b3b4 <_strtod_l+0x58c>)
 800b214:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b218:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b21c:	4642      	mov	r2, r8
 800b21e:	464b      	mov	r3, r9
 800b220:	f7f5 f9ea 	bl	80005f8 <__aeabi_dmul>
 800b224:	4680      	mov	r8, r0
 800b226:	4689      	mov	r9, r1
 800b228:	e639      	b.n	800ae9e <_strtod_l+0x76>
 800b22a:	9a08      	ldr	r2, [sp, #32]
 800b22c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800b230:	4293      	cmp	r3, r2
 800b232:	db20      	blt.n	800b276 <_strtod_l+0x44e>
 800b234:	4c5f      	ldr	r4, [pc, #380]	; (800b3b4 <_strtod_l+0x58c>)
 800b236:	f1c6 060f 	rsb	r6, r6, #15
 800b23a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800b23e:	4642      	mov	r2, r8
 800b240:	464b      	mov	r3, r9
 800b242:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b246:	f7f5 f9d7 	bl	80005f8 <__aeabi_dmul>
 800b24a:	9b08      	ldr	r3, [sp, #32]
 800b24c:	1b9e      	subs	r6, r3, r6
 800b24e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800b252:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b256:	e7e3      	b.n	800b220 <_strtod_l+0x3f8>
 800b258:	9b08      	ldr	r3, [sp, #32]
 800b25a:	3316      	adds	r3, #22
 800b25c:	db0b      	blt.n	800b276 <_strtod_l+0x44e>
 800b25e:	9b05      	ldr	r3, [sp, #20]
 800b260:	1bdf      	subs	r7, r3, r7
 800b262:	4b54      	ldr	r3, [pc, #336]	; (800b3b4 <_strtod_l+0x58c>)
 800b264:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b268:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b26c:	4640      	mov	r0, r8
 800b26e:	4649      	mov	r1, r9
 800b270:	f7f5 faec 	bl	800084c <__aeabi_ddiv>
 800b274:	e7d6      	b.n	800b224 <_strtod_l+0x3fc>
 800b276:	9b08      	ldr	r3, [sp, #32]
 800b278:	1b75      	subs	r5, r6, r5
 800b27a:	441d      	add	r5, r3
 800b27c:	2d00      	cmp	r5, #0
 800b27e:	dd70      	ble.n	800b362 <_strtod_l+0x53a>
 800b280:	f015 030f 	ands.w	r3, r5, #15
 800b284:	d00a      	beq.n	800b29c <_strtod_l+0x474>
 800b286:	494b      	ldr	r1, [pc, #300]	; (800b3b4 <_strtod_l+0x58c>)
 800b288:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b28c:	4642      	mov	r2, r8
 800b28e:	464b      	mov	r3, r9
 800b290:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b294:	f7f5 f9b0 	bl	80005f8 <__aeabi_dmul>
 800b298:	4680      	mov	r8, r0
 800b29a:	4689      	mov	r9, r1
 800b29c:	f035 050f 	bics.w	r5, r5, #15
 800b2a0:	d04d      	beq.n	800b33e <_strtod_l+0x516>
 800b2a2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800b2a6:	dd22      	ble.n	800b2ee <_strtod_l+0x4c6>
 800b2a8:	2500      	movs	r5, #0
 800b2aa:	46ab      	mov	fp, r5
 800b2ac:	9509      	str	r5, [sp, #36]	; 0x24
 800b2ae:	9505      	str	r5, [sp, #20]
 800b2b0:	2322      	movs	r3, #34	; 0x22
 800b2b2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800b3bc <_strtod_l+0x594>
 800b2b6:	6023      	str	r3, [r4, #0]
 800b2b8:	f04f 0800 	mov.w	r8, #0
 800b2bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	f43f aded 	beq.w	800ae9e <_strtod_l+0x76>
 800b2c4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b2c6:	4620      	mov	r0, r4
 800b2c8:	f7ff f91c 	bl	800a504 <_Bfree>
 800b2cc:	9905      	ldr	r1, [sp, #20]
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	f7ff f918 	bl	800a504 <_Bfree>
 800b2d4:	4659      	mov	r1, fp
 800b2d6:	4620      	mov	r0, r4
 800b2d8:	f7ff f914 	bl	800a504 <_Bfree>
 800b2dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b2de:	4620      	mov	r0, r4
 800b2e0:	f7ff f910 	bl	800a504 <_Bfree>
 800b2e4:	4629      	mov	r1, r5
 800b2e6:	4620      	mov	r0, r4
 800b2e8:	f7ff f90c 	bl	800a504 <_Bfree>
 800b2ec:	e5d7      	b.n	800ae9e <_strtod_l+0x76>
 800b2ee:	4b32      	ldr	r3, [pc, #200]	; (800b3b8 <_strtod_l+0x590>)
 800b2f0:	9304      	str	r3, [sp, #16]
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	112d      	asrs	r5, r5, #4
 800b2f6:	4640      	mov	r0, r8
 800b2f8:	4649      	mov	r1, r9
 800b2fa:	469a      	mov	sl, r3
 800b2fc:	2d01      	cmp	r5, #1
 800b2fe:	dc21      	bgt.n	800b344 <_strtod_l+0x51c>
 800b300:	b10b      	cbz	r3, 800b306 <_strtod_l+0x4de>
 800b302:	4680      	mov	r8, r0
 800b304:	4689      	mov	r9, r1
 800b306:	492c      	ldr	r1, [pc, #176]	; (800b3b8 <_strtod_l+0x590>)
 800b308:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b30c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b310:	4642      	mov	r2, r8
 800b312:	464b      	mov	r3, r9
 800b314:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b318:	f7f5 f96e 	bl	80005f8 <__aeabi_dmul>
 800b31c:	4b27      	ldr	r3, [pc, #156]	; (800b3bc <_strtod_l+0x594>)
 800b31e:	460a      	mov	r2, r1
 800b320:	400b      	ands	r3, r1
 800b322:	4927      	ldr	r1, [pc, #156]	; (800b3c0 <_strtod_l+0x598>)
 800b324:	428b      	cmp	r3, r1
 800b326:	4680      	mov	r8, r0
 800b328:	d8be      	bhi.n	800b2a8 <_strtod_l+0x480>
 800b32a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b32e:	428b      	cmp	r3, r1
 800b330:	bf86      	itte	hi
 800b332:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800b3c4 <_strtod_l+0x59c>
 800b336:	f04f 38ff 	movhi.w	r8, #4294967295
 800b33a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800b33e:	2300      	movs	r3, #0
 800b340:	9304      	str	r3, [sp, #16]
 800b342:	e07b      	b.n	800b43c <_strtod_l+0x614>
 800b344:	07ea      	lsls	r2, r5, #31
 800b346:	d505      	bpl.n	800b354 <_strtod_l+0x52c>
 800b348:	9b04      	ldr	r3, [sp, #16]
 800b34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b34e:	f7f5 f953 	bl	80005f8 <__aeabi_dmul>
 800b352:	2301      	movs	r3, #1
 800b354:	9a04      	ldr	r2, [sp, #16]
 800b356:	3208      	adds	r2, #8
 800b358:	f10a 0a01 	add.w	sl, sl, #1
 800b35c:	106d      	asrs	r5, r5, #1
 800b35e:	9204      	str	r2, [sp, #16]
 800b360:	e7cc      	b.n	800b2fc <_strtod_l+0x4d4>
 800b362:	d0ec      	beq.n	800b33e <_strtod_l+0x516>
 800b364:	426d      	negs	r5, r5
 800b366:	f015 020f 	ands.w	r2, r5, #15
 800b36a:	d00a      	beq.n	800b382 <_strtod_l+0x55a>
 800b36c:	4b11      	ldr	r3, [pc, #68]	; (800b3b4 <_strtod_l+0x58c>)
 800b36e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b372:	4640      	mov	r0, r8
 800b374:	4649      	mov	r1, r9
 800b376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b37a:	f7f5 fa67 	bl	800084c <__aeabi_ddiv>
 800b37e:	4680      	mov	r8, r0
 800b380:	4689      	mov	r9, r1
 800b382:	112d      	asrs	r5, r5, #4
 800b384:	d0db      	beq.n	800b33e <_strtod_l+0x516>
 800b386:	2d1f      	cmp	r5, #31
 800b388:	dd1e      	ble.n	800b3c8 <_strtod_l+0x5a0>
 800b38a:	2500      	movs	r5, #0
 800b38c:	46ab      	mov	fp, r5
 800b38e:	9509      	str	r5, [sp, #36]	; 0x24
 800b390:	9505      	str	r5, [sp, #20]
 800b392:	2322      	movs	r3, #34	; 0x22
 800b394:	f04f 0800 	mov.w	r8, #0
 800b398:	f04f 0900 	mov.w	r9, #0
 800b39c:	6023      	str	r3, [r4, #0]
 800b39e:	e78d      	b.n	800b2bc <_strtod_l+0x494>
 800b3a0:	0800dd45 	.word	0x0800dd45
 800b3a4:	0800dfac 	.word	0x0800dfac
 800b3a8:	0800dd3d 	.word	0x0800dd3d
 800b3ac:	0800ddae 	.word	0x0800ddae
 800b3b0:	0800ddaa 	.word	0x0800ddaa
 800b3b4:	0800dec0 	.word	0x0800dec0
 800b3b8:	0800de98 	.word	0x0800de98
 800b3bc:	7ff00000 	.word	0x7ff00000
 800b3c0:	7ca00000 	.word	0x7ca00000
 800b3c4:	7fefffff 	.word	0x7fefffff
 800b3c8:	f015 0310 	ands.w	r3, r5, #16
 800b3cc:	bf18      	it	ne
 800b3ce:	236a      	movne	r3, #106	; 0x6a
 800b3d0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800b774 <_strtod_l+0x94c>
 800b3d4:	9304      	str	r3, [sp, #16]
 800b3d6:	4640      	mov	r0, r8
 800b3d8:	4649      	mov	r1, r9
 800b3da:	2300      	movs	r3, #0
 800b3dc:	07ea      	lsls	r2, r5, #31
 800b3de:	d504      	bpl.n	800b3ea <_strtod_l+0x5c2>
 800b3e0:	e9da 2300 	ldrd	r2, r3, [sl]
 800b3e4:	f7f5 f908 	bl	80005f8 <__aeabi_dmul>
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	106d      	asrs	r5, r5, #1
 800b3ec:	f10a 0a08 	add.w	sl, sl, #8
 800b3f0:	d1f4      	bne.n	800b3dc <_strtod_l+0x5b4>
 800b3f2:	b10b      	cbz	r3, 800b3f8 <_strtod_l+0x5d0>
 800b3f4:	4680      	mov	r8, r0
 800b3f6:	4689      	mov	r9, r1
 800b3f8:	9b04      	ldr	r3, [sp, #16]
 800b3fa:	b1bb      	cbz	r3, 800b42c <_strtod_l+0x604>
 800b3fc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b400:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b404:	2b00      	cmp	r3, #0
 800b406:	4649      	mov	r1, r9
 800b408:	dd10      	ble.n	800b42c <_strtod_l+0x604>
 800b40a:	2b1f      	cmp	r3, #31
 800b40c:	f340 811e 	ble.w	800b64c <_strtod_l+0x824>
 800b410:	2b34      	cmp	r3, #52	; 0x34
 800b412:	bfde      	ittt	le
 800b414:	f04f 33ff 	movle.w	r3, #4294967295
 800b418:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b41c:	4093      	lslle	r3, r2
 800b41e:	f04f 0800 	mov.w	r8, #0
 800b422:	bfcc      	ite	gt
 800b424:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b428:	ea03 0901 	andle.w	r9, r3, r1
 800b42c:	2200      	movs	r2, #0
 800b42e:	2300      	movs	r3, #0
 800b430:	4640      	mov	r0, r8
 800b432:	4649      	mov	r1, r9
 800b434:	f7f5 fb48 	bl	8000ac8 <__aeabi_dcmpeq>
 800b438:	2800      	cmp	r0, #0
 800b43a:	d1a6      	bne.n	800b38a <_strtod_l+0x562>
 800b43c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b43e:	9300      	str	r3, [sp, #0]
 800b440:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b442:	4633      	mov	r3, r6
 800b444:	465a      	mov	r2, fp
 800b446:	4620      	mov	r0, r4
 800b448:	f7ff f8c4 	bl	800a5d4 <__s2b>
 800b44c:	9009      	str	r0, [sp, #36]	; 0x24
 800b44e:	2800      	cmp	r0, #0
 800b450:	f43f af2a 	beq.w	800b2a8 <_strtod_l+0x480>
 800b454:	9a08      	ldr	r2, [sp, #32]
 800b456:	9b05      	ldr	r3, [sp, #20]
 800b458:	2a00      	cmp	r2, #0
 800b45a:	eba3 0307 	sub.w	r3, r3, r7
 800b45e:	bfa8      	it	ge
 800b460:	2300      	movge	r3, #0
 800b462:	930c      	str	r3, [sp, #48]	; 0x30
 800b464:	2500      	movs	r5, #0
 800b466:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b46a:	9312      	str	r3, [sp, #72]	; 0x48
 800b46c:	46ab      	mov	fp, r5
 800b46e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b470:	4620      	mov	r0, r4
 800b472:	6859      	ldr	r1, [r3, #4]
 800b474:	f7ff f806 	bl	800a484 <_Balloc>
 800b478:	9005      	str	r0, [sp, #20]
 800b47a:	2800      	cmp	r0, #0
 800b47c:	f43f af18 	beq.w	800b2b0 <_strtod_l+0x488>
 800b480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b482:	691a      	ldr	r2, [r3, #16]
 800b484:	3202      	adds	r2, #2
 800b486:	f103 010c 	add.w	r1, r3, #12
 800b48a:	0092      	lsls	r2, r2, #2
 800b48c:	300c      	adds	r0, #12
 800b48e:	f7fe f8fe 	bl	800968e <memcpy>
 800b492:	ec49 8b10 	vmov	d0, r8, r9
 800b496:	aa18      	add	r2, sp, #96	; 0x60
 800b498:	a917      	add	r1, sp, #92	; 0x5c
 800b49a:	4620      	mov	r0, r4
 800b49c:	f7ff fbce 	bl	800ac3c <__d2b>
 800b4a0:	ec49 8b18 	vmov	d8, r8, r9
 800b4a4:	9016      	str	r0, [sp, #88]	; 0x58
 800b4a6:	2800      	cmp	r0, #0
 800b4a8:	f43f af02 	beq.w	800b2b0 <_strtod_l+0x488>
 800b4ac:	2101      	movs	r1, #1
 800b4ae:	4620      	mov	r0, r4
 800b4b0:	f7ff f928 	bl	800a704 <__i2b>
 800b4b4:	4683      	mov	fp, r0
 800b4b6:	2800      	cmp	r0, #0
 800b4b8:	f43f aefa 	beq.w	800b2b0 <_strtod_l+0x488>
 800b4bc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b4be:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b4c0:	2e00      	cmp	r6, #0
 800b4c2:	bfab      	itete	ge
 800b4c4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800b4c6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800b4c8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b4ca:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800b4ce:	bfac      	ite	ge
 800b4d0:	eb06 0a03 	addge.w	sl, r6, r3
 800b4d4:	1b9f      	sublt	r7, r3, r6
 800b4d6:	9b04      	ldr	r3, [sp, #16]
 800b4d8:	1af6      	subs	r6, r6, r3
 800b4da:	4416      	add	r6, r2
 800b4dc:	4ba0      	ldr	r3, [pc, #640]	; (800b760 <_strtod_l+0x938>)
 800b4de:	3e01      	subs	r6, #1
 800b4e0:	429e      	cmp	r6, r3
 800b4e2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b4e6:	f280 80c4 	bge.w	800b672 <_strtod_l+0x84a>
 800b4ea:	1b9b      	subs	r3, r3, r6
 800b4ec:	2b1f      	cmp	r3, #31
 800b4ee:	eba2 0203 	sub.w	r2, r2, r3
 800b4f2:	f04f 0101 	mov.w	r1, #1
 800b4f6:	f300 80b0 	bgt.w	800b65a <_strtod_l+0x832>
 800b4fa:	fa01 f303 	lsl.w	r3, r1, r3
 800b4fe:	930e      	str	r3, [sp, #56]	; 0x38
 800b500:	2300      	movs	r3, #0
 800b502:	930d      	str	r3, [sp, #52]	; 0x34
 800b504:	eb0a 0602 	add.w	r6, sl, r2
 800b508:	9b04      	ldr	r3, [sp, #16]
 800b50a:	45b2      	cmp	sl, r6
 800b50c:	4417      	add	r7, r2
 800b50e:	441f      	add	r7, r3
 800b510:	4653      	mov	r3, sl
 800b512:	bfa8      	it	ge
 800b514:	4633      	movge	r3, r6
 800b516:	42bb      	cmp	r3, r7
 800b518:	bfa8      	it	ge
 800b51a:	463b      	movge	r3, r7
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	bfc2      	ittt	gt
 800b520:	1af6      	subgt	r6, r6, r3
 800b522:	1aff      	subgt	r7, r7, r3
 800b524:	ebaa 0a03 	subgt.w	sl, sl, r3
 800b528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	dd17      	ble.n	800b55e <_strtod_l+0x736>
 800b52e:	4659      	mov	r1, fp
 800b530:	461a      	mov	r2, r3
 800b532:	4620      	mov	r0, r4
 800b534:	f7ff f9a6 	bl	800a884 <__pow5mult>
 800b538:	4683      	mov	fp, r0
 800b53a:	2800      	cmp	r0, #0
 800b53c:	f43f aeb8 	beq.w	800b2b0 <_strtod_l+0x488>
 800b540:	4601      	mov	r1, r0
 800b542:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b544:	4620      	mov	r0, r4
 800b546:	f7ff f8f3 	bl	800a730 <__multiply>
 800b54a:	900b      	str	r0, [sp, #44]	; 0x2c
 800b54c:	2800      	cmp	r0, #0
 800b54e:	f43f aeaf 	beq.w	800b2b0 <_strtod_l+0x488>
 800b552:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b554:	4620      	mov	r0, r4
 800b556:	f7fe ffd5 	bl	800a504 <_Bfree>
 800b55a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b55c:	9316      	str	r3, [sp, #88]	; 0x58
 800b55e:	2e00      	cmp	r6, #0
 800b560:	f300 808c 	bgt.w	800b67c <_strtod_l+0x854>
 800b564:	9b08      	ldr	r3, [sp, #32]
 800b566:	2b00      	cmp	r3, #0
 800b568:	dd08      	ble.n	800b57c <_strtod_l+0x754>
 800b56a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b56c:	9905      	ldr	r1, [sp, #20]
 800b56e:	4620      	mov	r0, r4
 800b570:	f7ff f988 	bl	800a884 <__pow5mult>
 800b574:	9005      	str	r0, [sp, #20]
 800b576:	2800      	cmp	r0, #0
 800b578:	f43f ae9a 	beq.w	800b2b0 <_strtod_l+0x488>
 800b57c:	2f00      	cmp	r7, #0
 800b57e:	dd08      	ble.n	800b592 <_strtod_l+0x76a>
 800b580:	9905      	ldr	r1, [sp, #20]
 800b582:	463a      	mov	r2, r7
 800b584:	4620      	mov	r0, r4
 800b586:	f7ff f9d7 	bl	800a938 <__lshift>
 800b58a:	9005      	str	r0, [sp, #20]
 800b58c:	2800      	cmp	r0, #0
 800b58e:	f43f ae8f 	beq.w	800b2b0 <_strtod_l+0x488>
 800b592:	f1ba 0f00 	cmp.w	sl, #0
 800b596:	dd08      	ble.n	800b5aa <_strtod_l+0x782>
 800b598:	4659      	mov	r1, fp
 800b59a:	4652      	mov	r2, sl
 800b59c:	4620      	mov	r0, r4
 800b59e:	f7ff f9cb 	bl	800a938 <__lshift>
 800b5a2:	4683      	mov	fp, r0
 800b5a4:	2800      	cmp	r0, #0
 800b5a6:	f43f ae83 	beq.w	800b2b0 <_strtod_l+0x488>
 800b5aa:	9a05      	ldr	r2, [sp, #20]
 800b5ac:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b5ae:	4620      	mov	r0, r4
 800b5b0:	f7ff fa4a 	bl	800aa48 <__mdiff>
 800b5b4:	4605      	mov	r5, r0
 800b5b6:	2800      	cmp	r0, #0
 800b5b8:	f43f ae7a 	beq.w	800b2b0 <_strtod_l+0x488>
 800b5bc:	68c3      	ldr	r3, [r0, #12]
 800b5be:	930b      	str	r3, [sp, #44]	; 0x2c
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	60c3      	str	r3, [r0, #12]
 800b5c4:	4659      	mov	r1, fp
 800b5c6:	f7ff fa23 	bl	800aa10 <__mcmp>
 800b5ca:	2800      	cmp	r0, #0
 800b5cc:	da60      	bge.n	800b690 <_strtod_l+0x868>
 800b5ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5d0:	ea53 0308 	orrs.w	r3, r3, r8
 800b5d4:	f040 8084 	bne.w	800b6e0 <_strtod_l+0x8b8>
 800b5d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d17f      	bne.n	800b6e0 <_strtod_l+0x8b8>
 800b5e0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b5e4:	0d1b      	lsrs	r3, r3, #20
 800b5e6:	051b      	lsls	r3, r3, #20
 800b5e8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b5ec:	d978      	bls.n	800b6e0 <_strtod_l+0x8b8>
 800b5ee:	696b      	ldr	r3, [r5, #20]
 800b5f0:	b913      	cbnz	r3, 800b5f8 <_strtod_l+0x7d0>
 800b5f2:	692b      	ldr	r3, [r5, #16]
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	dd73      	ble.n	800b6e0 <_strtod_l+0x8b8>
 800b5f8:	4629      	mov	r1, r5
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	4620      	mov	r0, r4
 800b5fe:	f7ff f99b 	bl	800a938 <__lshift>
 800b602:	4659      	mov	r1, fp
 800b604:	4605      	mov	r5, r0
 800b606:	f7ff fa03 	bl	800aa10 <__mcmp>
 800b60a:	2800      	cmp	r0, #0
 800b60c:	dd68      	ble.n	800b6e0 <_strtod_l+0x8b8>
 800b60e:	9904      	ldr	r1, [sp, #16]
 800b610:	4a54      	ldr	r2, [pc, #336]	; (800b764 <_strtod_l+0x93c>)
 800b612:	464b      	mov	r3, r9
 800b614:	2900      	cmp	r1, #0
 800b616:	f000 8084 	beq.w	800b722 <_strtod_l+0x8fa>
 800b61a:	ea02 0109 	and.w	r1, r2, r9
 800b61e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b622:	dc7e      	bgt.n	800b722 <_strtod_l+0x8fa>
 800b624:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b628:	f77f aeb3 	ble.w	800b392 <_strtod_l+0x56a>
 800b62c:	4b4e      	ldr	r3, [pc, #312]	; (800b768 <_strtod_l+0x940>)
 800b62e:	4640      	mov	r0, r8
 800b630:	4649      	mov	r1, r9
 800b632:	2200      	movs	r2, #0
 800b634:	f7f4 ffe0 	bl	80005f8 <__aeabi_dmul>
 800b638:	4b4a      	ldr	r3, [pc, #296]	; (800b764 <_strtod_l+0x93c>)
 800b63a:	400b      	ands	r3, r1
 800b63c:	4680      	mov	r8, r0
 800b63e:	4689      	mov	r9, r1
 800b640:	2b00      	cmp	r3, #0
 800b642:	f47f ae3f 	bne.w	800b2c4 <_strtod_l+0x49c>
 800b646:	2322      	movs	r3, #34	; 0x22
 800b648:	6023      	str	r3, [r4, #0]
 800b64a:	e63b      	b.n	800b2c4 <_strtod_l+0x49c>
 800b64c:	f04f 32ff 	mov.w	r2, #4294967295
 800b650:	fa02 f303 	lsl.w	r3, r2, r3
 800b654:	ea03 0808 	and.w	r8, r3, r8
 800b658:	e6e8      	b.n	800b42c <_strtod_l+0x604>
 800b65a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b65e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b662:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b666:	36e2      	adds	r6, #226	; 0xe2
 800b668:	fa01 f306 	lsl.w	r3, r1, r6
 800b66c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800b670:	e748      	b.n	800b504 <_strtod_l+0x6dc>
 800b672:	2100      	movs	r1, #0
 800b674:	2301      	movs	r3, #1
 800b676:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800b67a:	e743      	b.n	800b504 <_strtod_l+0x6dc>
 800b67c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b67e:	4632      	mov	r2, r6
 800b680:	4620      	mov	r0, r4
 800b682:	f7ff f959 	bl	800a938 <__lshift>
 800b686:	9016      	str	r0, [sp, #88]	; 0x58
 800b688:	2800      	cmp	r0, #0
 800b68a:	f47f af6b 	bne.w	800b564 <_strtod_l+0x73c>
 800b68e:	e60f      	b.n	800b2b0 <_strtod_l+0x488>
 800b690:	46ca      	mov	sl, r9
 800b692:	d171      	bne.n	800b778 <_strtod_l+0x950>
 800b694:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b696:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b69a:	b352      	cbz	r2, 800b6f2 <_strtod_l+0x8ca>
 800b69c:	4a33      	ldr	r2, [pc, #204]	; (800b76c <_strtod_l+0x944>)
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d12a      	bne.n	800b6f8 <_strtod_l+0x8d0>
 800b6a2:	9b04      	ldr	r3, [sp, #16]
 800b6a4:	4641      	mov	r1, r8
 800b6a6:	b1fb      	cbz	r3, 800b6e8 <_strtod_l+0x8c0>
 800b6a8:	4b2e      	ldr	r3, [pc, #184]	; (800b764 <_strtod_l+0x93c>)
 800b6aa:	ea09 0303 	and.w	r3, r9, r3
 800b6ae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b6b2:	f04f 32ff 	mov.w	r2, #4294967295
 800b6b6:	d81a      	bhi.n	800b6ee <_strtod_l+0x8c6>
 800b6b8:	0d1b      	lsrs	r3, r3, #20
 800b6ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b6be:	fa02 f303 	lsl.w	r3, r2, r3
 800b6c2:	4299      	cmp	r1, r3
 800b6c4:	d118      	bne.n	800b6f8 <_strtod_l+0x8d0>
 800b6c6:	4b2a      	ldr	r3, [pc, #168]	; (800b770 <_strtod_l+0x948>)
 800b6c8:	459a      	cmp	sl, r3
 800b6ca:	d102      	bne.n	800b6d2 <_strtod_l+0x8aa>
 800b6cc:	3101      	adds	r1, #1
 800b6ce:	f43f adef 	beq.w	800b2b0 <_strtod_l+0x488>
 800b6d2:	4b24      	ldr	r3, [pc, #144]	; (800b764 <_strtod_l+0x93c>)
 800b6d4:	ea0a 0303 	and.w	r3, sl, r3
 800b6d8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b6dc:	f04f 0800 	mov.w	r8, #0
 800b6e0:	9b04      	ldr	r3, [sp, #16]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d1a2      	bne.n	800b62c <_strtod_l+0x804>
 800b6e6:	e5ed      	b.n	800b2c4 <_strtod_l+0x49c>
 800b6e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b6ec:	e7e9      	b.n	800b6c2 <_strtod_l+0x89a>
 800b6ee:	4613      	mov	r3, r2
 800b6f0:	e7e7      	b.n	800b6c2 <_strtod_l+0x89a>
 800b6f2:	ea53 0308 	orrs.w	r3, r3, r8
 800b6f6:	d08a      	beq.n	800b60e <_strtod_l+0x7e6>
 800b6f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6fa:	b1e3      	cbz	r3, 800b736 <_strtod_l+0x90e>
 800b6fc:	ea13 0f0a 	tst.w	r3, sl
 800b700:	d0ee      	beq.n	800b6e0 <_strtod_l+0x8b8>
 800b702:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b704:	9a04      	ldr	r2, [sp, #16]
 800b706:	4640      	mov	r0, r8
 800b708:	4649      	mov	r1, r9
 800b70a:	b1c3      	cbz	r3, 800b73e <_strtod_l+0x916>
 800b70c:	f7ff fb6f 	bl	800adee <sulp>
 800b710:	4602      	mov	r2, r0
 800b712:	460b      	mov	r3, r1
 800b714:	ec51 0b18 	vmov	r0, r1, d8
 800b718:	f7f4 fdb8 	bl	800028c <__adddf3>
 800b71c:	4680      	mov	r8, r0
 800b71e:	4689      	mov	r9, r1
 800b720:	e7de      	b.n	800b6e0 <_strtod_l+0x8b8>
 800b722:	4013      	ands	r3, r2
 800b724:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b728:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b72c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b730:	f04f 38ff 	mov.w	r8, #4294967295
 800b734:	e7d4      	b.n	800b6e0 <_strtod_l+0x8b8>
 800b736:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b738:	ea13 0f08 	tst.w	r3, r8
 800b73c:	e7e0      	b.n	800b700 <_strtod_l+0x8d8>
 800b73e:	f7ff fb56 	bl	800adee <sulp>
 800b742:	4602      	mov	r2, r0
 800b744:	460b      	mov	r3, r1
 800b746:	ec51 0b18 	vmov	r0, r1, d8
 800b74a:	f7f4 fd9d 	bl	8000288 <__aeabi_dsub>
 800b74e:	2200      	movs	r2, #0
 800b750:	2300      	movs	r3, #0
 800b752:	4680      	mov	r8, r0
 800b754:	4689      	mov	r9, r1
 800b756:	f7f5 f9b7 	bl	8000ac8 <__aeabi_dcmpeq>
 800b75a:	2800      	cmp	r0, #0
 800b75c:	d0c0      	beq.n	800b6e0 <_strtod_l+0x8b8>
 800b75e:	e618      	b.n	800b392 <_strtod_l+0x56a>
 800b760:	fffffc02 	.word	0xfffffc02
 800b764:	7ff00000 	.word	0x7ff00000
 800b768:	39500000 	.word	0x39500000
 800b76c:	000fffff 	.word	0x000fffff
 800b770:	7fefffff 	.word	0x7fefffff
 800b774:	0800dfc0 	.word	0x0800dfc0
 800b778:	4659      	mov	r1, fp
 800b77a:	4628      	mov	r0, r5
 800b77c:	f7ff fab8 	bl	800acf0 <__ratio>
 800b780:	ec57 6b10 	vmov	r6, r7, d0
 800b784:	ee10 0a10 	vmov	r0, s0
 800b788:	2200      	movs	r2, #0
 800b78a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b78e:	4639      	mov	r1, r7
 800b790:	f7f5 f9ae 	bl	8000af0 <__aeabi_dcmple>
 800b794:	2800      	cmp	r0, #0
 800b796:	d071      	beq.n	800b87c <_strtod_l+0xa54>
 800b798:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d17c      	bne.n	800b898 <_strtod_l+0xa70>
 800b79e:	f1b8 0f00 	cmp.w	r8, #0
 800b7a2:	d15a      	bne.n	800b85a <_strtod_l+0xa32>
 800b7a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d15d      	bne.n	800b868 <_strtod_l+0xa40>
 800b7ac:	4b90      	ldr	r3, [pc, #576]	; (800b9f0 <_strtod_l+0xbc8>)
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	4630      	mov	r0, r6
 800b7b2:	4639      	mov	r1, r7
 800b7b4:	f7f5 f992 	bl	8000adc <__aeabi_dcmplt>
 800b7b8:	2800      	cmp	r0, #0
 800b7ba:	d15c      	bne.n	800b876 <_strtod_l+0xa4e>
 800b7bc:	4630      	mov	r0, r6
 800b7be:	4639      	mov	r1, r7
 800b7c0:	4b8c      	ldr	r3, [pc, #560]	; (800b9f4 <_strtod_l+0xbcc>)
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	f7f4 ff18 	bl	80005f8 <__aeabi_dmul>
 800b7c8:	4606      	mov	r6, r0
 800b7ca:	460f      	mov	r7, r1
 800b7cc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b7d0:	9606      	str	r6, [sp, #24]
 800b7d2:	9307      	str	r3, [sp, #28]
 800b7d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b7d8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b7dc:	4b86      	ldr	r3, [pc, #536]	; (800b9f8 <_strtod_l+0xbd0>)
 800b7de:	ea0a 0303 	and.w	r3, sl, r3
 800b7e2:	930d      	str	r3, [sp, #52]	; 0x34
 800b7e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b7e6:	4b85      	ldr	r3, [pc, #532]	; (800b9fc <_strtod_l+0xbd4>)
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	f040 8090 	bne.w	800b90e <_strtod_l+0xae6>
 800b7ee:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800b7f2:	ec49 8b10 	vmov	d0, r8, r9
 800b7f6:	f7ff f9b1 	bl	800ab5c <__ulp>
 800b7fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b7fe:	ec51 0b10 	vmov	r0, r1, d0
 800b802:	f7f4 fef9 	bl	80005f8 <__aeabi_dmul>
 800b806:	4642      	mov	r2, r8
 800b808:	464b      	mov	r3, r9
 800b80a:	f7f4 fd3f 	bl	800028c <__adddf3>
 800b80e:	460b      	mov	r3, r1
 800b810:	4979      	ldr	r1, [pc, #484]	; (800b9f8 <_strtod_l+0xbd0>)
 800b812:	4a7b      	ldr	r2, [pc, #492]	; (800ba00 <_strtod_l+0xbd8>)
 800b814:	4019      	ands	r1, r3
 800b816:	4291      	cmp	r1, r2
 800b818:	4680      	mov	r8, r0
 800b81a:	d944      	bls.n	800b8a6 <_strtod_l+0xa7e>
 800b81c:	ee18 2a90 	vmov	r2, s17
 800b820:	4b78      	ldr	r3, [pc, #480]	; (800ba04 <_strtod_l+0xbdc>)
 800b822:	429a      	cmp	r2, r3
 800b824:	d104      	bne.n	800b830 <_strtod_l+0xa08>
 800b826:	ee18 3a10 	vmov	r3, s16
 800b82a:	3301      	adds	r3, #1
 800b82c:	f43f ad40 	beq.w	800b2b0 <_strtod_l+0x488>
 800b830:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800ba04 <_strtod_l+0xbdc>
 800b834:	f04f 38ff 	mov.w	r8, #4294967295
 800b838:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b83a:	4620      	mov	r0, r4
 800b83c:	f7fe fe62 	bl	800a504 <_Bfree>
 800b840:	9905      	ldr	r1, [sp, #20]
 800b842:	4620      	mov	r0, r4
 800b844:	f7fe fe5e 	bl	800a504 <_Bfree>
 800b848:	4659      	mov	r1, fp
 800b84a:	4620      	mov	r0, r4
 800b84c:	f7fe fe5a 	bl	800a504 <_Bfree>
 800b850:	4629      	mov	r1, r5
 800b852:	4620      	mov	r0, r4
 800b854:	f7fe fe56 	bl	800a504 <_Bfree>
 800b858:	e609      	b.n	800b46e <_strtod_l+0x646>
 800b85a:	f1b8 0f01 	cmp.w	r8, #1
 800b85e:	d103      	bne.n	800b868 <_strtod_l+0xa40>
 800b860:	f1b9 0f00 	cmp.w	r9, #0
 800b864:	f43f ad95 	beq.w	800b392 <_strtod_l+0x56a>
 800b868:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800b9c0 <_strtod_l+0xb98>
 800b86c:	4f60      	ldr	r7, [pc, #384]	; (800b9f0 <_strtod_l+0xbc8>)
 800b86e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b872:	2600      	movs	r6, #0
 800b874:	e7ae      	b.n	800b7d4 <_strtod_l+0x9ac>
 800b876:	4f5f      	ldr	r7, [pc, #380]	; (800b9f4 <_strtod_l+0xbcc>)
 800b878:	2600      	movs	r6, #0
 800b87a:	e7a7      	b.n	800b7cc <_strtod_l+0x9a4>
 800b87c:	4b5d      	ldr	r3, [pc, #372]	; (800b9f4 <_strtod_l+0xbcc>)
 800b87e:	4630      	mov	r0, r6
 800b880:	4639      	mov	r1, r7
 800b882:	2200      	movs	r2, #0
 800b884:	f7f4 feb8 	bl	80005f8 <__aeabi_dmul>
 800b888:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b88a:	4606      	mov	r6, r0
 800b88c:	460f      	mov	r7, r1
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d09c      	beq.n	800b7cc <_strtod_l+0x9a4>
 800b892:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b896:	e79d      	b.n	800b7d4 <_strtod_l+0x9ac>
 800b898:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800b9c8 <_strtod_l+0xba0>
 800b89c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b8a0:	ec57 6b17 	vmov	r6, r7, d7
 800b8a4:	e796      	b.n	800b7d4 <_strtod_l+0x9ac>
 800b8a6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b8aa:	9b04      	ldr	r3, [sp, #16]
 800b8ac:	46ca      	mov	sl, r9
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d1c2      	bne.n	800b838 <_strtod_l+0xa10>
 800b8b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b8b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b8b8:	0d1b      	lsrs	r3, r3, #20
 800b8ba:	051b      	lsls	r3, r3, #20
 800b8bc:	429a      	cmp	r2, r3
 800b8be:	d1bb      	bne.n	800b838 <_strtod_l+0xa10>
 800b8c0:	4630      	mov	r0, r6
 800b8c2:	4639      	mov	r1, r7
 800b8c4:	f7f5 f9f4 	bl	8000cb0 <__aeabi_d2lz>
 800b8c8:	f7f4 fe68 	bl	800059c <__aeabi_l2d>
 800b8cc:	4602      	mov	r2, r0
 800b8ce:	460b      	mov	r3, r1
 800b8d0:	4630      	mov	r0, r6
 800b8d2:	4639      	mov	r1, r7
 800b8d4:	f7f4 fcd8 	bl	8000288 <__aeabi_dsub>
 800b8d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b8da:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b8de:	ea43 0308 	orr.w	r3, r3, r8
 800b8e2:	4313      	orrs	r3, r2
 800b8e4:	4606      	mov	r6, r0
 800b8e6:	460f      	mov	r7, r1
 800b8e8:	d054      	beq.n	800b994 <_strtod_l+0xb6c>
 800b8ea:	a339      	add	r3, pc, #228	; (adr r3, 800b9d0 <_strtod_l+0xba8>)
 800b8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f0:	f7f5 f8f4 	bl	8000adc <__aeabi_dcmplt>
 800b8f4:	2800      	cmp	r0, #0
 800b8f6:	f47f ace5 	bne.w	800b2c4 <_strtod_l+0x49c>
 800b8fa:	a337      	add	r3, pc, #220	; (adr r3, 800b9d8 <_strtod_l+0xbb0>)
 800b8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b900:	4630      	mov	r0, r6
 800b902:	4639      	mov	r1, r7
 800b904:	f7f5 f908 	bl	8000b18 <__aeabi_dcmpgt>
 800b908:	2800      	cmp	r0, #0
 800b90a:	d095      	beq.n	800b838 <_strtod_l+0xa10>
 800b90c:	e4da      	b.n	800b2c4 <_strtod_l+0x49c>
 800b90e:	9b04      	ldr	r3, [sp, #16]
 800b910:	b333      	cbz	r3, 800b960 <_strtod_l+0xb38>
 800b912:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b914:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b918:	d822      	bhi.n	800b960 <_strtod_l+0xb38>
 800b91a:	a331      	add	r3, pc, #196	; (adr r3, 800b9e0 <_strtod_l+0xbb8>)
 800b91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b920:	4630      	mov	r0, r6
 800b922:	4639      	mov	r1, r7
 800b924:	f7f5 f8e4 	bl	8000af0 <__aeabi_dcmple>
 800b928:	b1a0      	cbz	r0, 800b954 <_strtod_l+0xb2c>
 800b92a:	4639      	mov	r1, r7
 800b92c:	4630      	mov	r0, r6
 800b92e:	f7f5 f93b 	bl	8000ba8 <__aeabi_d2uiz>
 800b932:	2801      	cmp	r0, #1
 800b934:	bf38      	it	cc
 800b936:	2001      	movcc	r0, #1
 800b938:	f7f4 fde4 	bl	8000504 <__aeabi_ui2d>
 800b93c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b93e:	4606      	mov	r6, r0
 800b940:	460f      	mov	r7, r1
 800b942:	bb23      	cbnz	r3, 800b98e <_strtod_l+0xb66>
 800b944:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b948:	9010      	str	r0, [sp, #64]	; 0x40
 800b94a:	9311      	str	r3, [sp, #68]	; 0x44
 800b94c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b950:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b954:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b956:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b958:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b95c:	1a9b      	subs	r3, r3, r2
 800b95e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b960:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b964:	eeb0 0a48 	vmov.f32	s0, s16
 800b968:	eef0 0a68 	vmov.f32	s1, s17
 800b96c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b970:	f7ff f8f4 	bl	800ab5c <__ulp>
 800b974:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b978:	ec53 2b10 	vmov	r2, r3, d0
 800b97c:	f7f4 fe3c 	bl	80005f8 <__aeabi_dmul>
 800b980:	ec53 2b18 	vmov	r2, r3, d8
 800b984:	f7f4 fc82 	bl	800028c <__adddf3>
 800b988:	4680      	mov	r8, r0
 800b98a:	4689      	mov	r9, r1
 800b98c:	e78d      	b.n	800b8aa <_strtod_l+0xa82>
 800b98e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b992:	e7db      	b.n	800b94c <_strtod_l+0xb24>
 800b994:	a314      	add	r3, pc, #80	; (adr r3, 800b9e8 <_strtod_l+0xbc0>)
 800b996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b99a:	f7f5 f89f 	bl	8000adc <__aeabi_dcmplt>
 800b99e:	e7b3      	b.n	800b908 <_strtod_l+0xae0>
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	930a      	str	r3, [sp, #40]	; 0x28
 800b9a4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b9a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b9a8:	6013      	str	r3, [r2, #0]
 800b9aa:	f7ff ba7c 	b.w	800aea6 <_strtod_l+0x7e>
 800b9ae:	2a65      	cmp	r2, #101	; 0x65
 800b9b0:	f43f ab75 	beq.w	800b09e <_strtod_l+0x276>
 800b9b4:	2a45      	cmp	r2, #69	; 0x45
 800b9b6:	f43f ab72 	beq.w	800b09e <_strtod_l+0x276>
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	f7ff bbaa 	b.w	800b114 <_strtod_l+0x2ec>
 800b9c0:	00000000 	.word	0x00000000
 800b9c4:	bff00000 	.word	0xbff00000
 800b9c8:	00000000 	.word	0x00000000
 800b9cc:	3ff00000 	.word	0x3ff00000
 800b9d0:	94a03595 	.word	0x94a03595
 800b9d4:	3fdfffff 	.word	0x3fdfffff
 800b9d8:	35afe535 	.word	0x35afe535
 800b9dc:	3fe00000 	.word	0x3fe00000
 800b9e0:	ffc00000 	.word	0xffc00000
 800b9e4:	41dfffff 	.word	0x41dfffff
 800b9e8:	94a03595 	.word	0x94a03595
 800b9ec:	3fcfffff 	.word	0x3fcfffff
 800b9f0:	3ff00000 	.word	0x3ff00000
 800b9f4:	3fe00000 	.word	0x3fe00000
 800b9f8:	7ff00000 	.word	0x7ff00000
 800b9fc:	7fe00000 	.word	0x7fe00000
 800ba00:	7c9fffff 	.word	0x7c9fffff
 800ba04:	7fefffff 	.word	0x7fefffff

0800ba08 <_strtod_r>:
 800ba08:	4b01      	ldr	r3, [pc, #4]	; (800ba10 <_strtod_r+0x8>)
 800ba0a:	f7ff ba0d 	b.w	800ae28 <_strtod_l>
 800ba0e:	bf00      	nop
 800ba10:	2000073c 	.word	0x2000073c

0800ba14 <_strtol_l.constprop.0>:
 800ba14:	2b01      	cmp	r3, #1
 800ba16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba1a:	d001      	beq.n	800ba20 <_strtol_l.constprop.0+0xc>
 800ba1c:	2b24      	cmp	r3, #36	; 0x24
 800ba1e:	d906      	bls.n	800ba2e <_strtol_l.constprop.0+0x1a>
 800ba20:	f7fd fe08 	bl	8009634 <__errno>
 800ba24:	2316      	movs	r3, #22
 800ba26:	6003      	str	r3, [r0, #0]
 800ba28:	2000      	movs	r0, #0
 800ba2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba2e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bb14 <_strtol_l.constprop.0+0x100>
 800ba32:	460d      	mov	r5, r1
 800ba34:	462e      	mov	r6, r5
 800ba36:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ba3a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800ba3e:	f017 0708 	ands.w	r7, r7, #8
 800ba42:	d1f7      	bne.n	800ba34 <_strtol_l.constprop.0+0x20>
 800ba44:	2c2d      	cmp	r4, #45	; 0x2d
 800ba46:	d132      	bne.n	800baae <_strtol_l.constprop.0+0x9a>
 800ba48:	782c      	ldrb	r4, [r5, #0]
 800ba4a:	2701      	movs	r7, #1
 800ba4c:	1cb5      	adds	r5, r6, #2
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d05b      	beq.n	800bb0a <_strtol_l.constprop.0+0xf6>
 800ba52:	2b10      	cmp	r3, #16
 800ba54:	d109      	bne.n	800ba6a <_strtol_l.constprop.0+0x56>
 800ba56:	2c30      	cmp	r4, #48	; 0x30
 800ba58:	d107      	bne.n	800ba6a <_strtol_l.constprop.0+0x56>
 800ba5a:	782c      	ldrb	r4, [r5, #0]
 800ba5c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ba60:	2c58      	cmp	r4, #88	; 0x58
 800ba62:	d14d      	bne.n	800bb00 <_strtol_l.constprop.0+0xec>
 800ba64:	786c      	ldrb	r4, [r5, #1]
 800ba66:	2310      	movs	r3, #16
 800ba68:	3502      	adds	r5, #2
 800ba6a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ba6e:	f108 38ff 	add.w	r8, r8, #4294967295
 800ba72:	f04f 0e00 	mov.w	lr, #0
 800ba76:	fbb8 f9f3 	udiv	r9, r8, r3
 800ba7a:	4676      	mov	r6, lr
 800ba7c:	fb03 8a19 	mls	sl, r3, r9, r8
 800ba80:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ba84:	f1bc 0f09 	cmp.w	ip, #9
 800ba88:	d816      	bhi.n	800bab8 <_strtol_l.constprop.0+0xa4>
 800ba8a:	4664      	mov	r4, ip
 800ba8c:	42a3      	cmp	r3, r4
 800ba8e:	dd24      	ble.n	800bada <_strtol_l.constprop.0+0xc6>
 800ba90:	f1be 3fff 	cmp.w	lr, #4294967295
 800ba94:	d008      	beq.n	800baa8 <_strtol_l.constprop.0+0x94>
 800ba96:	45b1      	cmp	r9, r6
 800ba98:	d31c      	bcc.n	800bad4 <_strtol_l.constprop.0+0xc0>
 800ba9a:	d101      	bne.n	800baa0 <_strtol_l.constprop.0+0x8c>
 800ba9c:	45a2      	cmp	sl, r4
 800ba9e:	db19      	blt.n	800bad4 <_strtol_l.constprop.0+0xc0>
 800baa0:	fb06 4603 	mla	r6, r6, r3, r4
 800baa4:	f04f 0e01 	mov.w	lr, #1
 800baa8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800baac:	e7e8      	b.n	800ba80 <_strtol_l.constprop.0+0x6c>
 800baae:	2c2b      	cmp	r4, #43	; 0x2b
 800bab0:	bf04      	itt	eq
 800bab2:	782c      	ldrbeq	r4, [r5, #0]
 800bab4:	1cb5      	addeq	r5, r6, #2
 800bab6:	e7ca      	b.n	800ba4e <_strtol_l.constprop.0+0x3a>
 800bab8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800babc:	f1bc 0f19 	cmp.w	ip, #25
 800bac0:	d801      	bhi.n	800bac6 <_strtol_l.constprop.0+0xb2>
 800bac2:	3c37      	subs	r4, #55	; 0x37
 800bac4:	e7e2      	b.n	800ba8c <_strtol_l.constprop.0+0x78>
 800bac6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800baca:	f1bc 0f19 	cmp.w	ip, #25
 800bace:	d804      	bhi.n	800bada <_strtol_l.constprop.0+0xc6>
 800bad0:	3c57      	subs	r4, #87	; 0x57
 800bad2:	e7db      	b.n	800ba8c <_strtol_l.constprop.0+0x78>
 800bad4:	f04f 3eff 	mov.w	lr, #4294967295
 800bad8:	e7e6      	b.n	800baa8 <_strtol_l.constprop.0+0x94>
 800bada:	f1be 3fff 	cmp.w	lr, #4294967295
 800bade:	d105      	bne.n	800baec <_strtol_l.constprop.0+0xd8>
 800bae0:	2322      	movs	r3, #34	; 0x22
 800bae2:	6003      	str	r3, [r0, #0]
 800bae4:	4646      	mov	r6, r8
 800bae6:	b942      	cbnz	r2, 800bafa <_strtol_l.constprop.0+0xe6>
 800bae8:	4630      	mov	r0, r6
 800baea:	e79e      	b.n	800ba2a <_strtol_l.constprop.0+0x16>
 800baec:	b107      	cbz	r7, 800baf0 <_strtol_l.constprop.0+0xdc>
 800baee:	4276      	negs	r6, r6
 800baf0:	2a00      	cmp	r2, #0
 800baf2:	d0f9      	beq.n	800bae8 <_strtol_l.constprop.0+0xd4>
 800baf4:	f1be 0f00 	cmp.w	lr, #0
 800baf8:	d000      	beq.n	800bafc <_strtol_l.constprop.0+0xe8>
 800bafa:	1e69      	subs	r1, r5, #1
 800bafc:	6011      	str	r1, [r2, #0]
 800bafe:	e7f3      	b.n	800bae8 <_strtol_l.constprop.0+0xd4>
 800bb00:	2430      	movs	r4, #48	; 0x30
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d1b1      	bne.n	800ba6a <_strtol_l.constprop.0+0x56>
 800bb06:	2308      	movs	r3, #8
 800bb08:	e7af      	b.n	800ba6a <_strtol_l.constprop.0+0x56>
 800bb0a:	2c30      	cmp	r4, #48	; 0x30
 800bb0c:	d0a5      	beq.n	800ba5a <_strtol_l.constprop.0+0x46>
 800bb0e:	230a      	movs	r3, #10
 800bb10:	e7ab      	b.n	800ba6a <_strtol_l.constprop.0+0x56>
 800bb12:	bf00      	nop
 800bb14:	0800dfe9 	.word	0x0800dfe9

0800bb18 <_strtol_r>:
 800bb18:	f7ff bf7c 	b.w	800ba14 <_strtol_l.constprop.0>

0800bb1c <__ssputs_r>:
 800bb1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb20:	688e      	ldr	r6, [r1, #8]
 800bb22:	461f      	mov	r7, r3
 800bb24:	42be      	cmp	r6, r7
 800bb26:	680b      	ldr	r3, [r1, #0]
 800bb28:	4682      	mov	sl, r0
 800bb2a:	460c      	mov	r4, r1
 800bb2c:	4690      	mov	r8, r2
 800bb2e:	d82c      	bhi.n	800bb8a <__ssputs_r+0x6e>
 800bb30:	898a      	ldrh	r2, [r1, #12]
 800bb32:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bb36:	d026      	beq.n	800bb86 <__ssputs_r+0x6a>
 800bb38:	6965      	ldr	r5, [r4, #20]
 800bb3a:	6909      	ldr	r1, [r1, #16]
 800bb3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb40:	eba3 0901 	sub.w	r9, r3, r1
 800bb44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb48:	1c7b      	adds	r3, r7, #1
 800bb4a:	444b      	add	r3, r9
 800bb4c:	106d      	asrs	r5, r5, #1
 800bb4e:	429d      	cmp	r5, r3
 800bb50:	bf38      	it	cc
 800bb52:	461d      	movcc	r5, r3
 800bb54:	0553      	lsls	r3, r2, #21
 800bb56:	d527      	bpl.n	800bba8 <__ssputs_r+0x8c>
 800bb58:	4629      	mov	r1, r5
 800bb5a:	f7fc fc8d 	bl	8008478 <_malloc_r>
 800bb5e:	4606      	mov	r6, r0
 800bb60:	b360      	cbz	r0, 800bbbc <__ssputs_r+0xa0>
 800bb62:	6921      	ldr	r1, [r4, #16]
 800bb64:	464a      	mov	r2, r9
 800bb66:	f7fd fd92 	bl	800968e <memcpy>
 800bb6a:	89a3      	ldrh	r3, [r4, #12]
 800bb6c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bb70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb74:	81a3      	strh	r3, [r4, #12]
 800bb76:	6126      	str	r6, [r4, #16]
 800bb78:	6165      	str	r5, [r4, #20]
 800bb7a:	444e      	add	r6, r9
 800bb7c:	eba5 0509 	sub.w	r5, r5, r9
 800bb80:	6026      	str	r6, [r4, #0]
 800bb82:	60a5      	str	r5, [r4, #8]
 800bb84:	463e      	mov	r6, r7
 800bb86:	42be      	cmp	r6, r7
 800bb88:	d900      	bls.n	800bb8c <__ssputs_r+0x70>
 800bb8a:	463e      	mov	r6, r7
 800bb8c:	6820      	ldr	r0, [r4, #0]
 800bb8e:	4632      	mov	r2, r6
 800bb90:	4641      	mov	r1, r8
 800bb92:	f001 f835 	bl	800cc00 <memmove>
 800bb96:	68a3      	ldr	r3, [r4, #8]
 800bb98:	1b9b      	subs	r3, r3, r6
 800bb9a:	60a3      	str	r3, [r4, #8]
 800bb9c:	6823      	ldr	r3, [r4, #0]
 800bb9e:	4433      	add	r3, r6
 800bba0:	6023      	str	r3, [r4, #0]
 800bba2:	2000      	movs	r0, #0
 800bba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bba8:	462a      	mov	r2, r5
 800bbaa:	f7fc fcf1 	bl	8008590 <_realloc_r>
 800bbae:	4606      	mov	r6, r0
 800bbb0:	2800      	cmp	r0, #0
 800bbb2:	d1e0      	bne.n	800bb76 <__ssputs_r+0x5a>
 800bbb4:	6921      	ldr	r1, [r4, #16]
 800bbb6:	4650      	mov	r0, sl
 800bbb8:	f7fe fc18 	bl	800a3ec <_free_r>
 800bbbc:	230c      	movs	r3, #12
 800bbbe:	f8ca 3000 	str.w	r3, [sl]
 800bbc2:	89a3      	ldrh	r3, [r4, #12]
 800bbc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbc8:	81a3      	strh	r3, [r4, #12]
 800bbca:	f04f 30ff 	mov.w	r0, #4294967295
 800bbce:	e7e9      	b.n	800bba4 <__ssputs_r+0x88>

0800bbd0 <_svfiprintf_r>:
 800bbd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbd4:	4698      	mov	r8, r3
 800bbd6:	898b      	ldrh	r3, [r1, #12]
 800bbd8:	061b      	lsls	r3, r3, #24
 800bbda:	b09d      	sub	sp, #116	; 0x74
 800bbdc:	4607      	mov	r7, r0
 800bbde:	460d      	mov	r5, r1
 800bbe0:	4614      	mov	r4, r2
 800bbe2:	d50e      	bpl.n	800bc02 <_svfiprintf_r+0x32>
 800bbe4:	690b      	ldr	r3, [r1, #16]
 800bbe6:	b963      	cbnz	r3, 800bc02 <_svfiprintf_r+0x32>
 800bbe8:	2140      	movs	r1, #64	; 0x40
 800bbea:	f7fc fc45 	bl	8008478 <_malloc_r>
 800bbee:	6028      	str	r0, [r5, #0]
 800bbf0:	6128      	str	r0, [r5, #16]
 800bbf2:	b920      	cbnz	r0, 800bbfe <_svfiprintf_r+0x2e>
 800bbf4:	230c      	movs	r3, #12
 800bbf6:	603b      	str	r3, [r7, #0]
 800bbf8:	f04f 30ff 	mov.w	r0, #4294967295
 800bbfc:	e0d0      	b.n	800bda0 <_svfiprintf_r+0x1d0>
 800bbfe:	2340      	movs	r3, #64	; 0x40
 800bc00:	616b      	str	r3, [r5, #20]
 800bc02:	2300      	movs	r3, #0
 800bc04:	9309      	str	r3, [sp, #36]	; 0x24
 800bc06:	2320      	movs	r3, #32
 800bc08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc0c:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc10:	2330      	movs	r3, #48	; 0x30
 800bc12:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bdb8 <_svfiprintf_r+0x1e8>
 800bc16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc1a:	f04f 0901 	mov.w	r9, #1
 800bc1e:	4623      	mov	r3, r4
 800bc20:	469a      	mov	sl, r3
 800bc22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc26:	b10a      	cbz	r2, 800bc2c <_svfiprintf_r+0x5c>
 800bc28:	2a25      	cmp	r2, #37	; 0x25
 800bc2a:	d1f9      	bne.n	800bc20 <_svfiprintf_r+0x50>
 800bc2c:	ebba 0b04 	subs.w	fp, sl, r4
 800bc30:	d00b      	beq.n	800bc4a <_svfiprintf_r+0x7a>
 800bc32:	465b      	mov	r3, fp
 800bc34:	4622      	mov	r2, r4
 800bc36:	4629      	mov	r1, r5
 800bc38:	4638      	mov	r0, r7
 800bc3a:	f7ff ff6f 	bl	800bb1c <__ssputs_r>
 800bc3e:	3001      	adds	r0, #1
 800bc40:	f000 80a9 	beq.w	800bd96 <_svfiprintf_r+0x1c6>
 800bc44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc46:	445a      	add	r2, fp
 800bc48:	9209      	str	r2, [sp, #36]	; 0x24
 800bc4a:	f89a 3000 	ldrb.w	r3, [sl]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	f000 80a1 	beq.w	800bd96 <_svfiprintf_r+0x1c6>
 800bc54:	2300      	movs	r3, #0
 800bc56:	f04f 32ff 	mov.w	r2, #4294967295
 800bc5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc5e:	f10a 0a01 	add.w	sl, sl, #1
 800bc62:	9304      	str	r3, [sp, #16]
 800bc64:	9307      	str	r3, [sp, #28]
 800bc66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc6a:	931a      	str	r3, [sp, #104]	; 0x68
 800bc6c:	4654      	mov	r4, sl
 800bc6e:	2205      	movs	r2, #5
 800bc70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc74:	4850      	ldr	r0, [pc, #320]	; (800bdb8 <_svfiprintf_r+0x1e8>)
 800bc76:	f7f4 faab 	bl	80001d0 <memchr>
 800bc7a:	9a04      	ldr	r2, [sp, #16]
 800bc7c:	b9d8      	cbnz	r0, 800bcb6 <_svfiprintf_r+0xe6>
 800bc7e:	06d0      	lsls	r0, r2, #27
 800bc80:	bf44      	itt	mi
 800bc82:	2320      	movmi	r3, #32
 800bc84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc88:	0711      	lsls	r1, r2, #28
 800bc8a:	bf44      	itt	mi
 800bc8c:	232b      	movmi	r3, #43	; 0x2b
 800bc8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc92:	f89a 3000 	ldrb.w	r3, [sl]
 800bc96:	2b2a      	cmp	r3, #42	; 0x2a
 800bc98:	d015      	beq.n	800bcc6 <_svfiprintf_r+0xf6>
 800bc9a:	9a07      	ldr	r2, [sp, #28]
 800bc9c:	4654      	mov	r4, sl
 800bc9e:	2000      	movs	r0, #0
 800bca0:	f04f 0c0a 	mov.w	ip, #10
 800bca4:	4621      	mov	r1, r4
 800bca6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bcaa:	3b30      	subs	r3, #48	; 0x30
 800bcac:	2b09      	cmp	r3, #9
 800bcae:	d94d      	bls.n	800bd4c <_svfiprintf_r+0x17c>
 800bcb0:	b1b0      	cbz	r0, 800bce0 <_svfiprintf_r+0x110>
 800bcb2:	9207      	str	r2, [sp, #28]
 800bcb4:	e014      	b.n	800bce0 <_svfiprintf_r+0x110>
 800bcb6:	eba0 0308 	sub.w	r3, r0, r8
 800bcba:	fa09 f303 	lsl.w	r3, r9, r3
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	9304      	str	r3, [sp, #16]
 800bcc2:	46a2      	mov	sl, r4
 800bcc4:	e7d2      	b.n	800bc6c <_svfiprintf_r+0x9c>
 800bcc6:	9b03      	ldr	r3, [sp, #12]
 800bcc8:	1d19      	adds	r1, r3, #4
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	9103      	str	r1, [sp, #12]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	bfbb      	ittet	lt
 800bcd2:	425b      	neglt	r3, r3
 800bcd4:	f042 0202 	orrlt.w	r2, r2, #2
 800bcd8:	9307      	strge	r3, [sp, #28]
 800bcda:	9307      	strlt	r3, [sp, #28]
 800bcdc:	bfb8      	it	lt
 800bcde:	9204      	strlt	r2, [sp, #16]
 800bce0:	7823      	ldrb	r3, [r4, #0]
 800bce2:	2b2e      	cmp	r3, #46	; 0x2e
 800bce4:	d10c      	bne.n	800bd00 <_svfiprintf_r+0x130>
 800bce6:	7863      	ldrb	r3, [r4, #1]
 800bce8:	2b2a      	cmp	r3, #42	; 0x2a
 800bcea:	d134      	bne.n	800bd56 <_svfiprintf_r+0x186>
 800bcec:	9b03      	ldr	r3, [sp, #12]
 800bcee:	1d1a      	adds	r2, r3, #4
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	9203      	str	r2, [sp, #12]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	bfb8      	it	lt
 800bcf8:	f04f 33ff 	movlt.w	r3, #4294967295
 800bcfc:	3402      	adds	r4, #2
 800bcfe:	9305      	str	r3, [sp, #20]
 800bd00:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bdc8 <_svfiprintf_r+0x1f8>
 800bd04:	7821      	ldrb	r1, [r4, #0]
 800bd06:	2203      	movs	r2, #3
 800bd08:	4650      	mov	r0, sl
 800bd0a:	f7f4 fa61 	bl	80001d0 <memchr>
 800bd0e:	b138      	cbz	r0, 800bd20 <_svfiprintf_r+0x150>
 800bd10:	9b04      	ldr	r3, [sp, #16]
 800bd12:	eba0 000a 	sub.w	r0, r0, sl
 800bd16:	2240      	movs	r2, #64	; 0x40
 800bd18:	4082      	lsls	r2, r0
 800bd1a:	4313      	orrs	r3, r2
 800bd1c:	3401      	adds	r4, #1
 800bd1e:	9304      	str	r3, [sp, #16]
 800bd20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd24:	4825      	ldr	r0, [pc, #148]	; (800bdbc <_svfiprintf_r+0x1ec>)
 800bd26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd2a:	2206      	movs	r2, #6
 800bd2c:	f7f4 fa50 	bl	80001d0 <memchr>
 800bd30:	2800      	cmp	r0, #0
 800bd32:	d038      	beq.n	800bda6 <_svfiprintf_r+0x1d6>
 800bd34:	4b22      	ldr	r3, [pc, #136]	; (800bdc0 <_svfiprintf_r+0x1f0>)
 800bd36:	bb1b      	cbnz	r3, 800bd80 <_svfiprintf_r+0x1b0>
 800bd38:	9b03      	ldr	r3, [sp, #12]
 800bd3a:	3307      	adds	r3, #7
 800bd3c:	f023 0307 	bic.w	r3, r3, #7
 800bd40:	3308      	adds	r3, #8
 800bd42:	9303      	str	r3, [sp, #12]
 800bd44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd46:	4433      	add	r3, r6
 800bd48:	9309      	str	r3, [sp, #36]	; 0x24
 800bd4a:	e768      	b.n	800bc1e <_svfiprintf_r+0x4e>
 800bd4c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd50:	460c      	mov	r4, r1
 800bd52:	2001      	movs	r0, #1
 800bd54:	e7a6      	b.n	800bca4 <_svfiprintf_r+0xd4>
 800bd56:	2300      	movs	r3, #0
 800bd58:	3401      	adds	r4, #1
 800bd5a:	9305      	str	r3, [sp, #20]
 800bd5c:	4619      	mov	r1, r3
 800bd5e:	f04f 0c0a 	mov.w	ip, #10
 800bd62:	4620      	mov	r0, r4
 800bd64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd68:	3a30      	subs	r2, #48	; 0x30
 800bd6a:	2a09      	cmp	r2, #9
 800bd6c:	d903      	bls.n	800bd76 <_svfiprintf_r+0x1a6>
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d0c6      	beq.n	800bd00 <_svfiprintf_r+0x130>
 800bd72:	9105      	str	r1, [sp, #20]
 800bd74:	e7c4      	b.n	800bd00 <_svfiprintf_r+0x130>
 800bd76:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd7a:	4604      	mov	r4, r0
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	e7f0      	b.n	800bd62 <_svfiprintf_r+0x192>
 800bd80:	ab03      	add	r3, sp, #12
 800bd82:	9300      	str	r3, [sp, #0]
 800bd84:	462a      	mov	r2, r5
 800bd86:	4b0f      	ldr	r3, [pc, #60]	; (800bdc4 <_svfiprintf_r+0x1f4>)
 800bd88:	a904      	add	r1, sp, #16
 800bd8a:	4638      	mov	r0, r7
 800bd8c:	f7fc fcd0 	bl	8008730 <_printf_float>
 800bd90:	1c42      	adds	r2, r0, #1
 800bd92:	4606      	mov	r6, r0
 800bd94:	d1d6      	bne.n	800bd44 <_svfiprintf_r+0x174>
 800bd96:	89ab      	ldrh	r3, [r5, #12]
 800bd98:	065b      	lsls	r3, r3, #25
 800bd9a:	f53f af2d 	bmi.w	800bbf8 <_svfiprintf_r+0x28>
 800bd9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bda0:	b01d      	add	sp, #116	; 0x74
 800bda2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bda6:	ab03      	add	r3, sp, #12
 800bda8:	9300      	str	r3, [sp, #0]
 800bdaa:	462a      	mov	r2, r5
 800bdac:	4b05      	ldr	r3, [pc, #20]	; (800bdc4 <_svfiprintf_r+0x1f4>)
 800bdae:	a904      	add	r1, sp, #16
 800bdb0:	4638      	mov	r0, r7
 800bdb2:	f7fc ff61 	bl	8008c78 <_printf_i>
 800bdb6:	e7eb      	b.n	800bd90 <_svfiprintf_r+0x1c0>
 800bdb8:	0800e0e9 	.word	0x0800e0e9
 800bdbc:	0800e0f3 	.word	0x0800e0f3
 800bdc0:	08008731 	.word	0x08008731
 800bdc4:	0800bb1d 	.word	0x0800bb1d
 800bdc8:	0800e0ef 	.word	0x0800e0ef

0800bdcc <__sfputc_r>:
 800bdcc:	6893      	ldr	r3, [r2, #8]
 800bdce:	3b01      	subs	r3, #1
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	b410      	push	{r4}
 800bdd4:	6093      	str	r3, [r2, #8]
 800bdd6:	da08      	bge.n	800bdea <__sfputc_r+0x1e>
 800bdd8:	6994      	ldr	r4, [r2, #24]
 800bdda:	42a3      	cmp	r3, r4
 800bddc:	db01      	blt.n	800bde2 <__sfputc_r+0x16>
 800bdde:	290a      	cmp	r1, #10
 800bde0:	d103      	bne.n	800bdea <__sfputc_r+0x1e>
 800bde2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bde6:	f000 be76 	b.w	800cad6 <__swbuf_r>
 800bdea:	6813      	ldr	r3, [r2, #0]
 800bdec:	1c58      	adds	r0, r3, #1
 800bdee:	6010      	str	r0, [r2, #0]
 800bdf0:	7019      	strb	r1, [r3, #0]
 800bdf2:	4608      	mov	r0, r1
 800bdf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bdf8:	4770      	bx	lr

0800bdfa <__sfputs_r>:
 800bdfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdfc:	4606      	mov	r6, r0
 800bdfe:	460f      	mov	r7, r1
 800be00:	4614      	mov	r4, r2
 800be02:	18d5      	adds	r5, r2, r3
 800be04:	42ac      	cmp	r4, r5
 800be06:	d101      	bne.n	800be0c <__sfputs_r+0x12>
 800be08:	2000      	movs	r0, #0
 800be0a:	e007      	b.n	800be1c <__sfputs_r+0x22>
 800be0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be10:	463a      	mov	r2, r7
 800be12:	4630      	mov	r0, r6
 800be14:	f7ff ffda 	bl	800bdcc <__sfputc_r>
 800be18:	1c43      	adds	r3, r0, #1
 800be1a:	d1f3      	bne.n	800be04 <__sfputs_r+0xa>
 800be1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800be20 <_vfiprintf_r>:
 800be20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be24:	460d      	mov	r5, r1
 800be26:	b09d      	sub	sp, #116	; 0x74
 800be28:	4614      	mov	r4, r2
 800be2a:	4698      	mov	r8, r3
 800be2c:	4606      	mov	r6, r0
 800be2e:	b118      	cbz	r0, 800be38 <_vfiprintf_r+0x18>
 800be30:	6a03      	ldr	r3, [r0, #32]
 800be32:	b90b      	cbnz	r3, 800be38 <_vfiprintf_r+0x18>
 800be34:	f7fd fade 	bl	80093f4 <__sinit>
 800be38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be3a:	07d9      	lsls	r1, r3, #31
 800be3c:	d405      	bmi.n	800be4a <_vfiprintf_r+0x2a>
 800be3e:	89ab      	ldrh	r3, [r5, #12]
 800be40:	059a      	lsls	r2, r3, #22
 800be42:	d402      	bmi.n	800be4a <_vfiprintf_r+0x2a>
 800be44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be46:	f7fd fc20 	bl	800968a <__retarget_lock_acquire_recursive>
 800be4a:	89ab      	ldrh	r3, [r5, #12]
 800be4c:	071b      	lsls	r3, r3, #28
 800be4e:	d501      	bpl.n	800be54 <_vfiprintf_r+0x34>
 800be50:	692b      	ldr	r3, [r5, #16]
 800be52:	b99b      	cbnz	r3, 800be7c <_vfiprintf_r+0x5c>
 800be54:	4629      	mov	r1, r5
 800be56:	4630      	mov	r0, r6
 800be58:	f000 fe7a 	bl	800cb50 <__swsetup_r>
 800be5c:	b170      	cbz	r0, 800be7c <_vfiprintf_r+0x5c>
 800be5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be60:	07dc      	lsls	r4, r3, #31
 800be62:	d504      	bpl.n	800be6e <_vfiprintf_r+0x4e>
 800be64:	f04f 30ff 	mov.w	r0, #4294967295
 800be68:	b01d      	add	sp, #116	; 0x74
 800be6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be6e:	89ab      	ldrh	r3, [r5, #12]
 800be70:	0598      	lsls	r0, r3, #22
 800be72:	d4f7      	bmi.n	800be64 <_vfiprintf_r+0x44>
 800be74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be76:	f7fd fc09 	bl	800968c <__retarget_lock_release_recursive>
 800be7a:	e7f3      	b.n	800be64 <_vfiprintf_r+0x44>
 800be7c:	2300      	movs	r3, #0
 800be7e:	9309      	str	r3, [sp, #36]	; 0x24
 800be80:	2320      	movs	r3, #32
 800be82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be86:	f8cd 800c 	str.w	r8, [sp, #12]
 800be8a:	2330      	movs	r3, #48	; 0x30
 800be8c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c040 <_vfiprintf_r+0x220>
 800be90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be94:	f04f 0901 	mov.w	r9, #1
 800be98:	4623      	mov	r3, r4
 800be9a:	469a      	mov	sl, r3
 800be9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bea0:	b10a      	cbz	r2, 800bea6 <_vfiprintf_r+0x86>
 800bea2:	2a25      	cmp	r2, #37	; 0x25
 800bea4:	d1f9      	bne.n	800be9a <_vfiprintf_r+0x7a>
 800bea6:	ebba 0b04 	subs.w	fp, sl, r4
 800beaa:	d00b      	beq.n	800bec4 <_vfiprintf_r+0xa4>
 800beac:	465b      	mov	r3, fp
 800beae:	4622      	mov	r2, r4
 800beb0:	4629      	mov	r1, r5
 800beb2:	4630      	mov	r0, r6
 800beb4:	f7ff ffa1 	bl	800bdfa <__sfputs_r>
 800beb8:	3001      	adds	r0, #1
 800beba:	f000 80a9 	beq.w	800c010 <_vfiprintf_r+0x1f0>
 800bebe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bec0:	445a      	add	r2, fp
 800bec2:	9209      	str	r2, [sp, #36]	; 0x24
 800bec4:	f89a 3000 	ldrb.w	r3, [sl]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	f000 80a1 	beq.w	800c010 <_vfiprintf_r+0x1f0>
 800bece:	2300      	movs	r3, #0
 800bed0:	f04f 32ff 	mov.w	r2, #4294967295
 800bed4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bed8:	f10a 0a01 	add.w	sl, sl, #1
 800bedc:	9304      	str	r3, [sp, #16]
 800bede:	9307      	str	r3, [sp, #28]
 800bee0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bee4:	931a      	str	r3, [sp, #104]	; 0x68
 800bee6:	4654      	mov	r4, sl
 800bee8:	2205      	movs	r2, #5
 800beea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800beee:	4854      	ldr	r0, [pc, #336]	; (800c040 <_vfiprintf_r+0x220>)
 800bef0:	f7f4 f96e 	bl	80001d0 <memchr>
 800bef4:	9a04      	ldr	r2, [sp, #16]
 800bef6:	b9d8      	cbnz	r0, 800bf30 <_vfiprintf_r+0x110>
 800bef8:	06d1      	lsls	r1, r2, #27
 800befa:	bf44      	itt	mi
 800befc:	2320      	movmi	r3, #32
 800befe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf02:	0713      	lsls	r3, r2, #28
 800bf04:	bf44      	itt	mi
 800bf06:	232b      	movmi	r3, #43	; 0x2b
 800bf08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf0c:	f89a 3000 	ldrb.w	r3, [sl]
 800bf10:	2b2a      	cmp	r3, #42	; 0x2a
 800bf12:	d015      	beq.n	800bf40 <_vfiprintf_r+0x120>
 800bf14:	9a07      	ldr	r2, [sp, #28]
 800bf16:	4654      	mov	r4, sl
 800bf18:	2000      	movs	r0, #0
 800bf1a:	f04f 0c0a 	mov.w	ip, #10
 800bf1e:	4621      	mov	r1, r4
 800bf20:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf24:	3b30      	subs	r3, #48	; 0x30
 800bf26:	2b09      	cmp	r3, #9
 800bf28:	d94d      	bls.n	800bfc6 <_vfiprintf_r+0x1a6>
 800bf2a:	b1b0      	cbz	r0, 800bf5a <_vfiprintf_r+0x13a>
 800bf2c:	9207      	str	r2, [sp, #28]
 800bf2e:	e014      	b.n	800bf5a <_vfiprintf_r+0x13a>
 800bf30:	eba0 0308 	sub.w	r3, r0, r8
 800bf34:	fa09 f303 	lsl.w	r3, r9, r3
 800bf38:	4313      	orrs	r3, r2
 800bf3a:	9304      	str	r3, [sp, #16]
 800bf3c:	46a2      	mov	sl, r4
 800bf3e:	e7d2      	b.n	800bee6 <_vfiprintf_r+0xc6>
 800bf40:	9b03      	ldr	r3, [sp, #12]
 800bf42:	1d19      	adds	r1, r3, #4
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	9103      	str	r1, [sp, #12]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	bfbb      	ittet	lt
 800bf4c:	425b      	neglt	r3, r3
 800bf4e:	f042 0202 	orrlt.w	r2, r2, #2
 800bf52:	9307      	strge	r3, [sp, #28]
 800bf54:	9307      	strlt	r3, [sp, #28]
 800bf56:	bfb8      	it	lt
 800bf58:	9204      	strlt	r2, [sp, #16]
 800bf5a:	7823      	ldrb	r3, [r4, #0]
 800bf5c:	2b2e      	cmp	r3, #46	; 0x2e
 800bf5e:	d10c      	bne.n	800bf7a <_vfiprintf_r+0x15a>
 800bf60:	7863      	ldrb	r3, [r4, #1]
 800bf62:	2b2a      	cmp	r3, #42	; 0x2a
 800bf64:	d134      	bne.n	800bfd0 <_vfiprintf_r+0x1b0>
 800bf66:	9b03      	ldr	r3, [sp, #12]
 800bf68:	1d1a      	adds	r2, r3, #4
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	9203      	str	r2, [sp, #12]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	bfb8      	it	lt
 800bf72:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf76:	3402      	adds	r4, #2
 800bf78:	9305      	str	r3, [sp, #20]
 800bf7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c050 <_vfiprintf_r+0x230>
 800bf7e:	7821      	ldrb	r1, [r4, #0]
 800bf80:	2203      	movs	r2, #3
 800bf82:	4650      	mov	r0, sl
 800bf84:	f7f4 f924 	bl	80001d0 <memchr>
 800bf88:	b138      	cbz	r0, 800bf9a <_vfiprintf_r+0x17a>
 800bf8a:	9b04      	ldr	r3, [sp, #16]
 800bf8c:	eba0 000a 	sub.w	r0, r0, sl
 800bf90:	2240      	movs	r2, #64	; 0x40
 800bf92:	4082      	lsls	r2, r0
 800bf94:	4313      	orrs	r3, r2
 800bf96:	3401      	adds	r4, #1
 800bf98:	9304      	str	r3, [sp, #16]
 800bf9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf9e:	4829      	ldr	r0, [pc, #164]	; (800c044 <_vfiprintf_r+0x224>)
 800bfa0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bfa4:	2206      	movs	r2, #6
 800bfa6:	f7f4 f913 	bl	80001d0 <memchr>
 800bfaa:	2800      	cmp	r0, #0
 800bfac:	d03f      	beq.n	800c02e <_vfiprintf_r+0x20e>
 800bfae:	4b26      	ldr	r3, [pc, #152]	; (800c048 <_vfiprintf_r+0x228>)
 800bfb0:	bb1b      	cbnz	r3, 800bffa <_vfiprintf_r+0x1da>
 800bfb2:	9b03      	ldr	r3, [sp, #12]
 800bfb4:	3307      	adds	r3, #7
 800bfb6:	f023 0307 	bic.w	r3, r3, #7
 800bfba:	3308      	adds	r3, #8
 800bfbc:	9303      	str	r3, [sp, #12]
 800bfbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfc0:	443b      	add	r3, r7
 800bfc2:	9309      	str	r3, [sp, #36]	; 0x24
 800bfc4:	e768      	b.n	800be98 <_vfiprintf_r+0x78>
 800bfc6:	fb0c 3202 	mla	r2, ip, r2, r3
 800bfca:	460c      	mov	r4, r1
 800bfcc:	2001      	movs	r0, #1
 800bfce:	e7a6      	b.n	800bf1e <_vfiprintf_r+0xfe>
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	3401      	adds	r4, #1
 800bfd4:	9305      	str	r3, [sp, #20]
 800bfd6:	4619      	mov	r1, r3
 800bfd8:	f04f 0c0a 	mov.w	ip, #10
 800bfdc:	4620      	mov	r0, r4
 800bfde:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfe2:	3a30      	subs	r2, #48	; 0x30
 800bfe4:	2a09      	cmp	r2, #9
 800bfe6:	d903      	bls.n	800bff0 <_vfiprintf_r+0x1d0>
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d0c6      	beq.n	800bf7a <_vfiprintf_r+0x15a>
 800bfec:	9105      	str	r1, [sp, #20]
 800bfee:	e7c4      	b.n	800bf7a <_vfiprintf_r+0x15a>
 800bff0:	fb0c 2101 	mla	r1, ip, r1, r2
 800bff4:	4604      	mov	r4, r0
 800bff6:	2301      	movs	r3, #1
 800bff8:	e7f0      	b.n	800bfdc <_vfiprintf_r+0x1bc>
 800bffa:	ab03      	add	r3, sp, #12
 800bffc:	9300      	str	r3, [sp, #0]
 800bffe:	462a      	mov	r2, r5
 800c000:	4b12      	ldr	r3, [pc, #72]	; (800c04c <_vfiprintf_r+0x22c>)
 800c002:	a904      	add	r1, sp, #16
 800c004:	4630      	mov	r0, r6
 800c006:	f7fc fb93 	bl	8008730 <_printf_float>
 800c00a:	4607      	mov	r7, r0
 800c00c:	1c78      	adds	r0, r7, #1
 800c00e:	d1d6      	bne.n	800bfbe <_vfiprintf_r+0x19e>
 800c010:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c012:	07d9      	lsls	r1, r3, #31
 800c014:	d405      	bmi.n	800c022 <_vfiprintf_r+0x202>
 800c016:	89ab      	ldrh	r3, [r5, #12]
 800c018:	059a      	lsls	r2, r3, #22
 800c01a:	d402      	bmi.n	800c022 <_vfiprintf_r+0x202>
 800c01c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c01e:	f7fd fb35 	bl	800968c <__retarget_lock_release_recursive>
 800c022:	89ab      	ldrh	r3, [r5, #12]
 800c024:	065b      	lsls	r3, r3, #25
 800c026:	f53f af1d 	bmi.w	800be64 <_vfiprintf_r+0x44>
 800c02a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c02c:	e71c      	b.n	800be68 <_vfiprintf_r+0x48>
 800c02e:	ab03      	add	r3, sp, #12
 800c030:	9300      	str	r3, [sp, #0]
 800c032:	462a      	mov	r2, r5
 800c034:	4b05      	ldr	r3, [pc, #20]	; (800c04c <_vfiprintf_r+0x22c>)
 800c036:	a904      	add	r1, sp, #16
 800c038:	4630      	mov	r0, r6
 800c03a:	f7fc fe1d 	bl	8008c78 <_printf_i>
 800c03e:	e7e4      	b.n	800c00a <_vfiprintf_r+0x1ea>
 800c040:	0800e0e9 	.word	0x0800e0e9
 800c044:	0800e0f3 	.word	0x0800e0f3
 800c048:	08008731 	.word	0x08008731
 800c04c:	0800bdfb 	.word	0x0800bdfb
 800c050:	0800e0ef 	.word	0x0800e0ef

0800c054 <__svfiscanf_r>:
 800c054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c058:	461d      	mov	r5, r3
 800c05a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800c05c:	07df      	lsls	r7, r3, #31
 800c05e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c062:	4606      	mov	r6, r0
 800c064:	460c      	mov	r4, r1
 800c066:	4692      	mov	sl, r2
 800c068:	d405      	bmi.n	800c076 <__svfiscanf_r+0x22>
 800c06a:	898b      	ldrh	r3, [r1, #12]
 800c06c:	0598      	lsls	r0, r3, #22
 800c06e:	d402      	bmi.n	800c076 <__svfiscanf_r+0x22>
 800c070:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800c072:	f7fd fb0a 	bl	800968a <__retarget_lock_acquire_recursive>
 800c076:	2300      	movs	r3, #0
 800c078:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 800c07c:	4baa      	ldr	r3, [pc, #680]	; (800c328 <__svfiscanf_r+0x2d4>)
 800c07e:	93a0      	str	r3, [sp, #640]	; 0x280
 800c080:	f10d 0804 	add.w	r8, sp, #4
 800c084:	4ba9      	ldr	r3, [pc, #676]	; (800c32c <__svfiscanf_r+0x2d8>)
 800c086:	4faa      	ldr	r7, [pc, #680]	; (800c330 <__svfiscanf_r+0x2dc>)
 800c088:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 800c334 <__svfiscanf_r+0x2e0>
 800c08c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c090:	93a1      	str	r3, [sp, #644]	; 0x284
 800c092:	9500      	str	r5, [sp, #0]
 800c094:	f89a 3000 	ldrb.w	r3, [sl]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	f000 8170 	beq.w	800c37e <__svfiscanf_r+0x32a>
 800c09e:	5cf9      	ldrb	r1, [r7, r3]
 800c0a0:	f011 0108 	ands.w	r1, r1, #8
 800c0a4:	f10a 0501 	add.w	r5, sl, #1
 800c0a8:	d019      	beq.n	800c0de <__svfiscanf_r+0x8a>
 800c0aa:	6863      	ldr	r3, [r4, #4]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	dd0f      	ble.n	800c0d0 <__svfiscanf_r+0x7c>
 800c0b0:	6823      	ldr	r3, [r4, #0]
 800c0b2:	781a      	ldrb	r2, [r3, #0]
 800c0b4:	5cba      	ldrb	r2, [r7, r2]
 800c0b6:	0711      	lsls	r1, r2, #28
 800c0b8:	d401      	bmi.n	800c0be <__svfiscanf_r+0x6a>
 800c0ba:	46aa      	mov	sl, r5
 800c0bc:	e7ea      	b.n	800c094 <__svfiscanf_r+0x40>
 800c0be:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c0c0:	3201      	adds	r2, #1
 800c0c2:	9245      	str	r2, [sp, #276]	; 0x114
 800c0c4:	6862      	ldr	r2, [r4, #4]
 800c0c6:	3301      	adds	r3, #1
 800c0c8:	3a01      	subs	r2, #1
 800c0ca:	6062      	str	r2, [r4, #4]
 800c0cc:	6023      	str	r3, [r4, #0]
 800c0ce:	e7ec      	b.n	800c0aa <__svfiscanf_r+0x56>
 800c0d0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c0d2:	4621      	mov	r1, r4
 800c0d4:	4630      	mov	r0, r6
 800c0d6:	4798      	blx	r3
 800c0d8:	2800      	cmp	r0, #0
 800c0da:	d0e9      	beq.n	800c0b0 <__svfiscanf_r+0x5c>
 800c0dc:	e7ed      	b.n	800c0ba <__svfiscanf_r+0x66>
 800c0de:	2b25      	cmp	r3, #37	; 0x25
 800c0e0:	d012      	beq.n	800c108 <__svfiscanf_r+0xb4>
 800c0e2:	469a      	mov	sl, r3
 800c0e4:	6863      	ldr	r3, [r4, #4]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	f340 8093 	ble.w	800c212 <__svfiscanf_r+0x1be>
 800c0ec:	6822      	ldr	r2, [r4, #0]
 800c0ee:	7813      	ldrb	r3, [r2, #0]
 800c0f0:	4553      	cmp	r3, sl
 800c0f2:	f040 8144 	bne.w	800c37e <__svfiscanf_r+0x32a>
 800c0f6:	6863      	ldr	r3, [r4, #4]
 800c0f8:	3b01      	subs	r3, #1
 800c0fa:	6063      	str	r3, [r4, #4]
 800c0fc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c0fe:	3201      	adds	r2, #1
 800c100:	3301      	adds	r3, #1
 800c102:	6022      	str	r2, [r4, #0]
 800c104:	9345      	str	r3, [sp, #276]	; 0x114
 800c106:	e7d8      	b.n	800c0ba <__svfiscanf_r+0x66>
 800c108:	9141      	str	r1, [sp, #260]	; 0x104
 800c10a:	9143      	str	r1, [sp, #268]	; 0x10c
 800c10c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800c110:	2b2a      	cmp	r3, #42	; 0x2a
 800c112:	bf02      	ittt	eq
 800c114:	2310      	moveq	r3, #16
 800c116:	9341      	streq	r3, [sp, #260]	; 0x104
 800c118:	f10a 0502 	addeq.w	r5, sl, #2
 800c11c:	220a      	movs	r2, #10
 800c11e:	46aa      	mov	sl, r5
 800c120:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c124:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c128:	2b09      	cmp	r3, #9
 800c12a:	d91d      	bls.n	800c168 <__svfiscanf_r+0x114>
 800c12c:	4881      	ldr	r0, [pc, #516]	; (800c334 <__svfiscanf_r+0x2e0>)
 800c12e:	2203      	movs	r2, #3
 800c130:	f7f4 f84e 	bl	80001d0 <memchr>
 800c134:	b138      	cbz	r0, 800c146 <__svfiscanf_r+0xf2>
 800c136:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c138:	eba0 0009 	sub.w	r0, r0, r9
 800c13c:	2301      	movs	r3, #1
 800c13e:	4083      	lsls	r3, r0
 800c140:	4313      	orrs	r3, r2
 800c142:	9341      	str	r3, [sp, #260]	; 0x104
 800c144:	4655      	mov	r5, sl
 800c146:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c14a:	2b78      	cmp	r3, #120	; 0x78
 800c14c:	d807      	bhi.n	800c15e <__svfiscanf_r+0x10a>
 800c14e:	2b57      	cmp	r3, #87	; 0x57
 800c150:	d811      	bhi.n	800c176 <__svfiscanf_r+0x122>
 800c152:	2b25      	cmp	r3, #37	; 0x25
 800c154:	d0c5      	beq.n	800c0e2 <__svfiscanf_r+0x8e>
 800c156:	d857      	bhi.n	800c208 <__svfiscanf_r+0x1b4>
 800c158:	2b00      	cmp	r3, #0
 800c15a:	f000 80c6 	beq.w	800c2ea <__svfiscanf_r+0x296>
 800c15e:	2303      	movs	r3, #3
 800c160:	9347      	str	r3, [sp, #284]	; 0x11c
 800c162:	230a      	movs	r3, #10
 800c164:	9342      	str	r3, [sp, #264]	; 0x108
 800c166:	e07f      	b.n	800c268 <__svfiscanf_r+0x214>
 800c168:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c16a:	fb02 1103 	mla	r1, r2, r3, r1
 800c16e:	3930      	subs	r1, #48	; 0x30
 800c170:	9143      	str	r1, [sp, #268]	; 0x10c
 800c172:	4655      	mov	r5, sl
 800c174:	e7d3      	b.n	800c11e <__svfiscanf_r+0xca>
 800c176:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c17a:	2a20      	cmp	r2, #32
 800c17c:	d8ef      	bhi.n	800c15e <__svfiscanf_r+0x10a>
 800c17e:	a101      	add	r1, pc, #4	; (adr r1, 800c184 <__svfiscanf_r+0x130>)
 800c180:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c184:	0800c24b 	.word	0x0800c24b
 800c188:	0800c15f 	.word	0x0800c15f
 800c18c:	0800c15f 	.word	0x0800c15f
 800c190:	0800c2a9 	.word	0x0800c2a9
 800c194:	0800c15f 	.word	0x0800c15f
 800c198:	0800c15f 	.word	0x0800c15f
 800c19c:	0800c15f 	.word	0x0800c15f
 800c1a0:	0800c15f 	.word	0x0800c15f
 800c1a4:	0800c15f 	.word	0x0800c15f
 800c1a8:	0800c15f 	.word	0x0800c15f
 800c1ac:	0800c15f 	.word	0x0800c15f
 800c1b0:	0800c2bf 	.word	0x0800c2bf
 800c1b4:	0800c2a5 	.word	0x0800c2a5
 800c1b8:	0800c20f 	.word	0x0800c20f
 800c1bc:	0800c20f 	.word	0x0800c20f
 800c1c0:	0800c20f 	.word	0x0800c20f
 800c1c4:	0800c15f 	.word	0x0800c15f
 800c1c8:	0800c261 	.word	0x0800c261
 800c1cc:	0800c15f 	.word	0x0800c15f
 800c1d0:	0800c15f 	.word	0x0800c15f
 800c1d4:	0800c15f 	.word	0x0800c15f
 800c1d8:	0800c15f 	.word	0x0800c15f
 800c1dc:	0800c2cf 	.word	0x0800c2cf
 800c1e0:	0800c29d 	.word	0x0800c29d
 800c1e4:	0800c243 	.word	0x0800c243
 800c1e8:	0800c15f 	.word	0x0800c15f
 800c1ec:	0800c15f 	.word	0x0800c15f
 800c1f0:	0800c2cb 	.word	0x0800c2cb
 800c1f4:	0800c15f 	.word	0x0800c15f
 800c1f8:	0800c2a5 	.word	0x0800c2a5
 800c1fc:	0800c15f 	.word	0x0800c15f
 800c200:	0800c15f 	.word	0x0800c15f
 800c204:	0800c24b 	.word	0x0800c24b
 800c208:	3b45      	subs	r3, #69	; 0x45
 800c20a:	2b02      	cmp	r3, #2
 800c20c:	d8a7      	bhi.n	800c15e <__svfiscanf_r+0x10a>
 800c20e:	2305      	movs	r3, #5
 800c210:	e029      	b.n	800c266 <__svfiscanf_r+0x212>
 800c212:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c214:	4621      	mov	r1, r4
 800c216:	4630      	mov	r0, r6
 800c218:	4798      	blx	r3
 800c21a:	2800      	cmp	r0, #0
 800c21c:	f43f af66 	beq.w	800c0ec <__svfiscanf_r+0x98>
 800c220:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c222:	07da      	lsls	r2, r3, #31
 800c224:	f140 80a3 	bpl.w	800c36e <__svfiscanf_r+0x31a>
 800c228:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c22a:	2800      	cmp	r0, #0
 800c22c:	d066      	beq.n	800c2fc <__svfiscanf_r+0x2a8>
 800c22e:	89a3      	ldrh	r3, [r4, #12]
 800c230:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c234:	bf18      	it	ne
 800c236:	f04f 30ff 	movne.w	r0, #4294967295
 800c23a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c23e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c242:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c244:	f042 0220 	orr.w	r2, r2, #32
 800c248:	9241      	str	r2, [sp, #260]	; 0x104
 800c24a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c24c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c250:	9241      	str	r2, [sp, #260]	; 0x104
 800c252:	2210      	movs	r2, #16
 800c254:	2b6f      	cmp	r3, #111	; 0x6f
 800c256:	9242      	str	r2, [sp, #264]	; 0x108
 800c258:	bf34      	ite	cc
 800c25a:	2303      	movcc	r3, #3
 800c25c:	2304      	movcs	r3, #4
 800c25e:	e002      	b.n	800c266 <__svfiscanf_r+0x212>
 800c260:	2300      	movs	r3, #0
 800c262:	9342      	str	r3, [sp, #264]	; 0x108
 800c264:	2303      	movs	r3, #3
 800c266:	9347      	str	r3, [sp, #284]	; 0x11c
 800c268:	6863      	ldr	r3, [r4, #4]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	dd49      	ble.n	800c302 <__svfiscanf_r+0x2ae>
 800c26e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c270:	065b      	lsls	r3, r3, #25
 800c272:	d404      	bmi.n	800c27e <__svfiscanf_r+0x22a>
 800c274:	6823      	ldr	r3, [r4, #0]
 800c276:	781a      	ldrb	r2, [r3, #0]
 800c278:	5cba      	ldrb	r2, [r7, r2]
 800c27a:	0710      	lsls	r0, r2, #28
 800c27c:	d448      	bmi.n	800c310 <__svfiscanf_r+0x2bc>
 800c27e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c280:	2b02      	cmp	r3, #2
 800c282:	dc60      	bgt.n	800c346 <__svfiscanf_r+0x2f2>
 800c284:	466b      	mov	r3, sp
 800c286:	4622      	mov	r2, r4
 800c288:	a941      	add	r1, sp, #260	; 0x104
 800c28a:	4630      	mov	r0, r6
 800c28c:	f000 f898 	bl	800c3c0 <_scanf_chars>
 800c290:	2801      	cmp	r0, #1
 800c292:	d074      	beq.n	800c37e <__svfiscanf_r+0x32a>
 800c294:	2802      	cmp	r0, #2
 800c296:	f47f af10 	bne.w	800c0ba <__svfiscanf_r+0x66>
 800c29a:	e7c1      	b.n	800c220 <__svfiscanf_r+0x1cc>
 800c29c:	2308      	movs	r3, #8
 800c29e:	9342      	str	r3, [sp, #264]	; 0x108
 800c2a0:	2304      	movs	r3, #4
 800c2a2:	e7e0      	b.n	800c266 <__svfiscanf_r+0x212>
 800c2a4:	220a      	movs	r2, #10
 800c2a6:	e7d5      	b.n	800c254 <__svfiscanf_r+0x200>
 800c2a8:	4629      	mov	r1, r5
 800c2aa:	4640      	mov	r0, r8
 800c2ac:	f000 fb1c 	bl	800c8e8 <__sccl>
 800c2b0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c2b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2b6:	9341      	str	r3, [sp, #260]	; 0x104
 800c2b8:	4605      	mov	r5, r0
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	e7d3      	b.n	800c266 <__svfiscanf_r+0x212>
 800c2be:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c2c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2c4:	9341      	str	r3, [sp, #260]	; 0x104
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	e7cd      	b.n	800c266 <__svfiscanf_r+0x212>
 800c2ca:	2302      	movs	r3, #2
 800c2cc:	e7cb      	b.n	800c266 <__svfiscanf_r+0x212>
 800c2ce:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c2d0:	06c3      	lsls	r3, r0, #27
 800c2d2:	f53f aef2 	bmi.w	800c0ba <__svfiscanf_r+0x66>
 800c2d6:	9b00      	ldr	r3, [sp, #0]
 800c2d8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c2da:	1d19      	adds	r1, r3, #4
 800c2dc:	9100      	str	r1, [sp, #0]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	07c0      	lsls	r0, r0, #31
 800c2e2:	bf4c      	ite	mi
 800c2e4:	801a      	strhmi	r2, [r3, #0]
 800c2e6:	601a      	strpl	r2, [r3, #0]
 800c2e8:	e6e7      	b.n	800c0ba <__svfiscanf_r+0x66>
 800c2ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c2ec:	07d8      	lsls	r0, r3, #31
 800c2ee:	d405      	bmi.n	800c2fc <__svfiscanf_r+0x2a8>
 800c2f0:	89a3      	ldrh	r3, [r4, #12]
 800c2f2:	0599      	lsls	r1, r3, #22
 800c2f4:	d402      	bmi.n	800c2fc <__svfiscanf_r+0x2a8>
 800c2f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2f8:	f7fd f9c8 	bl	800968c <__retarget_lock_release_recursive>
 800c2fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c300:	e79b      	b.n	800c23a <__svfiscanf_r+0x1e6>
 800c302:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c304:	4621      	mov	r1, r4
 800c306:	4630      	mov	r0, r6
 800c308:	4798      	blx	r3
 800c30a:	2800      	cmp	r0, #0
 800c30c:	d0af      	beq.n	800c26e <__svfiscanf_r+0x21a>
 800c30e:	e787      	b.n	800c220 <__svfiscanf_r+0x1cc>
 800c310:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c312:	3201      	adds	r2, #1
 800c314:	9245      	str	r2, [sp, #276]	; 0x114
 800c316:	6862      	ldr	r2, [r4, #4]
 800c318:	3a01      	subs	r2, #1
 800c31a:	2a00      	cmp	r2, #0
 800c31c:	6062      	str	r2, [r4, #4]
 800c31e:	dd0b      	ble.n	800c338 <__svfiscanf_r+0x2e4>
 800c320:	3301      	adds	r3, #1
 800c322:	6023      	str	r3, [r4, #0]
 800c324:	e7a6      	b.n	800c274 <__svfiscanf_r+0x220>
 800c326:	bf00      	nop
 800c328:	0800c9cf 	.word	0x0800c9cf
 800c32c:	0800c7f9 	.word	0x0800c7f9
 800c330:	0800dfe9 	.word	0x0800dfe9
 800c334:	0800e0ef 	.word	0x0800e0ef
 800c338:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c33a:	4621      	mov	r1, r4
 800c33c:	4630      	mov	r0, r6
 800c33e:	4798      	blx	r3
 800c340:	2800      	cmp	r0, #0
 800c342:	d097      	beq.n	800c274 <__svfiscanf_r+0x220>
 800c344:	e76c      	b.n	800c220 <__svfiscanf_r+0x1cc>
 800c346:	2b04      	cmp	r3, #4
 800c348:	dc06      	bgt.n	800c358 <__svfiscanf_r+0x304>
 800c34a:	466b      	mov	r3, sp
 800c34c:	4622      	mov	r2, r4
 800c34e:	a941      	add	r1, sp, #260	; 0x104
 800c350:	4630      	mov	r0, r6
 800c352:	f000 f88f 	bl	800c474 <_scanf_i>
 800c356:	e79b      	b.n	800c290 <__svfiscanf_r+0x23c>
 800c358:	4b0e      	ldr	r3, [pc, #56]	; (800c394 <__svfiscanf_r+0x340>)
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	f43f aead 	beq.w	800c0ba <__svfiscanf_r+0x66>
 800c360:	466b      	mov	r3, sp
 800c362:	4622      	mov	r2, r4
 800c364:	a941      	add	r1, sp, #260	; 0x104
 800c366:	4630      	mov	r0, r6
 800c368:	f7fc fda8 	bl	8008ebc <_scanf_float>
 800c36c:	e790      	b.n	800c290 <__svfiscanf_r+0x23c>
 800c36e:	89a3      	ldrh	r3, [r4, #12]
 800c370:	0599      	lsls	r1, r3, #22
 800c372:	f53f af59 	bmi.w	800c228 <__svfiscanf_r+0x1d4>
 800c376:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c378:	f7fd f988 	bl	800968c <__retarget_lock_release_recursive>
 800c37c:	e754      	b.n	800c228 <__svfiscanf_r+0x1d4>
 800c37e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c380:	07da      	lsls	r2, r3, #31
 800c382:	d405      	bmi.n	800c390 <__svfiscanf_r+0x33c>
 800c384:	89a3      	ldrh	r3, [r4, #12]
 800c386:	059b      	lsls	r3, r3, #22
 800c388:	d402      	bmi.n	800c390 <__svfiscanf_r+0x33c>
 800c38a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c38c:	f7fd f97e 	bl	800968c <__retarget_lock_release_recursive>
 800c390:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c392:	e752      	b.n	800c23a <__svfiscanf_r+0x1e6>
 800c394:	08008ebd 	.word	0x08008ebd

0800c398 <_vfiscanf_r>:
 800c398:	b530      	push	{r4, r5, lr}
 800c39a:	4604      	mov	r4, r0
 800c39c:	b085      	sub	sp, #20
 800c39e:	b148      	cbz	r0, 800c3b4 <_vfiscanf_r+0x1c>
 800c3a0:	6a05      	ldr	r5, [r0, #32]
 800c3a2:	b93d      	cbnz	r5, 800c3b4 <_vfiscanf_r+0x1c>
 800c3a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c3a8:	9101      	str	r1, [sp, #4]
 800c3aa:	f7fd f823 	bl	80093f4 <__sinit>
 800c3ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c3b2:	9901      	ldr	r1, [sp, #4]
 800c3b4:	4620      	mov	r0, r4
 800c3b6:	b005      	add	sp, #20
 800c3b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c3bc:	f7ff be4a 	b.w	800c054 <__svfiscanf_r>

0800c3c0 <_scanf_chars>:
 800c3c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3c4:	4615      	mov	r5, r2
 800c3c6:	688a      	ldr	r2, [r1, #8]
 800c3c8:	4680      	mov	r8, r0
 800c3ca:	460c      	mov	r4, r1
 800c3cc:	b932      	cbnz	r2, 800c3dc <_scanf_chars+0x1c>
 800c3ce:	698a      	ldr	r2, [r1, #24]
 800c3d0:	2a00      	cmp	r2, #0
 800c3d2:	bf0c      	ite	eq
 800c3d4:	2201      	moveq	r2, #1
 800c3d6:	f04f 32ff 	movne.w	r2, #4294967295
 800c3da:	608a      	str	r2, [r1, #8]
 800c3dc:	6822      	ldr	r2, [r4, #0]
 800c3de:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800c470 <_scanf_chars+0xb0>
 800c3e2:	06d1      	lsls	r1, r2, #27
 800c3e4:	bf5f      	itttt	pl
 800c3e6:	681a      	ldrpl	r2, [r3, #0]
 800c3e8:	1d11      	addpl	r1, r2, #4
 800c3ea:	6019      	strpl	r1, [r3, #0]
 800c3ec:	6816      	ldrpl	r6, [r2, #0]
 800c3ee:	2700      	movs	r7, #0
 800c3f0:	69a0      	ldr	r0, [r4, #24]
 800c3f2:	b188      	cbz	r0, 800c418 <_scanf_chars+0x58>
 800c3f4:	2801      	cmp	r0, #1
 800c3f6:	d107      	bne.n	800c408 <_scanf_chars+0x48>
 800c3f8:	682a      	ldr	r2, [r5, #0]
 800c3fa:	7811      	ldrb	r1, [r2, #0]
 800c3fc:	6962      	ldr	r2, [r4, #20]
 800c3fe:	5c52      	ldrb	r2, [r2, r1]
 800c400:	b952      	cbnz	r2, 800c418 <_scanf_chars+0x58>
 800c402:	2f00      	cmp	r7, #0
 800c404:	d031      	beq.n	800c46a <_scanf_chars+0xaa>
 800c406:	e022      	b.n	800c44e <_scanf_chars+0x8e>
 800c408:	2802      	cmp	r0, #2
 800c40a:	d120      	bne.n	800c44e <_scanf_chars+0x8e>
 800c40c:	682b      	ldr	r3, [r5, #0]
 800c40e:	781b      	ldrb	r3, [r3, #0]
 800c410:	f819 3003 	ldrb.w	r3, [r9, r3]
 800c414:	071b      	lsls	r3, r3, #28
 800c416:	d41a      	bmi.n	800c44e <_scanf_chars+0x8e>
 800c418:	6823      	ldr	r3, [r4, #0]
 800c41a:	06da      	lsls	r2, r3, #27
 800c41c:	bf5e      	ittt	pl
 800c41e:	682b      	ldrpl	r3, [r5, #0]
 800c420:	781b      	ldrbpl	r3, [r3, #0]
 800c422:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c426:	682a      	ldr	r2, [r5, #0]
 800c428:	686b      	ldr	r3, [r5, #4]
 800c42a:	3201      	adds	r2, #1
 800c42c:	602a      	str	r2, [r5, #0]
 800c42e:	68a2      	ldr	r2, [r4, #8]
 800c430:	3b01      	subs	r3, #1
 800c432:	3a01      	subs	r2, #1
 800c434:	606b      	str	r3, [r5, #4]
 800c436:	3701      	adds	r7, #1
 800c438:	60a2      	str	r2, [r4, #8]
 800c43a:	b142      	cbz	r2, 800c44e <_scanf_chars+0x8e>
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	dcd7      	bgt.n	800c3f0 <_scanf_chars+0x30>
 800c440:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c444:	4629      	mov	r1, r5
 800c446:	4640      	mov	r0, r8
 800c448:	4798      	blx	r3
 800c44a:	2800      	cmp	r0, #0
 800c44c:	d0d0      	beq.n	800c3f0 <_scanf_chars+0x30>
 800c44e:	6823      	ldr	r3, [r4, #0]
 800c450:	f013 0310 	ands.w	r3, r3, #16
 800c454:	d105      	bne.n	800c462 <_scanf_chars+0xa2>
 800c456:	68e2      	ldr	r2, [r4, #12]
 800c458:	3201      	adds	r2, #1
 800c45a:	60e2      	str	r2, [r4, #12]
 800c45c:	69a2      	ldr	r2, [r4, #24]
 800c45e:	b102      	cbz	r2, 800c462 <_scanf_chars+0xa2>
 800c460:	7033      	strb	r3, [r6, #0]
 800c462:	6923      	ldr	r3, [r4, #16]
 800c464:	443b      	add	r3, r7
 800c466:	6123      	str	r3, [r4, #16]
 800c468:	2000      	movs	r0, #0
 800c46a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c46e:	bf00      	nop
 800c470:	0800dfe9 	.word	0x0800dfe9

0800c474 <_scanf_i>:
 800c474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c478:	4698      	mov	r8, r3
 800c47a:	4b74      	ldr	r3, [pc, #464]	; (800c64c <_scanf_i+0x1d8>)
 800c47c:	460c      	mov	r4, r1
 800c47e:	4682      	mov	sl, r0
 800c480:	4616      	mov	r6, r2
 800c482:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c486:	b087      	sub	sp, #28
 800c488:	ab03      	add	r3, sp, #12
 800c48a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c48e:	4b70      	ldr	r3, [pc, #448]	; (800c650 <_scanf_i+0x1dc>)
 800c490:	69a1      	ldr	r1, [r4, #24]
 800c492:	4a70      	ldr	r2, [pc, #448]	; (800c654 <_scanf_i+0x1e0>)
 800c494:	2903      	cmp	r1, #3
 800c496:	bf18      	it	ne
 800c498:	461a      	movne	r2, r3
 800c49a:	68a3      	ldr	r3, [r4, #8]
 800c49c:	9201      	str	r2, [sp, #4]
 800c49e:	1e5a      	subs	r2, r3, #1
 800c4a0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c4a4:	bf88      	it	hi
 800c4a6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c4aa:	4627      	mov	r7, r4
 800c4ac:	bf82      	ittt	hi
 800c4ae:	eb03 0905 	addhi.w	r9, r3, r5
 800c4b2:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c4b6:	60a3      	strhi	r3, [r4, #8]
 800c4b8:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c4bc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c4c0:	bf98      	it	ls
 800c4c2:	f04f 0900 	movls.w	r9, #0
 800c4c6:	6023      	str	r3, [r4, #0]
 800c4c8:	463d      	mov	r5, r7
 800c4ca:	f04f 0b00 	mov.w	fp, #0
 800c4ce:	6831      	ldr	r1, [r6, #0]
 800c4d0:	ab03      	add	r3, sp, #12
 800c4d2:	7809      	ldrb	r1, [r1, #0]
 800c4d4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c4d8:	2202      	movs	r2, #2
 800c4da:	f7f3 fe79 	bl	80001d0 <memchr>
 800c4de:	b328      	cbz	r0, 800c52c <_scanf_i+0xb8>
 800c4e0:	f1bb 0f01 	cmp.w	fp, #1
 800c4e4:	d159      	bne.n	800c59a <_scanf_i+0x126>
 800c4e6:	6862      	ldr	r2, [r4, #4]
 800c4e8:	b92a      	cbnz	r2, 800c4f6 <_scanf_i+0x82>
 800c4ea:	6822      	ldr	r2, [r4, #0]
 800c4ec:	2308      	movs	r3, #8
 800c4ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c4f2:	6063      	str	r3, [r4, #4]
 800c4f4:	6022      	str	r2, [r4, #0]
 800c4f6:	6822      	ldr	r2, [r4, #0]
 800c4f8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c4fc:	6022      	str	r2, [r4, #0]
 800c4fe:	68a2      	ldr	r2, [r4, #8]
 800c500:	1e51      	subs	r1, r2, #1
 800c502:	60a1      	str	r1, [r4, #8]
 800c504:	b192      	cbz	r2, 800c52c <_scanf_i+0xb8>
 800c506:	6832      	ldr	r2, [r6, #0]
 800c508:	1c51      	adds	r1, r2, #1
 800c50a:	6031      	str	r1, [r6, #0]
 800c50c:	7812      	ldrb	r2, [r2, #0]
 800c50e:	f805 2b01 	strb.w	r2, [r5], #1
 800c512:	6872      	ldr	r2, [r6, #4]
 800c514:	3a01      	subs	r2, #1
 800c516:	2a00      	cmp	r2, #0
 800c518:	6072      	str	r2, [r6, #4]
 800c51a:	dc07      	bgt.n	800c52c <_scanf_i+0xb8>
 800c51c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c520:	4631      	mov	r1, r6
 800c522:	4650      	mov	r0, sl
 800c524:	4790      	blx	r2
 800c526:	2800      	cmp	r0, #0
 800c528:	f040 8085 	bne.w	800c636 <_scanf_i+0x1c2>
 800c52c:	f10b 0b01 	add.w	fp, fp, #1
 800c530:	f1bb 0f03 	cmp.w	fp, #3
 800c534:	d1cb      	bne.n	800c4ce <_scanf_i+0x5a>
 800c536:	6863      	ldr	r3, [r4, #4]
 800c538:	b90b      	cbnz	r3, 800c53e <_scanf_i+0xca>
 800c53a:	230a      	movs	r3, #10
 800c53c:	6063      	str	r3, [r4, #4]
 800c53e:	6863      	ldr	r3, [r4, #4]
 800c540:	4945      	ldr	r1, [pc, #276]	; (800c658 <_scanf_i+0x1e4>)
 800c542:	6960      	ldr	r0, [r4, #20]
 800c544:	1ac9      	subs	r1, r1, r3
 800c546:	f000 f9cf 	bl	800c8e8 <__sccl>
 800c54a:	f04f 0b00 	mov.w	fp, #0
 800c54e:	68a3      	ldr	r3, [r4, #8]
 800c550:	6822      	ldr	r2, [r4, #0]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d03d      	beq.n	800c5d2 <_scanf_i+0x15e>
 800c556:	6831      	ldr	r1, [r6, #0]
 800c558:	6960      	ldr	r0, [r4, #20]
 800c55a:	f891 c000 	ldrb.w	ip, [r1]
 800c55e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c562:	2800      	cmp	r0, #0
 800c564:	d035      	beq.n	800c5d2 <_scanf_i+0x15e>
 800c566:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c56a:	d124      	bne.n	800c5b6 <_scanf_i+0x142>
 800c56c:	0510      	lsls	r0, r2, #20
 800c56e:	d522      	bpl.n	800c5b6 <_scanf_i+0x142>
 800c570:	f10b 0b01 	add.w	fp, fp, #1
 800c574:	f1b9 0f00 	cmp.w	r9, #0
 800c578:	d003      	beq.n	800c582 <_scanf_i+0x10e>
 800c57a:	3301      	adds	r3, #1
 800c57c:	f109 39ff 	add.w	r9, r9, #4294967295
 800c580:	60a3      	str	r3, [r4, #8]
 800c582:	6873      	ldr	r3, [r6, #4]
 800c584:	3b01      	subs	r3, #1
 800c586:	2b00      	cmp	r3, #0
 800c588:	6073      	str	r3, [r6, #4]
 800c58a:	dd1b      	ble.n	800c5c4 <_scanf_i+0x150>
 800c58c:	6833      	ldr	r3, [r6, #0]
 800c58e:	3301      	adds	r3, #1
 800c590:	6033      	str	r3, [r6, #0]
 800c592:	68a3      	ldr	r3, [r4, #8]
 800c594:	3b01      	subs	r3, #1
 800c596:	60a3      	str	r3, [r4, #8]
 800c598:	e7d9      	b.n	800c54e <_scanf_i+0xda>
 800c59a:	f1bb 0f02 	cmp.w	fp, #2
 800c59e:	d1ae      	bne.n	800c4fe <_scanf_i+0x8a>
 800c5a0:	6822      	ldr	r2, [r4, #0]
 800c5a2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c5a6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c5aa:	d1bf      	bne.n	800c52c <_scanf_i+0xb8>
 800c5ac:	2310      	movs	r3, #16
 800c5ae:	6063      	str	r3, [r4, #4]
 800c5b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c5b4:	e7a2      	b.n	800c4fc <_scanf_i+0x88>
 800c5b6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c5ba:	6022      	str	r2, [r4, #0]
 800c5bc:	780b      	ldrb	r3, [r1, #0]
 800c5be:	f805 3b01 	strb.w	r3, [r5], #1
 800c5c2:	e7de      	b.n	800c582 <_scanf_i+0x10e>
 800c5c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c5c8:	4631      	mov	r1, r6
 800c5ca:	4650      	mov	r0, sl
 800c5cc:	4798      	blx	r3
 800c5ce:	2800      	cmp	r0, #0
 800c5d0:	d0df      	beq.n	800c592 <_scanf_i+0x11e>
 800c5d2:	6823      	ldr	r3, [r4, #0]
 800c5d4:	05d9      	lsls	r1, r3, #23
 800c5d6:	d50d      	bpl.n	800c5f4 <_scanf_i+0x180>
 800c5d8:	42bd      	cmp	r5, r7
 800c5da:	d909      	bls.n	800c5f0 <_scanf_i+0x17c>
 800c5dc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c5e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c5e4:	4632      	mov	r2, r6
 800c5e6:	4650      	mov	r0, sl
 800c5e8:	4798      	blx	r3
 800c5ea:	f105 39ff 	add.w	r9, r5, #4294967295
 800c5ee:	464d      	mov	r5, r9
 800c5f0:	42bd      	cmp	r5, r7
 800c5f2:	d028      	beq.n	800c646 <_scanf_i+0x1d2>
 800c5f4:	6822      	ldr	r2, [r4, #0]
 800c5f6:	f012 0210 	ands.w	r2, r2, #16
 800c5fa:	d113      	bne.n	800c624 <_scanf_i+0x1b0>
 800c5fc:	702a      	strb	r2, [r5, #0]
 800c5fe:	6863      	ldr	r3, [r4, #4]
 800c600:	9e01      	ldr	r6, [sp, #4]
 800c602:	4639      	mov	r1, r7
 800c604:	4650      	mov	r0, sl
 800c606:	47b0      	blx	r6
 800c608:	f8d8 3000 	ldr.w	r3, [r8]
 800c60c:	6821      	ldr	r1, [r4, #0]
 800c60e:	1d1a      	adds	r2, r3, #4
 800c610:	f8c8 2000 	str.w	r2, [r8]
 800c614:	f011 0f20 	tst.w	r1, #32
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	d00f      	beq.n	800c63c <_scanf_i+0x1c8>
 800c61c:	6018      	str	r0, [r3, #0]
 800c61e:	68e3      	ldr	r3, [r4, #12]
 800c620:	3301      	adds	r3, #1
 800c622:	60e3      	str	r3, [r4, #12]
 800c624:	6923      	ldr	r3, [r4, #16]
 800c626:	1bed      	subs	r5, r5, r7
 800c628:	445d      	add	r5, fp
 800c62a:	442b      	add	r3, r5
 800c62c:	6123      	str	r3, [r4, #16]
 800c62e:	2000      	movs	r0, #0
 800c630:	b007      	add	sp, #28
 800c632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c636:	f04f 0b00 	mov.w	fp, #0
 800c63a:	e7ca      	b.n	800c5d2 <_scanf_i+0x15e>
 800c63c:	07ca      	lsls	r2, r1, #31
 800c63e:	bf4c      	ite	mi
 800c640:	8018      	strhmi	r0, [r3, #0]
 800c642:	6018      	strpl	r0, [r3, #0]
 800c644:	e7eb      	b.n	800c61e <_scanf_i+0x1aa>
 800c646:	2001      	movs	r0, #1
 800c648:	e7f2      	b.n	800c630 <_scanf_i+0x1bc>
 800c64a:	bf00      	nop
 800c64c:	0800d674 	.word	0x0800d674
 800c650:	0800d459 	.word	0x0800d459
 800c654:	0800bb19 	.word	0x0800bb19
 800c658:	0800e10a 	.word	0x0800e10a

0800c65c <__sflush_r>:
 800c65c:	898a      	ldrh	r2, [r1, #12]
 800c65e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c662:	4605      	mov	r5, r0
 800c664:	0710      	lsls	r0, r2, #28
 800c666:	460c      	mov	r4, r1
 800c668:	d458      	bmi.n	800c71c <__sflush_r+0xc0>
 800c66a:	684b      	ldr	r3, [r1, #4]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	dc05      	bgt.n	800c67c <__sflush_r+0x20>
 800c670:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c672:	2b00      	cmp	r3, #0
 800c674:	dc02      	bgt.n	800c67c <__sflush_r+0x20>
 800c676:	2000      	movs	r0, #0
 800c678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c67c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c67e:	2e00      	cmp	r6, #0
 800c680:	d0f9      	beq.n	800c676 <__sflush_r+0x1a>
 800c682:	2300      	movs	r3, #0
 800c684:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c688:	682f      	ldr	r7, [r5, #0]
 800c68a:	6a21      	ldr	r1, [r4, #32]
 800c68c:	602b      	str	r3, [r5, #0]
 800c68e:	d032      	beq.n	800c6f6 <__sflush_r+0x9a>
 800c690:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c692:	89a3      	ldrh	r3, [r4, #12]
 800c694:	075a      	lsls	r2, r3, #29
 800c696:	d505      	bpl.n	800c6a4 <__sflush_r+0x48>
 800c698:	6863      	ldr	r3, [r4, #4]
 800c69a:	1ac0      	subs	r0, r0, r3
 800c69c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c69e:	b10b      	cbz	r3, 800c6a4 <__sflush_r+0x48>
 800c6a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c6a2:	1ac0      	subs	r0, r0, r3
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	4602      	mov	r2, r0
 800c6a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c6aa:	6a21      	ldr	r1, [r4, #32]
 800c6ac:	4628      	mov	r0, r5
 800c6ae:	47b0      	blx	r6
 800c6b0:	1c43      	adds	r3, r0, #1
 800c6b2:	89a3      	ldrh	r3, [r4, #12]
 800c6b4:	d106      	bne.n	800c6c4 <__sflush_r+0x68>
 800c6b6:	6829      	ldr	r1, [r5, #0]
 800c6b8:	291d      	cmp	r1, #29
 800c6ba:	d82b      	bhi.n	800c714 <__sflush_r+0xb8>
 800c6bc:	4a29      	ldr	r2, [pc, #164]	; (800c764 <__sflush_r+0x108>)
 800c6be:	410a      	asrs	r2, r1
 800c6c0:	07d6      	lsls	r6, r2, #31
 800c6c2:	d427      	bmi.n	800c714 <__sflush_r+0xb8>
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	6062      	str	r2, [r4, #4]
 800c6c8:	04d9      	lsls	r1, r3, #19
 800c6ca:	6922      	ldr	r2, [r4, #16]
 800c6cc:	6022      	str	r2, [r4, #0]
 800c6ce:	d504      	bpl.n	800c6da <__sflush_r+0x7e>
 800c6d0:	1c42      	adds	r2, r0, #1
 800c6d2:	d101      	bne.n	800c6d8 <__sflush_r+0x7c>
 800c6d4:	682b      	ldr	r3, [r5, #0]
 800c6d6:	b903      	cbnz	r3, 800c6da <__sflush_r+0x7e>
 800c6d8:	6560      	str	r0, [r4, #84]	; 0x54
 800c6da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c6dc:	602f      	str	r7, [r5, #0]
 800c6de:	2900      	cmp	r1, #0
 800c6e0:	d0c9      	beq.n	800c676 <__sflush_r+0x1a>
 800c6e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c6e6:	4299      	cmp	r1, r3
 800c6e8:	d002      	beq.n	800c6f0 <__sflush_r+0x94>
 800c6ea:	4628      	mov	r0, r5
 800c6ec:	f7fd fe7e 	bl	800a3ec <_free_r>
 800c6f0:	2000      	movs	r0, #0
 800c6f2:	6360      	str	r0, [r4, #52]	; 0x34
 800c6f4:	e7c0      	b.n	800c678 <__sflush_r+0x1c>
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	4628      	mov	r0, r5
 800c6fa:	47b0      	blx	r6
 800c6fc:	1c41      	adds	r1, r0, #1
 800c6fe:	d1c8      	bne.n	800c692 <__sflush_r+0x36>
 800c700:	682b      	ldr	r3, [r5, #0]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d0c5      	beq.n	800c692 <__sflush_r+0x36>
 800c706:	2b1d      	cmp	r3, #29
 800c708:	d001      	beq.n	800c70e <__sflush_r+0xb2>
 800c70a:	2b16      	cmp	r3, #22
 800c70c:	d101      	bne.n	800c712 <__sflush_r+0xb6>
 800c70e:	602f      	str	r7, [r5, #0]
 800c710:	e7b1      	b.n	800c676 <__sflush_r+0x1a>
 800c712:	89a3      	ldrh	r3, [r4, #12]
 800c714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c718:	81a3      	strh	r3, [r4, #12]
 800c71a:	e7ad      	b.n	800c678 <__sflush_r+0x1c>
 800c71c:	690f      	ldr	r7, [r1, #16]
 800c71e:	2f00      	cmp	r7, #0
 800c720:	d0a9      	beq.n	800c676 <__sflush_r+0x1a>
 800c722:	0793      	lsls	r3, r2, #30
 800c724:	680e      	ldr	r6, [r1, #0]
 800c726:	bf08      	it	eq
 800c728:	694b      	ldreq	r3, [r1, #20]
 800c72a:	600f      	str	r7, [r1, #0]
 800c72c:	bf18      	it	ne
 800c72e:	2300      	movne	r3, #0
 800c730:	eba6 0807 	sub.w	r8, r6, r7
 800c734:	608b      	str	r3, [r1, #8]
 800c736:	f1b8 0f00 	cmp.w	r8, #0
 800c73a:	dd9c      	ble.n	800c676 <__sflush_r+0x1a>
 800c73c:	6a21      	ldr	r1, [r4, #32]
 800c73e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c740:	4643      	mov	r3, r8
 800c742:	463a      	mov	r2, r7
 800c744:	4628      	mov	r0, r5
 800c746:	47b0      	blx	r6
 800c748:	2800      	cmp	r0, #0
 800c74a:	dc06      	bgt.n	800c75a <__sflush_r+0xfe>
 800c74c:	89a3      	ldrh	r3, [r4, #12]
 800c74e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c752:	81a3      	strh	r3, [r4, #12]
 800c754:	f04f 30ff 	mov.w	r0, #4294967295
 800c758:	e78e      	b.n	800c678 <__sflush_r+0x1c>
 800c75a:	4407      	add	r7, r0
 800c75c:	eba8 0800 	sub.w	r8, r8, r0
 800c760:	e7e9      	b.n	800c736 <__sflush_r+0xda>
 800c762:	bf00      	nop
 800c764:	dfbffffe 	.word	0xdfbffffe

0800c768 <_fflush_r>:
 800c768:	b538      	push	{r3, r4, r5, lr}
 800c76a:	690b      	ldr	r3, [r1, #16]
 800c76c:	4605      	mov	r5, r0
 800c76e:	460c      	mov	r4, r1
 800c770:	b913      	cbnz	r3, 800c778 <_fflush_r+0x10>
 800c772:	2500      	movs	r5, #0
 800c774:	4628      	mov	r0, r5
 800c776:	bd38      	pop	{r3, r4, r5, pc}
 800c778:	b118      	cbz	r0, 800c782 <_fflush_r+0x1a>
 800c77a:	6a03      	ldr	r3, [r0, #32]
 800c77c:	b90b      	cbnz	r3, 800c782 <_fflush_r+0x1a>
 800c77e:	f7fc fe39 	bl	80093f4 <__sinit>
 800c782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d0f3      	beq.n	800c772 <_fflush_r+0xa>
 800c78a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c78c:	07d0      	lsls	r0, r2, #31
 800c78e:	d404      	bmi.n	800c79a <_fflush_r+0x32>
 800c790:	0599      	lsls	r1, r3, #22
 800c792:	d402      	bmi.n	800c79a <_fflush_r+0x32>
 800c794:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c796:	f7fc ff78 	bl	800968a <__retarget_lock_acquire_recursive>
 800c79a:	4628      	mov	r0, r5
 800c79c:	4621      	mov	r1, r4
 800c79e:	f7ff ff5d 	bl	800c65c <__sflush_r>
 800c7a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c7a4:	07da      	lsls	r2, r3, #31
 800c7a6:	4605      	mov	r5, r0
 800c7a8:	d4e4      	bmi.n	800c774 <_fflush_r+0xc>
 800c7aa:	89a3      	ldrh	r3, [r4, #12]
 800c7ac:	059b      	lsls	r3, r3, #22
 800c7ae:	d4e1      	bmi.n	800c774 <_fflush_r+0xc>
 800c7b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c7b2:	f7fc ff6b 	bl	800968c <__retarget_lock_release_recursive>
 800c7b6:	e7dd      	b.n	800c774 <_fflush_r+0xc>

0800c7b8 <fiprintf>:
 800c7b8:	b40e      	push	{r1, r2, r3}
 800c7ba:	b503      	push	{r0, r1, lr}
 800c7bc:	4601      	mov	r1, r0
 800c7be:	ab03      	add	r3, sp, #12
 800c7c0:	4805      	ldr	r0, [pc, #20]	; (800c7d8 <fiprintf+0x20>)
 800c7c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7c6:	6800      	ldr	r0, [r0, #0]
 800c7c8:	9301      	str	r3, [sp, #4]
 800c7ca:	f7ff fb29 	bl	800be20 <_vfiprintf_r>
 800c7ce:	b002      	add	sp, #8
 800c7d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c7d4:	b003      	add	sp, #12
 800c7d6:	4770      	bx	lr
 800c7d8:	20000738 	.word	0x20000738

0800c7dc <lflush>:
 800c7dc:	898b      	ldrh	r3, [r1, #12]
 800c7de:	f003 0309 	and.w	r3, r3, #9
 800c7e2:	2b09      	cmp	r3, #9
 800c7e4:	d103      	bne.n	800c7ee <lflush+0x12>
 800c7e6:	4b03      	ldr	r3, [pc, #12]	; (800c7f4 <lflush+0x18>)
 800c7e8:	6818      	ldr	r0, [r3, #0]
 800c7ea:	f7ff bfbd 	b.w	800c768 <_fflush_r>
 800c7ee:	2000      	movs	r0, #0
 800c7f0:	4770      	bx	lr
 800c7f2:	bf00      	nop
 800c7f4:	20000738 	.word	0x20000738

0800c7f8 <__srefill_r>:
 800c7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7fa:	460c      	mov	r4, r1
 800c7fc:	4605      	mov	r5, r0
 800c7fe:	b118      	cbz	r0, 800c808 <__srefill_r+0x10>
 800c800:	6a03      	ldr	r3, [r0, #32]
 800c802:	b90b      	cbnz	r3, 800c808 <__srefill_r+0x10>
 800c804:	f7fc fdf6 	bl	80093f4 <__sinit>
 800c808:	2300      	movs	r3, #0
 800c80a:	6063      	str	r3, [r4, #4]
 800c80c:	89a3      	ldrh	r3, [r4, #12]
 800c80e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c812:	069e      	lsls	r6, r3, #26
 800c814:	d502      	bpl.n	800c81c <__srefill_r+0x24>
 800c816:	f04f 30ff 	mov.w	r0, #4294967295
 800c81a:	e05c      	b.n	800c8d6 <__srefill_r+0xde>
 800c81c:	0758      	lsls	r0, r3, #29
 800c81e:	d448      	bmi.n	800c8b2 <__srefill_r+0xba>
 800c820:	06d9      	lsls	r1, r3, #27
 800c822:	d405      	bmi.n	800c830 <__srefill_r+0x38>
 800c824:	2309      	movs	r3, #9
 800c826:	602b      	str	r3, [r5, #0]
 800c828:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c82c:	81a3      	strh	r3, [r4, #12]
 800c82e:	e7f2      	b.n	800c816 <__srefill_r+0x1e>
 800c830:	071a      	lsls	r2, r3, #28
 800c832:	d50b      	bpl.n	800c84c <__srefill_r+0x54>
 800c834:	4621      	mov	r1, r4
 800c836:	4628      	mov	r0, r5
 800c838:	f7ff ff96 	bl	800c768 <_fflush_r>
 800c83c:	2800      	cmp	r0, #0
 800c83e:	d1ea      	bne.n	800c816 <__srefill_r+0x1e>
 800c840:	89a3      	ldrh	r3, [r4, #12]
 800c842:	60a0      	str	r0, [r4, #8]
 800c844:	f023 0308 	bic.w	r3, r3, #8
 800c848:	81a3      	strh	r3, [r4, #12]
 800c84a:	61a0      	str	r0, [r4, #24]
 800c84c:	89a3      	ldrh	r3, [r4, #12]
 800c84e:	f043 0304 	orr.w	r3, r3, #4
 800c852:	81a3      	strh	r3, [r4, #12]
 800c854:	6923      	ldr	r3, [r4, #16]
 800c856:	b91b      	cbnz	r3, 800c860 <__srefill_r+0x68>
 800c858:	4621      	mov	r1, r4
 800c85a:	4628      	mov	r0, r5
 800c85c:	f000 fe31 	bl	800d4c2 <__smakebuf_r>
 800c860:	89a6      	ldrh	r6, [r4, #12]
 800c862:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800c866:	07b3      	lsls	r3, r6, #30
 800c868:	d00f      	beq.n	800c88a <__srefill_r+0x92>
 800c86a:	2301      	movs	r3, #1
 800c86c:	4a1b      	ldr	r2, [pc, #108]	; (800c8dc <__srefill_r+0xe4>)
 800c86e:	491c      	ldr	r1, [pc, #112]	; (800c8e0 <__srefill_r+0xe8>)
 800c870:	481c      	ldr	r0, [pc, #112]	; (800c8e4 <__srefill_r+0xec>)
 800c872:	81a3      	strh	r3, [r4, #12]
 800c874:	f006 0609 	and.w	r6, r6, #9
 800c878:	f7fc fdd4 	bl	8009424 <_fwalk_sglue>
 800c87c:	2e09      	cmp	r6, #9
 800c87e:	81a7      	strh	r7, [r4, #12]
 800c880:	d103      	bne.n	800c88a <__srefill_r+0x92>
 800c882:	4621      	mov	r1, r4
 800c884:	4628      	mov	r0, r5
 800c886:	f7ff fee9 	bl	800c65c <__sflush_r>
 800c88a:	6922      	ldr	r2, [r4, #16]
 800c88c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c88e:	6963      	ldr	r3, [r4, #20]
 800c890:	6a21      	ldr	r1, [r4, #32]
 800c892:	6022      	str	r2, [r4, #0]
 800c894:	4628      	mov	r0, r5
 800c896:	47b0      	blx	r6
 800c898:	2800      	cmp	r0, #0
 800c89a:	6060      	str	r0, [r4, #4]
 800c89c:	dc1c      	bgt.n	800c8d8 <__srefill_r+0xe0>
 800c89e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8a2:	bf17      	itett	ne
 800c8a4:	2200      	movne	r2, #0
 800c8a6:	f043 0320 	orreq.w	r3, r3, #32
 800c8aa:	6062      	strne	r2, [r4, #4]
 800c8ac:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800c8b0:	e7bc      	b.n	800c82c <__srefill_r+0x34>
 800c8b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8b4:	2900      	cmp	r1, #0
 800c8b6:	d0cd      	beq.n	800c854 <__srefill_r+0x5c>
 800c8b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8bc:	4299      	cmp	r1, r3
 800c8be:	d002      	beq.n	800c8c6 <__srefill_r+0xce>
 800c8c0:	4628      	mov	r0, r5
 800c8c2:	f7fd fd93 	bl	800a3ec <_free_r>
 800c8c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c8c8:	6063      	str	r3, [r4, #4]
 800c8ca:	2000      	movs	r0, #0
 800c8cc:	6360      	str	r0, [r4, #52]	; 0x34
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d0c0      	beq.n	800c854 <__srefill_r+0x5c>
 800c8d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c8d4:	6023      	str	r3, [r4, #0]
 800c8d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8d8:	2000      	movs	r0, #0
 800c8da:	e7fc      	b.n	800c8d6 <__srefill_r+0xde>
 800c8dc:	200006e0 	.word	0x200006e0
 800c8e0:	0800c7dd 	.word	0x0800c7dd
 800c8e4:	200006ec 	.word	0x200006ec

0800c8e8 <__sccl>:
 800c8e8:	b570      	push	{r4, r5, r6, lr}
 800c8ea:	780b      	ldrb	r3, [r1, #0]
 800c8ec:	4604      	mov	r4, r0
 800c8ee:	2b5e      	cmp	r3, #94	; 0x5e
 800c8f0:	bf0b      	itete	eq
 800c8f2:	784b      	ldrbeq	r3, [r1, #1]
 800c8f4:	1c4a      	addne	r2, r1, #1
 800c8f6:	1c8a      	addeq	r2, r1, #2
 800c8f8:	2100      	movne	r1, #0
 800c8fa:	bf08      	it	eq
 800c8fc:	2101      	moveq	r1, #1
 800c8fe:	3801      	subs	r0, #1
 800c900:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c904:	f800 1f01 	strb.w	r1, [r0, #1]!
 800c908:	42a8      	cmp	r0, r5
 800c90a:	d1fb      	bne.n	800c904 <__sccl+0x1c>
 800c90c:	b90b      	cbnz	r3, 800c912 <__sccl+0x2a>
 800c90e:	1e50      	subs	r0, r2, #1
 800c910:	bd70      	pop	{r4, r5, r6, pc}
 800c912:	f081 0101 	eor.w	r1, r1, #1
 800c916:	54e1      	strb	r1, [r4, r3]
 800c918:	4610      	mov	r0, r2
 800c91a:	4602      	mov	r2, r0
 800c91c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c920:	2d2d      	cmp	r5, #45	; 0x2d
 800c922:	d005      	beq.n	800c930 <__sccl+0x48>
 800c924:	2d5d      	cmp	r5, #93	; 0x5d
 800c926:	d016      	beq.n	800c956 <__sccl+0x6e>
 800c928:	2d00      	cmp	r5, #0
 800c92a:	d0f1      	beq.n	800c910 <__sccl+0x28>
 800c92c:	462b      	mov	r3, r5
 800c92e:	e7f2      	b.n	800c916 <__sccl+0x2e>
 800c930:	7846      	ldrb	r6, [r0, #1]
 800c932:	2e5d      	cmp	r6, #93	; 0x5d
 800c934:	d0fa      	beq.n	800c92c <__sccl+0x44>
 800c936:	42b3      	cmp	r3, r6
 800c938:	dcf8      	bgt.n	800c92c <__sccl+0x44>
 800c93a:	3002      	adds	r0, #2
 800c93c:	461a      	mov	r2, r3
 800c93e:	3201      	adds	r2, #1
 800c940:	4296      	cmp	r6, r2
 800c942:	54a1      	strb	r1, [r4, r2]
 800c944:	dcfb      	bgt.n	800c93e <__sccl+0x56>
 800c946:	1af2      	subs	r2, r6, r3
 800c948:	3a01      	subs	r2, #1
 800c94a:	1c5d      	adds	r5, r3, #1
 800c94c:	42b3      	cmp	r3, r6
 800c94e:	bfa8      	it	ge
 800c950:	2200      	movge	r2, #0
 800c952:	18ab      	adds	r3, r5, r2
 800c954:	e7e1      	b.n	800c91a <__sccl+0x32>
 800c956:	4610      	mov	r0, r2
 800c958:	e7da      	b.n	800c910 <__sccl+0x28>

0800c95a <__submore>:
 800c95a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c95e:	460c      	mov	r4, r1
 800c960:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c962:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c966:	4299      	cmp	r1, r3
 800c968:	d11d      	bne.n	800c9a6 <__submore+0x4c>
 800c96a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c96e:	f7fb fd83 	bl	8008478 <_malloc_r>
 800c972:	b918      	cbnz	r0, 800c97c <__submore+0x22>
 800c974:	f04f 30ff 	mov.w	r0, #4294967295
 800c978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c97c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c980:	63a3      	str	r3, [r4, #56]	; 0x38
 800c982:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c986:	6360      	str	r0, [r4, #52]	; 0x34
 800c988:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c98c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c990:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c994:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c998:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c99c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c9a0:	6020      	str	r0, [r4, #0]
 800c9a2:	2000      	movs	r0, #0
 800c9a4:	e7e8      	b.n	800c978 <__submore+0x1e>
 800c9a6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c9a8:	0077      	lsls	r7, r6, #1
 800c9aa:	463a      	mov	r2, r7
 800c9ac:	f7fb fdf0 	bl	8008590 <_realloc_r>
 800c9b0:	4605      	mov	r5, r0
 800c9b2:	2800      	cmp	r0, #0
 800c9b4:	d0de      	beq.n	800c974 <__submore+0x1a>
 800c9b6:	eb00 0806 	add.w	r8, r0, r6
 800c9ba:	4601      	mov	r1, r0
 800c9bc:	4632      	mov	r2, r6
 800c9be:	4640      	mov	r0, r8
 800c9c0:	f7fc fe65 	bl	800968e <memcpy>
 800c9c4:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c9c8:	f8c4 8000 	str.w	r8, [r4]
 800c9cc:	e7e9      	b.n	800c9a2 <__submore+0x48>

0800c9ce <_ungetc_r>:
 800c9ce:	b570      	push	{r4, r5, r6, lr}
 800c9d0:	4614      	mov	r4, r2
 800c9d2:	1c4a      	adds	r2, r1, #1
 800c9d4:	4606      	mov	r6, r0
 800c9d6:	460d      	mov	r5, r1
 800c9d8:	d103      	bne.n	800c9e2 <_ungetc_r+0x14>
 800c9da:	f04f 35ff 	mov.w	r5, #4294967295
 800c9de:	4628      	mov	r0, r5
 800c9e0:	bd70      	pop	{r4, r5, r6, pc}
 800c9e2:	b118      	cbz	r0, 800c9ec <_ungetc_r+0x1e>
 800c9e4:	6a03      	ldr	r3, [r0, #32]
 800c9e6:	b90b      	cbnz	r3, 800c9ec <_ungetc_r+0x1e>
 800c9e8:	f7fc fd04 	bl	80093f4 <__sinit>
 800c9ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c9ee:	07db      	lsls	r3, r3, #31
 800c9f0:	d405      	bmi.n	800c9fe <_ungetc_r+0x30>
 800c9f2:	89a3      	ldrh	r3, [r4, #12]
 800c9f4:	0598      	lsls	r0, r3, #22
 800c9f6:	d402      	bmi.n	800c9fe <_ungetc_r+0x30>
 800c9f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9fa:	f7fc fe46 	bl	800968a <__retarget_lock_acquire_recursive>
 800c9fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca02:	f023 0320 	bic.w	r3, r3, #32
 800ca06:	0759      	lsls	r1, r3, #29
 800ca08:	81a3      	strh	r3, [r4, #12]
 800ca0a:	b29a      	uxth	r2, r3
 800ca0c:	d423      	bmi.n	800ca56 <_ungetc_r+0x88>
 800ca0e:	06d3      	lsls	r3, r2, #27
 800ca10:	d409      	bmi.n	800ca26 <_ungetc_r+0x58>
 800ca12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca14:	07dd      	lsls	r5, r3, #31
 800ca16:	d4e0      	bmi.n	800c9da <_ungetc_r+0xc>
 800ca18:	f412 7f00 	tst.w	r2, #512	; 0x200
 800ca1c:	d1dd      	bne.n	800c9da <_ungetc_r+0xc>
 800ca1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca20:	f7fc fe34 	bl	800968c <__retarget_lock_release_recursive>
 800ca24:	e7d9      	b.n	800c9da <_ungetc_r+0xc>
 800ca26:	0710      	lsls	r0, r2, #28
 800ca28:	d511      	bpl.n	800ca4e <_ungetc_r+0x80>
 800ca2a:	4621      	mov	r1, r4
 800ca2c:	4630      	mov	r0, r6
 800ca2e:	f7ff fe9b 	bl	800c768 <_fflush_r>
 800ca32:	b130      	cbz	r0, 800ca42 <_ungetc_r+0x74>
 800ca34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca36:	07d9      	lsls	r1, r3, #31
 800ca38:	d4cf      	bmi.n	800c9da <_ungetc_r+0xc>
 800ca3a:	89a3      	ldrh	r3, [r4, #12]
 800ca3c:	f413 7f00 	tst.w	r3, #512	; 0x200
 800ca40:	e7ec      	b.n	800ca1c <_ungetc_r+0x4e>
 800ca42:	89a3      	ldrh	r3, [r4, #12]
 800ca44:	60a0      	str	r0, [r4, #8]
 800ca46:	f023 0308 	bic.w	r3, r3, #8
 800ca4a:	81a3      	strh	r3, [r4, #12]
 800ca4c:	61a0      	str	r0, [r4, #24]
 800ca4e:	89a3      	ldrh	r3, [r4, #12]
 800ca50:	f043 0304 	orr.w	r3, r3, #4
 800ca54:	81a3      	strh	r3, [r4, #12]
 800ca56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ca58:	6862      	ldr	r2, [r4, #4]
 800ca5a:	b2ed      	uxtb	r5, r5
 800ca5c:	b1d3      	cbz	r3, 800ca94 <_ungetc_r+0xc6>
 800ca5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ca60:	4293      	cmp	r3, r2
 800ca62:	dc05      	bgt.n	800ca70 <_ungetc_r+0xa2>
 800ca64:	4621      	mov	r1, r4
 800ca66:	4630      	mov	r0, r6
 800ca68:	f7ff ff77 	bl	800c95a <__submore>
 800ca6c:	2800      	cmp	r0, #0
 800ca6e:	d1e1      	bne.n	800ca34 <_ungetc_r+0x66>
 800ca70:	6823      	ldr	r3, [r4, #0]
 800ca72:	1e5a      	subs	r2, r3, #1
 800ca74:	6022      	str	r2, [r4, #0]
 800ca76:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ca7a:	6863      	ldr	r3, [r4, #4]
 800ca7c:	3301      	adds	r3, #1
 800ca7e:	6063      	str	r3, [r4, #4]
 800ca80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca82:	07da      	lsls	r2, r3, #31
 800ca84:	d4ab      	bmi.n	800c9de <_ungetc_r+0x10>
 800ca86:	89a3      	ldrh	r3, [r4, #12]
 800ca88:	059b      	lsls	r3, r3, #22
 800ca8a:	d4a8      	bmi.n	800c9de <_ungetc_r+0x10>
 800ca8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca8e:	f7fc fdfd 	bl	800968c <__retarget_lock_release_recursive>
 800ca92:	e7a4      	b.n	800c9de <_ungetc_r+0x10>
 800ca94:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800ca96:	6920      	ldr	r0, [r4, #16]
 800ca98:	6823      	ldr	r3, [r4, #0]
 800ca9a:	f001 0101 	and.w	r1, r1, #1
 800ca9e:	b160      	cbz	r0, 800caba <_ungetc_r+0xec>
 800caa0:	4298      	cmp	r0, r3
 800caa2:	d20a      	bcs.n	800caba <_ungetc_r+0xec>
 800caa4:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800caa8:	42a8      	cmp	r0, r5
 800caaa:	d106      	bne.n	800caba <_ungetc_r+0xec>
 800caac:	3b01      	subs	r3, #1
 800caae:	3201      	adds	r2, #1
 800cab0:	6023      	str	r3, [r4, #0]
 800cab2:	6062      	str	r2, [r4, #4]
 800cab4:	2900      	cmp	r1, #0
 800cab6:	d192      	bne.n	800c9de <_ungetc_r+0x10>
 800cab8:	e7e5      	b.n	800ca86 <_ungetc_r+0xb8>
 800caba:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800cabe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cac2:	6363      	str	r3, [r4, #52]	; 0x34
 800cac4:	2303      	movs	r3, #3
 800cac6:	63a3      	str	r3, [r4, #56]	; 0x38
 800cac8:	4623      	mov	r3, r4
 800caca:	f803 5f46 	strb.w	r5, [r3, #70]!
 800cace:	6023      	str	r3, [r4, #0]
 800cad0:	2301      	movs	r3, #1
 800cad2:	6063      	str	r3, [r4, #4]
 800cad4:	e7ee      	b.n	800cab4 <_ungetc_r+0xe6>

0800cad6 <__swbuf_r>:
 800cad6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cad8:	460e      	mov	r6, r1
 800cada:	4614      	mov	r4, r2
 800cadc:	4605      	mov	r5, r0
 800cade:	b118      	cbz	r0, 800cae8 <__swbuf_r+0x12>
 800cae0:	6a03      	ldr	r3, [r0, #32]
 800cae2:	b90b      	cbnz	r3, 800cae8 <__swbuf_r+0x12>
 800cae4:	f7fc fc86 	bl	80093f4 <__sinit>
 800cae8:	69a3      	ldr	r3, [r4, #24]
 800caea:	60a3      	str	r3, [r4, #8]
 800caec:	89a3      	ldrh	r3, [r4, #12]
 800caee:	071a      	lsls	r2, r3, #28
 800caf0:	d525      	bpl.n	800cb3e <__swbuf_r+0x68>
 800caf2:	6923      	ldr	r3, [r4, #16]
 800caf4:	b31b      	cbz	r3, 800cb3e <__swbuf_r+0x68>
 800caf6:	6823      	ldr	r3, [r4, #0]
 800caf8:	6922      	ldr	r2, [r4, #16]
 800cafa:	1a98      	subs	r0, r3, r2
 800cafc:	6963      	ldr	r3, [r4, #20]
 800cafe:	b2f6      	uxtb	r6, r6
 800cb00:	4283      	cmp	r3, r0
 800cb02:	4637      	mov	r7, r6
 800cb04:	dc04      	bgt.n	800cb10 <__swbuf_r+0x3a>
 800cb06:	4621      	mov	r1, r4
 800cb08:	4628      	mov	r0, r5
 800cb0a:	f7ff fe2d 	bl	800c768 <_fflush_r>
 800cb0e:	b9e0      	cbnz	r0, 800cb4a <__swbuf_r+0x74>
 800cb10:	68a3      	ldr	r3, [r4, #8]
 800cb12:	3b01      	subs	r3, #1
 800cb14:	60a3      	str	r3, [r4, #8]
 800cb16:	6823      	ldr	r3, [r4, #0]
 800cb18:	1c5a      	adds	r2, r3, #1
 800cb1a:	6022      	str	r2, [r4, #0]
 800cb1c:	701e      	strb	r6, [r3, #0]
 800cb1e:	6962      	ldr	r2, [r4, #20]
 800cb20:	1c43      	adds	r3, r0, #1
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d004      	beq.n	800cb30 <__swbuf_r+0x5a>
 800cb26:	89a3      	ldrh	r3, [r4, #12]
 800cb28:	07db      	lsls	r3, r3, #31
 800cb2a:	d506      	bpl.n	800cb3a <__swbuf_r+0x64>
 800cb2c:	2e0a      	cmp	r6, #10
 800cb2e:	d104      	bne.n	800cb3a <__swbuf_r+0x64>
 800cb30:	4621      	mov	r1, r4
 800cb32:	4628      	mov	r0, r5
 800cb34:	f7ff fe18 	bl	800c768 <_fflush_r>
 800cb38:	b938      	cbnz	r0, 800cb4a <__swbuf_r+0x74>
 800cb3a:	4638      	mov	r0, r7
 800cb3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb3e:	4621      	mov	r1, r4
 800cb40:	4628      	mov	r0, r5
 800cb42:	f000 f805 	bl	800cb50 <__swsetup_r>
 800cb46:	2800      	cmp	r0, #0
 800cb48:	d0d5      	beq.n	800caf6 <__swbuf_r+0x20>
 800cb4a:	f04f 37ff 	mov.w	r7, #4294967295
 800cb4e:	e7f4      	b.n	800cb3a <__swbuf_r+0x64>

0800cb50 <__swsetup_r>:
 800cb50:	b538      	push	{r3, r4, r5, lr}
 800cb52:	4b2a      	ldr	r3, [pc, #168]	; (800cbfc <__swsetup_r+0xac>)
 800cb54:	4605      	mov	r5, r0
 800cb56:	6818      	ldr	r0, [r3, #0]
 800cb58:	460c      	mov	r4, r1
 800cb5a:	b118      	cbz	r0, 800cb64 <__swsetup_r+0x14>
 800cb5c:	6a03      	ldr	r3, [r0, #32]
 800cb5e:	b90b      	cbnz	r3, 800cb64 <__swsetup_r+0x14>
 800cb60:	f7fc fc48 	bl	80093f4 <__sinit>
 800cb64:	89a3      	ldrh	r3, [r4, #12]
 800cb66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb6a:	0718      	lsls	r0, r3, #28
 800cb6c:	d422      	bmi.n	800cbb4 <__swsetup_r+0x64>
 800cb6e:	06d9      	lsls	r1, r3, #27
 800cb70:	d407      	bmi.n	800cb82 <__swsetup_r+0x32>
 800cb72:	2309      	movs	r3, #9
 800cb74:	602b      	str	r3, [r5, #0]
 800cb76:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cb7a:	81a3      	strh	r3, [r4, #12]
 800cb7c:	f04f 30ff 	mov.w	r0, #4294967295
 800cb80:	e034      	b.n	800cbec <__swsetup_r+0x9c>
 800cb82:	0758      	lsls	r0, r3, #29
 800cb84:	d512      	bpl.n	800cbac <__swsetup_r+0x5c>
 800cb86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb88:	b141      	cbz	r1, 800cb9c <__swsetup_r+0x4c>
 800cb8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb8e:	4299      	cmp	r1, r3
 800cb90:	d002      	beq.n	800cb98 <__swsetup_r+0x48>
 800cb92:	4628      	mov	r0, r5
 800cb94:	f7fd fc2a 	bl	800a3ec <_free_r>
 800cb98:	2300      	movs	r3, #0
 800cb9a:	6363      	str	r3, [r4, #52]	; 0x34
 800cb9c:	89a3      	ldrh	r3, [r4, #12]
 800cb9e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cba2:	81a3      	strh	r3, [r4, #12]
 800cba4:	2300      	movs	r3, #0
 800cba6:	6063      	str	r3, [r4, #4]
 800cba8:	6923      	ldr	r3, [r4, #16]
 800cbaa:	6023      	str	r3, [r4, #0]
 800cbac:	89a3      	ldrh	r3, [r4, #12]
 800cbae:	f043 0308 	orr.w	r3, r3, #8
 800cbb2:	81a3      	strh	r3, [r4, #12]
 800cbb4:	6923      	ldr	r3, [r4, #16]
 800cbb6:	b94b      	cbnz	r3, 800cbcc <__swsetup_r+0x7c>
 800cbb8:	89a3      	ldrh	r3, [r4, #12]
 800cbba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cbbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbc2:	d003      	beq.n	800cbcc <__swsetup_r+0x7c>
 800cbc4:	4621      	mov	r1, r4
 800cbc6:	4628      	mov	r0, r5
 800cbc8:	f000 fc7b 	bl	800d4c2 <__smakebuf_r>
 800cbcc:	89a0      	ldrh	r0, [r4, #12]
 800cbce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cbd2:	f010 0301 	ands.w	r3, r0, #1
 800cbd6:	d00a      	beq.n	800cbee <__swsetup_r+0x9e>
 800cbd8:	2300      	movs	r3, #0
 800cbda:	60a3      	str	r3, [r4, #8]
 800cbdc:	6963      	ldr	r3, [r4, #20]
 800cbde:	425b      	negs	r3, r3
 800cbe0:	61a3      	str	r3, [r4, #24]
 800cbe2:	6923      	ldr	r3, [r4, #16]
 800cbe4:	b943      	cbnz	r3, 800cbf8 <__swsetup_r+0xa8>
 800cbe6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cbea:	d1c4      	bne.n	800cb76 <__swsetup_r+0x26>
 800cbec:	bd38      	pop	{r3, r4, r5, pc}
 800cbee:	0781      	lsls	r1, r0, #30
 800cbf0:	bf58      	it	pl
 800cbf2:	6963      	ldrpl	r3, [r4, #20]
 800cbf4:	60a3      	str	r3, [r4, #8]
 800cbf6:	e7f4      	b.n	800cbe2 <__swsetup_r+0x92>
 800cbf8:	2000      	movs	r0, #0
 800cbfa:	e7f7      	b.n	800cbec <__swsetup_r+0x9c>
 800cbfc:	20000738 	.word	0x20000738

0800cc00 <memmove>:
 800cc00:	4288      	cmp	r0, r1
 800cc02:	b510      	push	{r4, lr}
 800cc04:	eb01 0402 	add.w	r4, r1, r2
 800cc08:	d902      	bls.n	800cc10 <memmove+0x10>
 800cc0a:	4284      	cmp	r4, r0
 800cc0c:	4623      	mov	r3, r4
 800cc0e:	d807      	bhi.n	800cc20 <memmove+0x20>
 800cc10:	1e43      	subs	r3, r0, #1
 800cc12:	42a1      	cmp	r1, r4
 800cc14:	d008      	beq.n	800cc28 <memmove+0x28>
 800cc16:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cc1e:	e7f8      	b.n	800cc12 <memmove+0x12>
 800cc20:	4402      	add	r2, r0
 800cc22:	4601      	mov	r1, r0
 800cc24:	428a      	cmp	r2, r1
 800cc26:	d100      	bne.n	800cc2a <memmove+0x2a>
 800cc28:	bd10      	pop	{r4, pc}
 800cc2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cc32:	e7f7      	b.n	800cc24 <memmove+0x24>

0800cc34 <strncmp>:
 800cc34:	b510      	push	{r4, lr}
 800cc36:	b16a      	cbz	r2, 800cc54 <strncmp+0x20>
 800cc38:	3901      	subs	r1, #1
 800cc3a:	1884      	adds	r4, r0, r2
 800cc3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc40:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d103      	bne.n	800cc50 <strncmp+0x1c>
 800cc48:	42a0      	cmp	r0, r4
 800cc4a:	d001      	beq.n	800cc50 <strncmp+0x1c>
 800cc4c:	2a00      	cmp	r2, #0
 800cc4e:	d1f5      	bne.n	800cc3c <strncmp+0x8>
 800cc50:	1ad0      	subs	r0, r2, r3
 800cc52:	bd10      	pop	{r4, pc}
 800cc54:	4610      	mov	r0, r2
 800cc56:	e7fc      	b.n	800cc52 <strncmp+0x1e>

0800cc58 <nan>:
 800cc58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cc60 <nan+0x8>
 800cc5c:	4770      	bx	lr
 800cc5e:	bf00      	nop
 800cc60:	00000000 	.word	0x00000000
 800cc64:	7ff80000 	.word	0x7ff80000

0800cc68 <abort>:
 800cc68:	b508      	push	{r3, lr}
 800cc6a:	2006      	movs	r0, #6
 800cc6c:	f000 fc8e 	bl	800d58c <raise>
 800cc70:	2001      	movs	r0, #1
 800cc72:	f7f7 f934 	bl	8003ede <_exit>

0800cc76 <_calloc_r>:
 800cc76:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc78:	fba1 2402 	umull	r2, r4, r1, r2
 800cc7c:	b94c      	cbnz	r4, 800cc92 <_calloc_r+0x1c>
 800cc7e:	4611      	mov	r1, r2
 800cc80:	9201      	str	r2, [sp, #4]
 800cc82:	f7fb fbf9 	bl	8008478 <_malloc_r>
 800cc86:	9a01      	ldr	r2, [sp, #4]
 800cc88:	4605      	mov	r5, r0
 800cc8a:	b930      	cbnz	r0, 800cc9a <_calloc_r+0x24>
 800cc8c:	4628      	mov	r0, r5
 800cc8e:	b003      	add	sp, #12
 800cc90:	bd30      	pop	{r4, r5, pc}
 800cc92:	220c      	movs	r2, #12
 800cc94:	6002      	str	r2, [r0, #0]
 800cc96:	2500      	movs	r5, #0
 800cc98:	e7f8      	b.n	800cc8c <_calloc_r+0x16>
 800cc9a:	4621      	mov	r1, r4
 800cc9c:	f7fc fc67 	bl	800956e <memset>
 800cca0:	e7f4      	b.n	800cc8c <_calloc_r+0x16>

0800cca2 <rshift>:
 800cca2:	6903      	ldr	r3, [r0, #16]
 800cca4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cca8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ccac:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ccb0:	f100 0414 	add.w	r4, r0, #20
 800ccb4:	dd45      	ble.n	800cd42 <rshift+0xa0>
 800ccb6:	f011 011f 	ands.w	r1, r1, #31
 800ccba:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ccbe:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ccc2:	d10c      	bne.n	800ccde <rshift+0x3c>
 800ccc4:	f100 0710 	add.w	r7, r0, #16
 800ccc8:	4629      	mov	r1, r5
 800ccca:	42b1      	cmp	r1, r6
 800cccc:	d334      	bcc.n	800cd38 <rshift+0x96>
 800ccce:	1a9b      	subs	r3, r3, r2
 800ccd0:	009b      	lsls	r3, r3, #2
 800ccd2:	1eea      	subs	r2, r5, #3
 800ccd4:	4296      	cmp	r6, r2
 800ccd6:	bf38      	it	cc
 800ccd8:	2300      	movcc	r3, #0
 800ccda:	4423      	add	r3, r4
 800ccdc:	e015      	b.n	800cd0a <rshift+0x68>
 800ccde:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cce2:	f1c1 0820 	rsb	r8, r1, #32
 800cce6:	40cf      	lsrs	r7, r1
 800cce8:	f105 0e04 	add.w	lr, r5, #4
 800ccec:	46a1      	mov	r9, r4
 800ccee:	4576      	cmp	r6, lr
 800ccf0:	46f4      	mov	ip, lr
 800ccf2:	d815      	bhi.n	800cd20 <rshift+0x7e>
 800ccf4:	1a9a      	subs	r2, r3, r2
 800ccf6:	0092      	lsls	r2, r2, #2
 800ccf8:	3a04      	subs	r2, #4
 800ccfa:	3501      	adds	r5, #1
 800ccfc:	42ae      	cmp	r6, r5
 800ccfe:	bf38      	it	cc
 800cd00:	2200      	movcc	r2, #0
 800cd02:	18a3      	adds	r3, r4, r2
 800cd04:	50a7      	str	r7, [r4, r2]
 800cd06:	b107      	cbz	r7, 800cd0a <rshift+0x68>
 800cd08:	3304      	adds	r3, #4
 800cd0a:	1b1a      	subs	r2, r3, r4
 800cd0c:	42a3      	cmp	r3, r4
 800cd0e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cd12:	bf08      	it	eq
 800cd14:	2300      	moveq	r3, #0
 800cd16:	6102      	str	r2, [r0, #16]
 800cd18:	bf08      	it	eq
 800cd1a:	6143      	streq	r3, [r0, #20]
 800cd1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd20:	f8dc c000 	ldr.w	ip, [ip]
 800cd24:	fa0c fc08 	lsl.w	ip, ip, r8
 800cd28:	ea4c 0707 	orr.w	r7, ip, r7
 800cd2c:	f849 7b04 	str.w	r7, [r9], #4
 800cd30:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cd34:	40cf      	lsrs	r7, r1
 800cd36:	e7da      	b.n	800ccee <rshift+0x4c>
 800cd38:	f851 cb04 	ldr.w	ip, [r1], #4
 800cd3c:	f847 cf04 	str.w	ip, [r7, #4]!
 800cd40:	e7c3      	b.n	800ccca <rshift+0x28>
 800cd42:	4623      	mov	r3, r4
 800cd44:	e7e1      	b.n	800cd0a <rshift+0x68>

0800cd46 <__hexdig_fun>:
 800cd46:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cd4a:	2b09      	cmp	r3, #9
 800cd4c:	d802      	bhi.n	800cd54 <__hexdig_fun+0xe>
 800cd4e:	3820      	subs	r0, #32
 800cd50:	b2c0      	uxtb	r0, r0
 800cd52:	4770      	bx	lr
 800cd54:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cd58:	2b05      	cmp	r3, #5
 800cd5a:	d801      	bhi.n	800cd60 <__hexdig_fun+0x1a>
 800cd5c:	3847      	subs	r0, #71	; 0x47
 800cd5e:	e7f7      	b.n	800cd50 <__hexdig_fun+0xa>
 800cd60:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cd64:	2b05      	cmp	r3, #5
 800cd66:	d801      	bhi.n	800cd6c <__hexdig_fun+0x26>
 800cd68:	3827      	subs	r0, #39	; 0x27
 800cd6a:	e7f1      	b.n	800cd50 <__hexdig_fun+0xa>
 800cd6c:	2000      	movs	r0, #0
 800cd6e:	4770      	bx	lr

0800cd70 <__gethex>:
 800cd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd74:	4617      	mov	r7, r2
 800cd76:	680a      	ldr	r2, [r1, #0]
 800cd78:	b085      	sub	sp, #20
 800cd7a:	f102 0b02 	add.w	fp, r2, #2
 800cd7e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800cd82:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cd86:	4681      	mov	r9, r0
 800cd88:	468a      	mov	sl, r1
 800cd8a:	9302      	str	r3, [sp, #8]
 800cd8c:	32fe      	adds	r2, #254	; 0xfe
 800cd8e:	eb02 030b 	add.w	r3, r2, fp
 800cd92:	46d8      	mov	r8, fp
 800cd94:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800cd98:	9301      	str	r3, [sp, #4]
 800cd9a:	2830      	cmp	r0, #48	; 0x30
 800cd9c:	d0f7      	beq.n	800cd8e <__gethex+0x1e>
 800cd9e:	f7ff ffd2 	bl	800cd46 <__hexdig_fun>
 800cda2:	4604      	mov	r4, r0
 800cda4:	2800      	cmp	r0, #0
 800cda6:	d138      	bne.n	800ce1a <__gethex+0xaa>
 800cda8:	49a7      	ldr	r1, [pc, #668]	; (800d048 <__gethex+0x2d8>)
 800cdaa:	2201      	movs	r2, #1
 800cdac:	4640      	mov	r0, r8
 800cdae:	f7ff ff41 	bl	800cc34 <strncmp>
 800cdb2:	4606      	mov	r6, r0
 800cdb4:	2800      	cmp	r0, #0
 800cdb6:	d169      	bne.n	800ce8c <__gethex+0x11c>
 800cdb8:	f898 0001 	ldrb.w	r0, [r8, #1]
 800cdbc:	465d      	mov	r5, fp
 800cdbe:	f7ff ffc2 	bl	800cd46 <__hexdig_fun>
 800cdc2:	2800      	cmp	r0, #0
 800cdc4:	d064      	beq.n	800ce90 <__gethex+0x120>
 800cdc6:	465a      	mov	r2, fp
 800cdc8:	7810      	ldrb	r0, [r2, #0]
 800cdca:	2830      	cmp	r0, #48	; 0x30
 800cdcc:	4690      	mov	r8, r2
 800cdce:	f102 0201 	add.w	r2, r2, #1
 800cdd2:	d0f9      	beq.n	800cdc8 <__gethex+0x58>
 800cdd4:	f7ff ffb7 	bl	800cd46 <__hexdig_fun>
 800cdd8:	2301      	movs	r3, #1
 800cdda:	fab0 f480 	clz	r4, r0
 800cdde:	0964      	lsrs	r4, r4, #5
 800cde0:	465e      	mov	r6, fp
 800cde2:	9301      	str	r3, [sp, #4]
 800cde4:	4642      	mov	r2, r8
 800cde6:	4615      	mov	r5, r2
 800cde8:	3201      	adds	r2, #1
 800cdea:	7828      	ldrb	r0, [r5, #0]
 800cdec:	f7ff ffab 	bl	800cd46 <__hexdig_fun>
 800cdf0:	2800      	cmp	r0, #0
 800cdf2:	d1f8      	bne.n	800cde6 <__gethex+0x76>
 800cdf4:	4994      	ldr	r1, [pc, #592]	; (800d048 <__gethex+0x2d8>)
 800cdf6:	2201      	movs	r2, #1
 800cdf8:	4628      	mov	r0, r5
 800cdfa:	f7ff ff1b 	bl	800cc34 <strncmp>
 800cdfe:	b978      	cbnz	r0, 800ce20 <__gethex+0xb0>
 800ce00:	b946      	cbnz	r6, 800ce14 <__gethex+0xa4>
 800ce02:	1c6e      	adds	r6, r5, #1
 800ce04:	4632      	mov	r2, r6
 800ce06:	4615      	mov	r5, r2
 800ce08:	3201      	adds	r2, #1
 800ce0a:	7828      	ldrb	r0, [r5, #0]
 800ce0c:	f7ff ff9b 	bl	800cd46 <__hexdig_fun>
 800ce10:	2800      	cmp	r0, #0
 800ce12:	d1f8      	bne.n	800ce06 <__gethex+0x96>
 800ce14:	1b73      	subs	r3, r6, r5
 800ce16:	009e      	lsls	r6, r3, #2
 800ce18:	e004      	b.n	800ce24 <__gethex+0xb4>
 800ce1a:	2400      	movs	r4, #0
 800ce1c:	4626      	mov	r6, r4
 800ce1e:	e7e1      	b.n	800cde4 <__gethex+0x74>
 800ce20:	2e00      	cmp	r6, #0
 800ce22:	d1f7      	bne.n	800ce14 <__gethex+0xa4>
 800ce24:	782b      	ldrb	r3, [r5, #0]
 800ce26:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ce2a:	2b50      	cmp	r3, #80	; 0x50
 800ce2c:	d13d      	bne.n	800ceaa <__gethex+0x13a>
 800ce2e:	786b      	ldrb	r3, [r5, #1]
 800ce30:	2b2b      	cmp	r3, #43	; 0x2b
 800ce32:	d02f      	beq.n	800ce94 <__gethex+0x124>
 800ce34:	2b2d      	cmp	r3, #45	; 0x2d
 800ce36:	d031      	beq.n	800ce9c <__gethex+0x12c>
 800ce38:	1c69      	adds	r1, r5, #1
 800ce3a:	f04f 0b00 	mov.w	fp, #0
 800ce3e:	7808      	ldrb	r0, [r1, #0]
 800ce40:	f7ff ff81 	bl	800cd46 <__hexdig_fun>
 800ce44:	1e42      	subs	r2, r0, #1
 800ce46:	b2d2      	uxtb	r2, r2
 800ce48:	2a18      	cmp	r2, #24
 800ce4a:	d82e      	bhi.n	800ceaa <__gethex+0x13a>
 800ce4c:	f1a0 0210 	sub.w	r2, r0, #16
 800ce50:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ce54:	f7ff ff77 	bl	800cd46 <__hexdig_fun>
 800ce58:	f100 3cff 	add.w	ip, r0, #4294967295
 800ce5c:	fa5f fc8c 	uxtb.w	ip, ip
 800ce60:	f1bc 0f18 	cmp.w	ip, #24
 800ce64:	d91d      	bls.n	800cea2 <__gethex+0x132>
 800ce66:	f1bb 0f00 	cmp.w	fp, #0
 800ce6a:	d000      	beq.n	800ce6e <__gethex+0xfe>
 800ce6c:	4252      	negs	r2, r2
 800ce6e:	4416      	add	r6, r2
 800ce70:	f8ca 1000 	str.w	r1, [sl]
 800ce74:	b1dc      	cbz	r4, 800ceae <__gethex+0x13e>
 800ce76:	9b01      	ldr	r3, [sp, #4]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	bf14      	ite	ne
 800ce7c:	f04f 0800 	movne.w	r8, #0
 800ce80:	f04f 0806 	moveq.w	r8, #6
 800ce84:	4640      	mov	r0, r8
 800ce86:	b005      	add	sp, #20
 800ce88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce8c:	4645      	mov	r5, r8
 800ce8e:	4626      	mov	r6, r4
 800ce90:	2401      	movs	r4, #1
 800ce92:	e7c7      	b.n	800ce24 <__gethex+0xb4>
 800ce94:	f04f 0b00 	mov.w	fp, #0
 800ce98:	1ca9      	adds	r1, r5, #2
 800ce9a:	e7d0      	b.n	800ce3e <__gethex+0xce>
 800ce9c:	f04f 0b01 	mov.w	fp, #1
 800cea0:	e7fa      	b.n	800ce98 <__gethex+0x128>
 800cea2:	230a      	movs	r3, #10
 800cea4:	fb03 0002 	mla	r0, r3, r2, r0
 800cea8:	e7d0      	b.n	800ce4c <__gethex+0xdc>
 800ceaa:	4629      	mov	r1, r5
 800ceac:	e7e0      	b.n	800ce70 <__gethex+0x100>
 800ceae:	eba5 0308 	sub.w	r3, r5, r8
 800ceb2:	3b01      	subs	r3, #1
 800ceb4:	4621      	mov	r1, r4
 800ceb6:	2b07      	cmp	r3, #7
 800ceb8:	dc0a      	bgt.n	800ced0 <__gethex+0x160>
 800ceba:	4648      	mov	r0, r9
 800cebc:	f7fd fae2 	bl	800a484 <_Balloc>
 800cec0:	4604      	mov	r4, r0
 800cec2:	b940      	cbnz	r0, 800ced6 <__gethex+0x166>
 800cec4:	4b61      	ldr	r3, [pc, #388]	; (800d04c <__gethex+0x2dc>)
 800cec6:	4602      	mov	r2, r0
 800cec8:	21e4      	movs	r1, #228	; 0xe4
 800ceca:	4861      	ldr	r0, [pc, #388]	; (800d050 <__gethex+0x2e0>)
 800cecc:	f7fc fbf4 	bl	80096b8 <__assert_func>
 800ced0:	3101      	adds	r1, #1
 800ced2:	105b      	asrs	r3, r3, #1
 800ced4:	e7ef      	b.n	800ceb6 <__gethex+0x146>
 800ced6:	f100 0a14 	add.w	sl, r0, #20
 800ceda:	2300      	movs	r3, #0
 800cedc:	495a      	ldr	r1, [pc, #360]	; (800d048 <__gethex+0x2d8>)
 800cede:	f8cd a004 	str.w	sl, [sp, #4]
 800cee2:	469b      	mov	fp, r3
 800cee4:	45a8      	cmp	r8, r5
 800cee6:	d342      	bcc.n	800cf6e <__gethex+0x1fe>
 800cee8:	9801      	ldr	r0, [sp, #4]
 800ceea:	f840 bb04 	str.w	fp, [r0], #4
 800ceee:	eba0 000a 	sub.w	r0, r0, sl
 800cef2:	1080      	asrs	r0, r0, #2
 800cef4:	6120      	str	r0, [r4, #16]
 800cef6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800cefa:	4658      	mov	r0, fp
 800cefc:	f7fd fbb4 	bl	800a668 <__hi0bits>
 800cf00:	683d      	ldr	r5, [r7, #0]
 800cf02:	eba8 0000 	sub.w	r0, r8, r0
 800cf06:	42a8      	cmp	r0, r5
 800cf08:	dd59      	ble.n	800cfbe <__gethex+0x24e>
 800cf0a:	eba0 0805 	sub.w	r8, r0, r5
 800cf0e:	4641      	mov	r1, r8
 800cf10:	4620      	mov	r0, r4
 800cf12:	f7fd ff43 	bl	800ad9c <__any_on>
 800cf16:	4683      	mov	fp, r0
 800cf18:	b1b8      	cbz	r0, 800cf4a <__gethex+0x1da>
 800cf1a:	f108 33ff 	add.w	r3, r8, #4294967295
 800cf1e:	1159      	asrs	r1, r3, #5
 800cf20:	f003 021f 	and.w	r2, r3, #31
 800cf24:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cf28:	f04f 0b01 	mov.w	fp, #1
 800cf2c:	fa0b f202 	lsl.w	r2, fp, r2
 800cf30:	420a      	tst	r2, r1
 800cf32:	d00a      	beq.n	800cf4a <__gethex+0x1da>
 800cf34:	455b      	cmp	r3, fp
 800cf36:	dd06      	ble.n	800cf46 <__gethex+0x1d6>
 800cf38:	f1a8 0102 	sub.w	r1, r8, #2
 800cf3c:	4620      	mov	r0, r4
 800cf3e:	f7fd ff2d 	bl	800ad9c <__any_on>
 800cf42:	2800      	cmp	r0, #0
 800cf44:	d138      	bne.n	800cfb8 <__gethex+0x248>
 800cf46:	f04f 0b02 	mov.w	fp, #2
 800cf4a:	4641      	mov	r1, r8
 800cf4c:	4620      	mov	r0, r4
 800cf4e:	f7ff fea8 	bl	800cca2 <rshift>
 800cf52:	4446      	add	r6, r8
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	42b3      	cmp	r3, r6
 800cf58:	da41      	bge.n	800cfde <__gethex+0x26e>
 800cf5a:	4621      	mov	r1, r4
 800cf5c:	4648      	mov	r0, r9
 800cf5e:	f7fd fad1 	bl	800a504 <_Bfree>
 800cf62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cf64:	2300      	movs	r3, #0
 800cf66:	6013      	str	r3, [r2, #0]
 800cf68:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800cf6c:	e78a      	b.n	800ce84 <__gethex+0x114>
 800cf6e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800cf72:	2a2e      	cmp	r2, #46	; 0x2e
 800cf74:	d014      	beq.n	800cfa0 <__gethex+0x230>
 800cf76:	2b20      	cmp	r3, #32
 800cf78:	d106      	bne.n	800cf88 <__gethex+0x218>
 800cf7a:	9b01      	ldr	r3, [sp, #4]
 800cf7c:	f843 bb04 	str.w	fp, [r3], #4
 800cf80:	f04f 0b00 	mov.w	fp, #0
 800cf84:	9301      	str	r3, [sp, #4]
 800cf86:	465b      	mov	r3, fp
 800cf88:	7828      	ldrb	r0, [r5, #0]
 800cf8a:	9303      	str	r3, [sp, #12]
 800cf8c:	f7ff fedb 	bl	800cd46 <__hexdig_fun>
 800cf90:	9b03      	ldr	r3, [sp, #12]
 800cf92:	f000 000f 	and.w	r0, r0, #15
 800cf96:	4098      	lsls	r0, r3
 800cf98:	ea4b 0b00 	orr.w	fp, fp, r0
 800cf9c:	3304      	adds	r3, #4
 800cf9e:	e7a1      	b.n	800cee4 <__gethex+0x174>
 800cfa0:	45a8      	cmp	r8, r5
 800cfa2:	d8e8      	bhi.n	800cf76 <__gethex+0x206>
 800cfa4:	2201      	movs	r2, #1
 800cfa6:	4628      	mov	r0, r5
 800cfa8:	9303      	str	r3, [sp, #12]
 800cfaa:	f7ff fe43 	bl	800cc34 <strncmp>
 800cfae:	4926      	ldr	r1, [pc, #152]	; (800d048 <__gethex+0x2d8>)
 800cfb0:	9b03      	ldr	r3, [sp, #12]
 800cfb2:	2800      	cmp	r0, #0
 800cfb4:	d1df      	bne.n	800cf76 <__gethex+0x206>
 800cfb6:	e795      	b.n	800cee4 <__gethex+0x174>
 800cfb8:	f04f 0b03 	mov.w	fp, #3
 800cfbc:	e7c5      	b.n	800cf4a <__gethex+0x1da>
 800cfbe:	da0b      	bge.n	800cfd8 <__gethex+0x268>
 800cfc0:	eba5 0800 	sub.w	r8, r5, r0
 800cfc4:	4621      	mov	r1, r4
 800cfc6:	4642      	mov	r2, r8
 800cfc8:	4648      	mov	r0, r9
 800cfca:	f7fd fcb5 	bl	800a938 <__lshift>
 800cfce:	eba6 0608 	sub.w	r6, r6, r8
 800cfd2:	4604      	mov	r4, r0
 800cfd4:	f100 0a14 	add.w	sl, r0, #20
 800cfd8:	f04f 0b00 	mov.w	fp, #0
 800cfdc:	e7ba      	b.n	800cf54 <__gethex+0x1e4>
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	42b3      	cmp	r3, r6
 800cfe2:	dd73      	ble.n	800d0cc <__gethex+0x35c>
 800cfe4:	1b9e      	subs	r6, r3, r6
 800cfe6:	42b5      	cmp	r5, r6
 800cfe8:	dc34      	bgt.n	800d054 <__gethex+0x2e4>
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	2b02      	cmp	r3, #2
 800cfee:	d023      	beq.n	800d038 <__gethex+0x2c8>
 800cff0:	2b03      	cmp	r3, #3
 800cff2:	d025      	beq.n	800d040 <__gethex+0x2d0>
 800cff4:	2b01      	cmp	r3, #1
 800cff6:	d115      	bne.n	800d024 <__gethex+0x2b4>
 800cff8:	42b5      	cmp	r5, r6
 800cffa:	d113      	bne.n	800d024 <__gethex+0x2b4>
 800cffc:	2d01      	cmp	r5, #1
 800cffe:	d10b      	bne.n	800d018 <__gethex+0x2a8>
 800d000:	9a02      	ldr	r2, [sp, #8]
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6013      	str	r3, [r2, #0]
 800d006:	2301      	movs	r3, #1
 800d008:	6123      	str	r3, [r4, #16]
 800d00a:	f8ca 3000 	str.w	r3, [sl]
 800d00e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d010:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d014:	601c      	str	r4, [r3, #0]
 800d016:	e735      	b.n	800ce84 <__gethex+0x114>
 800d018:	1e69      	subs	r1, r5, #1
 800d01a:	4620      	mov	r0, r4
 800d01c:	f7fd febe 	bl	800ad9c <__any_on>
 800d020:	2800      	cmp	r0, #0
 800d022:	d1ed      	bne.n	800d000 <__gethex+0x290>
 800d024:	4621      	mov	r1, r4
 800d026:	4648      	mov	r0, r9
 800d028:	f7fd fa6c 	bl	800a504 <_Bfree>
 800d02c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d02e:	2300      	movs	r3, #0
 800d030:	6013      	str	r3, [r2, #0]
 800d032:	f04f 0850 	mov.w	r8, #80	; 0x50
 800d036:	e725      	b.n	800ce84 <__gethex+0x114>
 800d038:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d1f2      	bne.n	800d024 <__gethex+0x2b4>
 800d03e:	e7df      	b.n	800d000 <__gethex+0x290>
 800d040:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d042:	2b00      	cmp	r3, #0
 800d044:	d1dc      	bne.n	800d000 <__gethex+0x290>
 800d046:	e7ed      	b.n	800d024 <__gethex+0x2b4>
 800d048:	0800df94 	.word	0x0800df94
 800d04c:	0800de27 	.word	0x0800de27
 800d050:	0800e11d 	.word	0x0800e11d
 800d054:	f106 38ff 	add.w	r8, r6, #4294967295
 800d058:	f1bb 0f00 	cmp.w	fp, #0
 800d05c:	d133      	bne.n	800d0c6 <__gethex+0x356>
 800d05e:	f1b8 0f00 	cmp.w	r8, #0
 800d062:	d004      	beq.n	800d06e <__gethex+0x2fe>
 800d064:	4641      	mov	r1, r8
 800d066:	4620      	mov	r0, r4
 800d068:	f7fd fe98 	bl	800ad9c <__any_on>
 800d06c:	4683      	mov	fp, r0
 800d06e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d072:	2301      	movs	r3, #1
 800d074:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d078:	f008 081f 	and.w	r8, r8, #31
 800d07c:	fa03 f308 	lsl.w	r3, r3, r8
 800d080:	4213      	tst	r3, r2
 800d082:	4631      	mov	r1, r6
 800d084:	4620      	mov	r0, r4
 800d086:	bf18      	it	ne
 800d088:	f04b 0b02 	orrne.w	fp, fp, #2
 800d08c:	1bad      	subs	r5, r5, r6
 800d08e:	f7ff fe08 	bl	800cca2 <rshift>
 800d092:	687e      	ldr	r6, [r7, #4]
 800d094:	f04f 0802 	mov.w	r8, #2
 800d098:	f1bb 0f00 	cmp.w	fp, #0
 800d09c:	d04a      	beq.n	800d134 <__gethex+0x3c4>
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	2b02      	cmp	r3, #2
 800d0a2:	d016      	beq.n	800d0d2 <__gethex+0x362>
 800d0a4:	2b03      	cmp	r3, #3
 800d0a6:	d018      	beq.n	800d0da <__gethex+0x36a>
 800d0a8:	2b01      	cmp	r3, #1
 800d0aa:	d109      	bne.n	800d0c0 <__gethex+0x350>
 800d0ac:	f01b 0f02 	tst.w	fp, #2
 800d0b0:	d006      	beq.n	800d0c0 <__gethex+0x350>
 800d0b2:	f8da 3000 	ldr.w	r3, [sl]
 800d0b6:	ea4b 0b03 	orr.w	fp, fp, r3
 800d0ba:	f01b 0f01 	tst.w	fp, #1
 800d0be:	d10f      	bne.n	800d0e0 <__gethex+0x370>
 800d0c0:	f048 0810 	orr.w	r8, r8, #16
 800d0c4:	e036      	b.n	800d134 <__gethex+0x3c4>
 800d0c6:	f04f 0b01 	mov.w	fp, #1
 800d0ca:	e7d0      	b.n	800d06e <__gethex+0x2fe>
 800d0cc:	f04f 0801 	mov.w	r8, #1
 800d0d0:	e7e2      	b.n	800d098 <__gethex+0x328>
 800d0d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d0d4:	f1c3 0301 	rsb	r3, r3, #1
 800d0d8:	930f      	str	r3, [sp, #60]	; 0x3c
 800d0da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d0ef      	beq.n	800d0c0 <__gethex+0x350>
 800d0e0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d0e4:	f104 0214 	add.w	r2, r4, #20
 800d0e8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d0ec:	9301      	str	r3, [sp, #4]
 800d0ee:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	4694      	mov	ip, r2
 800d0f6:	f852 1b04 	ldr.w	r1, [r2], #4
 800d0fa:	f1b1 3fff 	cmp.w	r1, #4294967295
 800d0fe:	d01e      	beq.n	800d13e <__gethex+0x3ce>
 800d100:	3101      	adds	r1, #1
 800d102:	f8cc 1000 	str.w	r1, [ip]
 800d106:	f1b8 0f02 	cmp.w	r8, #2
 800d10a:	f104 0214 	add.w	r2, r4, #20
 800d10e:	d13d      	bne.n	800d18c <__gethex+0x41c>
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	3b01      	subs	r3, #1
 800d114:	42ab      	cmp	r3, r5
 800d116:	d10b      	bne.n	800d130 <__gethex+0x3c0>
 800d118:	1169      	asrs	r1, r5, #5
 800d11a:	2301      	movs	r3, #1
 800d11c:	f005 051f 	and.w	r5, r5, #31
 800d120:	fa03 f505 	lsl.w	r5, r3, r5
 800d124:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d128:	421d      	tst	r5, r3
 800d12a:	bf18      	it	ne
 800d12c:	f04f 0801 	movne.w	r8, #1
 800d130:	f048 0820 	orr.w	r8, r8, #32
 800d134:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d136:	601c      	str	r4, [r3, #0]
 800d138:	9b02      	ldr	r3, [sp, #8]
 800d13a:	601e      	str	r6, [r3, #0]
 800d13c:	e6a2      	b.n	800ce84 <__gethex+0x114>
 800d13e:	4290      	cmp	r0, r2
 800d140:	f842 3c04 	str.w	r3, [r2, #-4]
 800d144:	d8d6      	bhi.n	800d0f4 <__gethex+0x384>
 800d146:	68a2      	ldr	r2, [r4, #8]
 800d148:	4593      	cmp	fp, r2
 800d14a:	db17      	blt.n	800d17c <__gethex+0x40c>
 800d14c:	6861      	ldr	r1, [r4, #4]
 800d14e:	4648      	mov	r0, r9
 800d150:	3101      	adds	r1, #1
 800d152:	f7fd f997 	bl	800a484 <_Balloc>
 800d156:	4682      	mov	sl, r0
 800d158:	b918      	cbnz	r0, 800d162 <__gethex+0x3f2>
 800d15a:	4b1b      	ldr	r3, [pc, #108]	; (800d1c8 <__gethex+0x458>)
 800d15c:	4602      	mov	r2, r0
 800d15e:	2184      	movs	r1, #132	; 0x84
 800d160:	e6b3      	b.n	800ceca <__gethex+0x15a>
 800d162:	6922      	ldr	r2, [r4, #16]
 800d164:	3202      	adds	r2, #2
 800d166:	f104 010c 	add.w	r1, r4, #12
 800d16a:	0092      	lsls	r2, r2, #2
 800d16c:	300c      	adds	r0, #12
 800d16e:	f7fc fa8e 	bl	800968e <memcpy>
 800d172:	4621      	mov	r1, r4
 800d174:	4648      	mov	r0, r9
 800d176:	f7fd f9c5 	bl	800a504 <_Bfree>
 800d17a:	4654      	mov	r4, sl
 800d17c:	6922      	ldr	r2, [r4, #16]
 800d17e:	1c51      	adds	r1, r2, #1
 800d180:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d184:	6121      	str	r1, [r4, #16]
 800d186:	2101      	movs	r1, #1
 800d188:	6151      	str	r1, [r2, #20]
 800d18a:	e7bc      	b.n	800d106 <__gethex+0x396>
 800d18c:	6921      	ldr	r1, [r4, #16]
 800d18e:	4559      	cmp	r1, fp
 800d190:	dd0b      	ble.n	800d1aa <__gethex+0x43a>
 800d192:	2101      	movs	r1, #1
 800d194:	4620      	mov	r0, r4
 800d196:	f7ff fd84 	bl	800cca2 <rshift>
 800d19a:	68bb      	ldr	r3, [r7, #8]
 800d19c:	3601      	adds	r6, #1
 800d19e:	42b3      	cmp	r3, r6
 800d1a0:	f6ff aedb 	blt.w	800cf5a <__gethex+0x1ea>
 800d1a4:	f04f 0801 	mov.w	r8, #1
 800d1a8:	e7c2      	b.n	800d130 <__gethex+0x3c0>
 800d1aa:	f015 051f 	ands.w	r5, r5, #31
 800d1ae:	d0f9      	beq.n	800d1a4 <__gethex+0x434>
 800d1b0:	9b01      	ldr	r3, [sp, #4]
 800d1b2:	441a      	add	r2, r3
 800d1b4:	f1c5 0520 	rsb	r5, r5, #32
 800d1b8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d1bc:	f7fd fa54 	bl	800a668 <__hi0bits>
 800d1c0:	42a8      	cmp	r0, r5
 800d1c2:	dbe6      	blt.n	800d192 <__gethex+0x422>
 800d1c4:	e7ee      	b.n	800d1a4 <__gethex+0x434>
 800d1c6:	bf00      	nop
 800d1c8:	0800de27 	.word	0x0800de27

0800d1cc <L_shift>:
 800d1cc:	f1c2 0208 	rsb	r2, r2, #8
 800d1d0:	0092      	lsls	r2, r2, #2
 800d1d2:	b570      	push	{r4, r5, r6, lr}
 800d1d4:	f1c2 0620 	rsb	r6, r2, #32
 800d1d8:	6843      	ldr	r3, [r0, #4]
 800d1da:	6804      	ldr	r4, [r0, #0]
 800d1dc:	fa03 f506 	lsl.w	r5, r3, r6
 800d1e0:	432c      	orrs	r4, r5
 800d1e2:	40d3      	lsrs	r3, r2
 800d1e4:	6004      	str	r4, [r0, #0]
 800d1e6:	f840 3f04 	str.w	r3, [r0, #4]!
 800d1ea:	4288      	cmp	r0, r1
 800d1ec:	d3f4      	bcc.n	800d1d8 <L_shift+0xc>
 800d1ee:	bd70      	pop	{r4, r5, r6, pc}

0800d1f0 <__match>:
 800d1f0:	b530      	push	{r4, r5, lr}
 800d1f2:	6803      	ldr	r3, [r0, #0]
 800d1f4:	3301      	adds	r3, #1
 800d1f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d1fa:	b914      	cbnz	r4, 800d202 <__match+0x12>
 800d1fc:	6003      	str	r3, [r0, #0]
 800d1fe:	2001      	movs	r0, #1
 800d200:	bd30      	pop	{r4, r5, pc}
 800d202:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d206:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d20a:	2d19      	cmp	r5, #25
 800d20c:	bf98      	it	ls
 800d20e:	3220      	addls	r2, #32
 800d210:	42a2      	cmp	r2, r4
 800d212:	d0f0      	beq.n	800d1f6 <__match+0x6>
 800d214:	2000      	movs	r0, #0
 800d216:	e7f3      	b.n	800d200 <__match+0x10>

0800d218 <__hexnan>:
 800d218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d21c:	680b      	ldr	r3, [r1, #0]
 800d21e:	6801      	ldr	r1, [r0, #0]
 800d220:	115e      	asrs	r6, r3, #5
 800d222:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d226:	f013 031f 	ands.w	r3, r3, #31
 800d22a:	b087      	sub	sp, #28
 800d22c:	bf18      	it	ne
 800d22e:	3604      	addne	r6, #4
 800d230:	2500      	movs	r5, #0
 800d232:	1f37      	subs	r7, r6, #4
 800d234:	4682      	mov	sl, r0
 800d236:	4690      	mov	r8, r2
 800d238:	9301      	str	r3, [sp, #4]
 800d23a:	f846 5c04 	str.w	r5, [r6, #-4]
 800d23e:	46b9      	mov	r9, r7
 800d240:	463c      	mov	r4, r7
 800d242:	9502      	str	r5, [sp, #8]
 800d244:	46ab      	mov	fp, r5
 800d246:	784a      	ldrb	r2, [r1, #1]
 800d248:	1c4b      	adds	r3, r1, #1
 800d24a:	9303      	str	r3, [sp, #12]
 800d24c:	b342      	cbz	r2, 800d2a0 <__hexnan+0x88>
 800d24e:	4610      	mov	r0, r2
 800d250:	9105      	str	r1, [sp, #20]
 800d252:	9204      	str	r2, [sp, #16]
 800d254:	f7ff fd77 	bl	800cd46 <__hexdig_fun>
 800d258:	2800      	cmp	r0, #0
 800d25a:	d14f      	bne.n	800d2fc <__hexnan+0xe4>
 800d25c:	9a04      	ldr	r2, [sp, #16]
 800d25e:	9905      	ldr	r1, [sp, #20]
 800d260:	2a20      	cmp	r2, #32
 800d262:	d818      	bhi.n	800d296 <__hexnan+0x7e>
 800d264:	9b02      	ldr	r3, [sp, #8]
 800d266:	459b      	cmp	fp, r3
 800d268:	dd13      	ble.n	800d292 <__hexnan+0x7a>
 800d26a:	454c      	cmp	r4, r9
 800d26c:	d206      	bcs.n	800d27c <__hexnan+0x64>
 800d26e:	2d07      	cmp	r5, #7
 800d270:	dc04      	bgt.n	800d27c <__hexnan+0x64>
 800d272:	462a      	mov	r2, r5
 800d274:	4649      	mov	r1, r9
 800d276:	4620      	mov	r0, r4
 800d278:	f7ff ffa8 	bl	800d1cc <L_shift>
 800d27c:	4544      	cmp	r4, r8
 800d27e:	d950      	bls.n	800d322 <__hexnan+0x10a>
 800d280:	2300      	movs	r3, #0
 800d282:	f1a4 0904 	sub.w	r9, r4, #4
 800d286:	f844 3c04 	str.w	r3, [r4, #-4]
 800d28a:	f8cd b008 	str.w	fp, [sp, #8]
 800d28e:	464c      	mov	r4, r9
 800d290:	461d      	mov	r5, r3
 800d292:	9903      	ldr	r1, [sp, #12]
 800d294:	e7d7      	b.n	800d246 <__hexnan+0x2e>
 800d296:	2a29      	cmp	r2, #41	; 0x29
 800d298:	d155      	bne.n	800d346 <__hexnan+0x12e>
 800d29a:	3102      	adds	r1, #2
 800d29c:	f8ca 1000 	str.w	r1, [sl]
 800d2a0:	f1bb 0f00 	cmp.w	fp, #0
 800d2a4:	d04f      	beq.n	800d346 <__hexnan+0x12e>
 800d2a6:	454c      	cmp	r4, r9
 800d2a8:	d206      	bcs.n	800d2b8 <__hexnan+0xa0>
 800d2aa:	2d07      	cmp	r5, #7
 800d2ac:	dc04      	bgt.n	800d2b8 <__hexnan+0xa0>
 800d2ae:	462a      	mov	r2, r5
 800d2b0:	4649      	mov	r1, r9
 800d2b2:	4620      	mov	r0, r4
 800d2b4:	f7ff ff8a 	bl	800d1cc <L_shift>
 800d2b8:	4544      	cmp	r4, r8
 800d2ba:	d934      	bls.n	800d326 <__hexnan+0x10e>
 800d2bc:	f1a8 0204 	sub.w	r2, r8, #4
 800d2c0:	4623      	mov	r3, r4
 800d2c2:	f853 1b04 	ldr.w	r1, [r3], #4
 800d2c6:	f842 1f04 	str.w	r1, [r2, #4]!
 800d2ca:	429f      	cmp	r7, r3
 800d2cc:	d2f9      	bcs.n	800d2c2 <__hexnan+0xaa>
 800d2ce:	1b3b      	subs	r3, r7, r4
 800d2d0:	f023 0303 	bic.w	r3, r3, #3
 800d2d4:	3304      	adds	r3, #4
 800d2d6:	3e03      	subs	r6, #3
 800d2d8:	3401      	adds	r4, #1
 800d2da:	42a6      	cmp	r6, r4
 800d2dc:	bf38      	it	cc
 800d2de:	2304      	movcc	r3, #4
 800d2e0:	4443      	add	r3, r8
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	f843 2b04 	str.w	r2, [r3], #4
 800d2e8:	429f      	cmp	r7, r3
 800d2ea:	d2fb      	bcs.n	800d2e4 <__hexnan+0xcc>
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	b91b      	cbnz	r3, 800d2f8 <__hexnan+0xe0>
 800d2f0:	4547      	cmp	r7, r8
 800d2f2:	d126      	bne.n	800d342 <__hexnan+0x12a>
 800d2f4:	2301      	movs	r3, #1
 800d2f6:	603b      	str	r3, [r7, #0]
 800d2f8:	2005      	movs	r0, #5
 800d2fa:	e025      	b.n	800d348 <__hexnan+0x130>
 800d2fc:	3501      	adds	r5, #1
 800d2fe:	2d08      	cmp	r5, #8
 800d300:	f10b 0b01 	add.w	fp, fp, #1
 800d304:	dd06      	ble.n	800d314 <__hexnan+0xfc>
 800d306:	4544      	cmp	r4, r8
 800d308:	d9c3      	bls.n	800d292 <__hexnan+0x7a>
 800d30a:	2300      	movs	r3, #0
 800d30c:	f844 3c04 	str.w	r3, [r4, #-4]
 800d310:	2501      	movs	r5, #1
 800d312:	3c04      	subs	r4, #4
 800d314:	6822      	ldr	r2, [r4, #0]
 800d316:	f000 000f 	and.w	r0, r0, #15
 800d31a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d31e:	6020      	str	r0, [r4, #0]
 800d320:	e7b7      	b.n	800d292 <__hexnan+0x7a>
 800d322:	2508      	movs	r5, #8
 800d324:	e7b5      	b.n	800d292 <__hexnan+0x7a>
 800d326:	9b01      	ldr	r3, [sp, #4]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d0df      	beq.n	800d2ec <__hexnan+0xd4>
 800d32c:	f1c3 0320 	rsb	r3, r3, #32
 800d330:	f04f 32ff 	mov.w	r2, #4294967295
 800d334:	40da      	lsrs	r2, r3
 800d336:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d33a:	4013      	ands	r3, r2
 800d33c:	f846 3c04 	str.w	r3, [r6, #-4]
 800d340:	e7d4      	b.n	800d2ec <__hexnan+0xd4>
 800d342:	3f04      	subs	r7, #4
 800d344:	e7d2      	b.n	800d2ec <__hexnan+0xd4>
 800d346:	2004      	movs	r0, #4
 800d348:	b007      	add	sp, #28
 800d34a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d34e <__ascii_mbtowc>:
 800d34e:	b082      	sub	sp, #8
 800d350:	b901      	cbnz	r1, 800d354 <__ascii_mbtowc+0x6>
 800d352:	a901      	add	r1, sp, #4
 800d354:	b142      	cbz	r2, 800d368 <__ascii_mbtowc+0x1a>
 800d356:	b14b      	cbz	r3, 800d36c <__ascii_mbtowc+0x1e>
 800d358:	7813      	ldrb	r3, [r2, #0]
 800d35a:	600b      	str	r3, [r1, #0]
 800d35c:	7812      	ldrb	r2, [r2, #0]
 800d35e:	1e10      	subs	r0, r2, #0
 800d360:	bf18      	it	ne
 800d362:	2001      	movne	r0, #1
 800d364:	b002      	add	sp, #8
 800d366:	4770      	bx	lr
 800d368:	4610      	mov	r0, r2
 800d36a:	e7fb      	b.n	800d364 <__ascii_mbtowc+0x16>
 800d36c:	f06f 0001 	mvn.w	r0, #1
 800d370:	e7f8      	b.n	800d364 <__ascii_mbtowc+0x16>
	...

0800d374 <_strtoul_l.constprop.0>:
 800d374:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d378:	4f36      	ldr	r7, [pc, #216]	; (800d454 <_strtoul_l.constprop.0+0xe0>)
 800d37a:	4686      	mov	lr, r0
 800d37c:	460d      	mov	r5, r1
 800d37e:	4628      	mov	r0, r5
 800d380:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d384:	5d3e      	ldrb	r6, [r7, r4]
 800d386:	f016 0608 	ands.w	r6, r6, #8
 800d38a:	d1f8      	bne.n	800d37e <_strtoul_l.constprop.0+0xa>
 800d38c:	2c2d      	cmp	r4, #45	; 0x2d
 800d38e:	d130      	bne.n	800d3f2 <_strtoul_l.constprop.0+0x7e>
 800d390:	782c      	ldrb	r4, [r5, #0]
 800d392:	2601      	movs	r6, #1
 800d394:	1c85      	adds	r5, r0, #2
 800d396:	2b00      	cmp	r3, #0
 800d398:	d057      	beq.n	800d44a <_strtoul_l.constprop.0+0xd6>
 800d39a:	2b10      	cmp	r3, #16
 800d39c:	d109      	bne.n	800d3b2 <_strtoul_l.constprop.0+0x3e>
 800d39e:	2c30      	cmp	r4, #48	; 0x30
 800d3a0:	d107      	bne.n	800d3b2 <_strtoul_l.constprop.0+0x3e>
 800d3a2:	7828      	ldrb	r0, [r5, #0]
 800d3a4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d3a8:	2858      	cmp	r0, #88	; 0x58
 800d3aa:	d149      	bne.n	800d440 <_strtoul_l.constprop.0+0xcc>
 800d3ac:	786c      	ldrb	r4, [r5, #1]
 800d3ae:	2310      	movs	r3, #16
 800d3b0:	3502      	adds	r5, #2
 800d3b2:	f04f 38ff 	mov.w	r8, #4294967295
 800d3b6:	2700      	movs	r7, #0
 800d3b8:	fbb8 f8f3 	udiv	r8, r8, r3
 800d3bc:	fb03 f908 	mul.w	r9, r3, r8
 800d3c0:	ea6f 0909 	mvn.w	r9, r9
 800d3c4:	4638      	mov	r0, r7
 800d3c6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d3ca:	f1bc 0f09 	cmp.w	ip, #9
 800d3ce:	d815      	bhi.n	800d3fc <_strtoul_l.constprop.0+0x88>
 800d3d0:	4664      	mov	r4, ip
 800d3d2:	42a3      	cmp	r3, r4
 800d3d4:	dd23      	ble.n	800d41e <_strtoul_l.constprop.0+0xaa>
 800d3d6:	f1b7 3fff 	cmp.w	r7, #4294967295
 800d3da:	d007      	beq.n	800d3ec <_strtoul_l.constprop.0+0x78>
 800d3dc:	4580      	cmp	r8, r0
 800d3de:	d31b      	bcc.n	800d418 <_strtoul_l.constprop.0+0xa4>
 800d3e0:	d101      	bne.n	800d3e6 <_strtoul_l.constprop.0+0x72>
 800d3e2:	45a1      	cmp	r9, r4
 800d3e4:	db18      	blt.n	800d418 <_strtoul_l.constprop.0+0xa4>
 800d3e6:	fb00 4003 	mla	r0, r0, r3, r4
 800d3ea:	2701      	movs	r7, #1
 800d3ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d3f0:	e7e9      	b.n	800d3c6 <_strtoul_l.constprop.0+0x52>
 800d3f2:	2c2b      	cmp	r4, #43	; 0x2b
 800d3f4:	bf04      	itt	eq
 800d3f6:	782c      	ldrbeq	r4, [r5, #0]
 800d3f8:	1c85      	addeq	r5, r0, #2
 800d3fa:	e7cc      	b.n	800d396 <_strtoul_l.constprop.0+0x22>
 800d3fc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d400:	f1bc 0f19 	cmp.w	ip, #25
 800d404:	d801      	bhi.n	800d40a <_strtoul_l.constprop.0+0x96>
 800d406:	3c37      	subs	r4, #55	; 0x37
 800d408:	e7e3      	b.n	800d3d2 <_strtoul_l.constprop.0+0x5e>
 800d40a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d40e:	f1bc 0f19 	cmp.w	ip, #25
 800d412:	d804      	bhi.n	800d41e <_strtoul_l.constprop.0+0xaa>
 800d414:	3c57      	subs	r4, #87	; 0x57
 800d416:	e7dc      	b.n	800d3d2 <_strtoul_l.constprop.0+0x5e>
 800d418:	f04f 37ff 	mov.w	r7, #4294967295
 800d41c:	e7e6      	b.n	800d3ec <_strtoul_l.constprop.0+0x78>
 800d41e:	1c7b      	adds	r3, r7, #1
 800d420:	d106      	bne.n	800d430 <_strtoul_l.constprop.0+0xbc>
 800d422:	2322      	movs	r3, #34	; 0x22
 800d424:	f8ce 3000 	str.w	r3, [lr]
 800d428:	4638      	mov	r0, r7
 800d42a:	b932      	cbnz	r2, 800d43a <_strtoul_l.constprop.0+0xc6>
 800d42c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d430:	b106      	cbz	r6, 800d434 <_strtoul_l.constprop.0+0xc0>
 800d432:	4240      	negs	r0, r0
 800d434:	2a00      	cmp	r2, #0
 800d436:	d0f9      	beq.n	800d42c <_strtoul_l.constprop.0+0xb8>
 800d438:	b107      	cbz	r7, 800d43c <_strtoul_l.constprop.0+0xc8>
 800d43a:	1e69      	subs	r1, r5, #1
 800d43c:	6011      	str	r1, [r2, #0]
 800d43e:	e7f5      	b.n	800d42c <_strtoul_l.constprop.0+0xb8>
 800d440:	2430      	movs	r4, #48	; 0x30
 800d442:	2b00      	cmp	r3, #0
 800d444:	d1b5      	bne.n	800d3b2 <_strtoul_l.constprop.0+0x3e>
 800d446:	2308      	movs	r3, #8
 800d448:	e7b3      	b.n	800d3b2 <_strtoul_l.constprop.0+0x3e>
 800d44a:	2c30      	cmp	r4, #48	; 0x30
 800d44c:	d0a9      	beq.n	800d3a2 <_strtoul_l.constprop.0+0x2e>
 800d44e:	230a      	movs	r3, #10
 800d450:	e7af      	b.n	800d3b2 <_strtoul_l.constprop.0+0x3e>
 800d452:	bf00      	nop
 800d454:	0800dfe9 	.word	0x0800dfe9

0800d458 <_strtoul_r>:
 800d458:	f7ff bf8c 	b.w	800d374 <_strtoul_l.constprop.0>

0800d45c <__ascii_wctomb>:
 800d45c:	b149      	cbz	r1, 800d472 <__ascii_wctomb+0x16>
 800d45e:	2aff      	cmp	r2, #255	; 0xff
 800d460:	bf85      	ittet	hi
 800d462:	238a      	movhi	r3, #138	; 0x8a
 800d464:	6003      	strhi	r3, [r0, #0]
 800d466:	700a      	strbls	r2, [r1, #0]
 800d468:	f04f 30ff 	movhi.w	r0, #4294967295
 800d46c:	bf98      	it	ls
 800d46e:	2001      	movls	r0, #1
 800d470:	4770      	bx	lr
 800d472:	4608      	mov	r0, r1
 800d474:	4770      	bx	lr

0800d476 <__swhatbuf_r>:
 800d476:	b570      	push	{r4, r5, r6, lr}
 800d478:	460c      	mov	r4, r1
 800d47a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d47e:	2900      	cmp	r1, #0
 800d480:	b096      	sub	sp, #88	; 0x58
 800d482:	4615      	mov	r5, r2
 800d484:	461e      	mov	r6, r3
 800d486:	da0d      	bge.n	800d4a4 <__swhatbuf_r+0x2e>
 800d488:	89a3      	ldrh	r3, [r4, #12]
 800d48a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d48e:	f04f 0100 	mov.w	r1, #0
 800d492:	bf0c      	ite	eq
 800d494:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d498:	2340      	movne	r3, #64	; 0x40
 800d49a:	2000      	movs	r0, #0
 800d49c:	6031      	str	r1, [r6, #0]
 800d49e:	602b      	str	r3, [r5, #0]
 800d4a0:	b016      	add	sp, #88	; 0x58
 800d4a2:	bd70      	pop	{r4, r5, r6, pc}
 800d4a4:	466a      	mov	r2, sp
 800d4a6:	f000 f879 	bl	800d59c <_fstat_r>
 800d4aa:	2800      	cmp	r0, #0
 800d4ac:	dbec      	blt.n	800d488 <__swhatbuf_r+0x12>
 800d4ae:	9901      	ldr	r1, [sp, #4]
 800d4b0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d4b4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d4b8:	4259      	negs	r1, r3
 800d4ba:	4159      	adcs	r1, r3
 800d4bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d4c0:	e7eb      	b.n	800d49a <__swhatbuf_r+0x24>

0800d4c2 <__smakebuf_r>:
 800d4c2:	898b      	ldrh	r3, [r1, #12]
 800d4c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d4c6:	079d      	lsls	r5, r3, #30
 800d4c8:	4606      	mov	r6, r0
 800d4ca:	460c      	mov	r4, r1
 800d4cc:	d507      	bpl.n	800d4de <__smakebuf_r+0x1c>
 800d4ce:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d4d2:	6023      	str	r3, [r4, #0]
 800d4d4:	6123      	str	r3, [r4, #16]
 800d4d6:	2301      	movs	r3, #1
 800d4d8:	6163      	str	r3, [r4, #20]
 800d4da:	b002      	add	sp, #8
 800d4dc:	bd70      	pop	{r4, r5, r6, pc}
 800d4de:	ab01      	add	r3, sp, #4
 800d4e0:	466a      	mov	r2, sp
 800d4e2:	f7ff ffc8 	bl	800d476 <__swhatbuf_r>
 800d4e6:	9900      	ldr	r1, [sp, #0]
 800d4e8:	4605      	mov	r5, r0
 800d4ea:	4630      	mov	r0, r6
 800d4ec:	f7fa ffc4 	bl	8008478 <_malloc_r>
 800d4f0:	b948      	cbnz	r0, 800d506 <__smakebuf_r+0x44>
 800d4f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4f6:	059a      	lsls	r2, r3, #22
 800d4f8:	d4ef      	bmi.n	800d4da <__smakebuf_r+0x18>
 800d4fa:	f023 0303 	bic.w	r3, r3, #3
 800d4fe:	f043 0302 	orr.w	r3, r3, #2
 800d502:	81a3      	strh	r3, [r4, #12]
 800d504:	e7e3      	b.n	800d4ce <__smakebuf_r+0xc>
 800d506:	89a3      	ldrh	r3, [r4, #12]
 800d508:	6020      	str	r0, [r4, #0]
 800d50a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d50e:	81a3      	strh	r3, [r4, #12]
 800d510:	9b00      	ldr	r3, [sp, #0]
 800d512:	6163      	str	r3, [r4, #20]
 800d514:	9b01      	ldr	r3, [sp, #4]
 800d516:	6120      	str	r0, [r4, #16]
 800d518:	b15b      	cbz	r3, 800d532 <__smakebuf_r+0x70>
 800d51a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d51e:	4630      	mov	r0, r6
 800d520:	f000 f84e 	bl	800d5c0 <_isatty_r>
 800d524:	b128      	cbz	r0, 800d532 <__smakebuf_r+0x70>
 800d526:	89a3      	ldrh	r3, [r4, #12]
 800d528:	f023 0303 	bic.w	r3, r3, #3
 800d52c:	f043 0301 	orr.w	r3, r3, #1
 800d530:	81a3      	strh	r3, [r4, #12]
 800d532:	89a3      	ldrh	r3, [r4, #12]
 800d534:	431d      	orrs	r5, r3
 800d536:	81a5      	strh	r5, [r4, #12]
 800d538:	e7cf      	b.n	800d4da <__smakebuf_r+0x18>

0800d53a <_raise_r>:
 800d53a:	291f      	cmp	r1, #31
 800d53c:	b538      	push	{r3, r4, r5, lr}
 800d53e:	4604      	mov	r4, r0
 800d540:	460d      	mov	r5, r1
 800d542:	d904      	bls.n	800d54e <_raise_r+0x14>
 800d544:	2316      	movs	r3, #22
 800d546:	6003      	str	r3, [r0, #0]
 800d548:	f04f 30ff 	mov.w	r0, #4294967295
 800d54c:	bd38      	pop	{r3, r4, r5, pc}
 800d54e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d550:	b112      	cbz	r2, 800d558 <_raise_r+0x1e>
 800d552:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d556:	b94b      	cbnz	r3, 800d56c <_raise_r+0x32>
 800d558:	4620      	mov	r0, r4
 800d55a:	f000 f853 	bl	800d604 <_getpid_r>
 800d55e:	462a      	mov	r2, r5
 800d560:	4601      	mov	r1, r0
 800d562:	4620      	mov	r0, r4
 800d564:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d568:	f000 b83a 	b.w	800d5e0 <_kill_r>
 800d56c:	2b01      	cmp	r3, #1
 800d56e:	d00a      	beq.n	800d586 <_raise_r+0x4c>
 800d570:	1c59      	adds	r1, r3, #1
 800d572:	d103      	bne.n	800d57c <_raise_r+0x42>
 800d574:	2316      	movs	r3, #22
 800d576:	6003      	str	r3, [r0, #0]
 800d578:	2001      	movs	r0, #1
 800d57a:	e7e7      	b.n	800d54c <_raise_r+0x12>
 800d57c:	2400      	movs	r4, #0
 800d57e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d582:	4628      	mov	r0, r5
 800d584:	4798      	blx	r3
 800d586:	2000      	movs	r0, #0
 800d588:	e7e0      	b.n	800d54c <_raise_r+0x12>
	...

0800d58c <raise>:
 800d58c:	4b02      	ldr	r3, [pc, #8]	; (800d598 <raise+0xc>)
 800d58e:	4601      	mov	r1, r0
 800d590:	6818      	ldr	r0, [r3, #0]
 800d592:	f7ff bfd2 	b.w	800d53a <_raise_r>
 800d596:	bf00      	nop
 800d598:	20000738 	.word	0x20000738

0800d59c <_fstat_r>:
 800d59c:	b538      	push	{r3, r4, r5, lr}
 800d59e:	4d07      	ldr	r5, [pc, #28]	; (800d5bc <_fstat_r+0x20>)
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	4604      	mov	r4, r0
 800d5a4:	4608      	mov	r0, r1
 800d5a6:	4611      	mov	r1, r2
 800d5a8:	602b      	str	r3, [r5, #0]
 800d5aa:	f7f6 fce7 	bl	8003f7c <_fstat>
 800d5ae:	1c43      	adds	r3, r0, #1
 800d5b0:	d102      	bne.n	800d5b8 <_fstat_r+0x1c>
 800d5b2:	682b      	ldr	r3, [r5, #0]
 800d5b4:	b103      	cbz	r3, 800d5b8 <_fstat_r+0x1c>
 800d5b6:	6023      	str	r3, [r4, #0]
 800d5b8:	bd38      	pop	{r3, r4, r5, pc}
 800d5ba:	bf00      	nop
 800d5bc:	200027dc 	.word	0x200027dc

0800d5c0 <_isatty_r>:
 800d5c0:	b538      	push	{r3, r4, r5, lr}
 800d5c2:	4d06      	ldr	r5, [pc, #24]	; (800d5dc <_isatty_r+0x1c>)
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	4604      	mov	r4, r0
 800d5c8:	4608      	mov	r0, r1
 800d5ca:	602b      	str	r3, [r5, #0]
 800d5cc:	f7f6 fce6 	bl	8003f9c <_isatty>
 800d5d0:	1c43      	adds	r3, r0, #1
 800d5d2:	d102      	bne.n	800d5da <_isatty_r+0x1a>
 800d5d4:	682b      	ldr	r3, [r5, #0]
 800d5d6:	b103      	cbz	r3, 800d5da <_isatty_r+0x1a>
 800d5d8:	6023      	str	r3, [r4, #0]
 800d5da:	bd38      	pop	{r3, r4, r5, pc}
 800d5dc:	200027dc 	.word	0x200027dc

0800d5e0 <_kill_r>:
 800d5e0:	b538      	push	{r3, r4, r5, lr}
 800d5e2:	4d07      	ldr	r5, [pc, #28]	; (800d600 <_kill_r+0x20>)
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	4604      	mov	r4, r0
 800d5e8:	4608      	mov	r0, r1
 800d5ea:	4611      	mov	r1, r2
 800d5ec:	602b      	str	r3, [r5, #0]
 800d5ee:	f7f6 fc66 	bl	8003ebe <_kill>
 800d5f2:	1c43      	adds	r3, r0, #1
 800d5f4:	d102      	bne.n	800d5fc <_kill_r+0x1c>
 800d5f6:	682b      	ldr	r3, [r5, #0]
 800d5f8:	b103      	cbz	r3, 800d5fc <_kill_r+0x1c>
 800d5fa:	6023      	str	r3, [r4, #0]
 800d5fc:	bd38      	pop	{r3, r4, r5, pc}
 800d5fe:	bf00      	nop
 800d600:	200027dc 	.word	0x200027dc

0800d604 <_getpid_r>:
 800d604:	f7f6 bc53 	b.w	8003eae <_getpid>

0800d608 <_init>:
 800d608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d60a:	bf00      	nop
 800d60c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d60e:	bc08      	pop	{r3}
 800d610:	469e      	mov	lr, r3
 800d612:	4770      	bx	lr

0800d614 <_fini>:
 800d614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d616:	bf00      	nop
 800d618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d61a:	bc08      	pop	{r3}
 800d61c:	469e      	mov	lr, r3
 800d61e:	4770      	bx	lr
